// This file is auto-generated. Do not edit manually.
import { CommandCategory, CommandReference } from '../types/commandReference';

export const commandCategories: CommandCategory[] = [
  {
    "id": "bitmap",
    "categoryName": "Bitmap",
    "description": "Operations on the Bitmap data type"
  },
  {
    "id": "cluster",
    "categoryName": "Cluster",
    "description": "Valkey Cluster management"
  },
  {
    "id": "connection",
    "categoryName": "Connection",
    "description": "Client connections management"
  },
  {
    "id": "generic",
    "categoryName": "Generic",
    "description": "Generic commands"
  },
  {
    "id": "geo",
    "categoryName": "Geospatial indices",
    "description": "Operations on the Geospatial Index data type"
  },
  {
    "id": "hash",
    "categoryName": "Hash",
    "description": "Operations on the Hash data type"
  },
  {
    "id": "hyperloglog",
    "categoryName": "HyperLogLog",
    "description": "Operations on the HyperLogLog data type"
  },
  {
    "id": "list",
    "categoryName": "List",
    "description": "Operations on the List data type"
  },
  {
    "id": "pubsub",
    "categoryName": "Pub/Sub",
    "description": "Pub/Sub commands"
  },
  {
    "id": "scripting",
    "categoryName": "Scripting and Functions",
    "description": "Valkey server-side scripting and functions"
  },
  {
    "id": "sentinel",
    "categoryName": "Sentinel",
    "description": "Valkey Sentinel commands"
  },
  {
    "id": "server",
    "categoryName": "Server",
    "description": "Server management commands"
  },
  {
    "id": "set",
    "categoryName": "Set",
    "description": "Operations on the Set data type"
  },
  {
    "id": "sorted-set",
    "categoryName": "Sorted Set",
    "description": "Operations on the Sorted Set data type"
  },
  {
    "id": "stream",
    "categoryName": "Stream",
    "description": "Operations on the Stream data type"
  },
  {
    "id": "string",
    "categoryName": "String",
    "description": "Operations on the String data type"
  },
  {
    "id": "transactions",
    "categoryName": "Transactions",
    "description": "Valkey Transaction management"
  }
];

export const commandReferences: CommandReference[] = [
  {
    "unid": "cmd-acl",
    "command": "ACL",
    "description": "A container for Access List Control commands.",
    "htmlContent": "<p>This is a container command for <a href=\"../topics/acl\">Access Control List</a> commands.</p>\n<p>To see the list of available commands you can call <code>ACL HELP</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-cat",
    "command": "ACL CAT",
    "description": "Lists the ACL categories, or the commands inside a category.",
    "htmlContent": "<p>The command shows the available ACL categories if called without arguments.\nIf a category name is given, the command shows all the Valkey commands in\nthe specified category.</p>\n<p>ACL categories are very useful in order to create ACL rules that include or\nexclude a large set of commands at once, without specifying every single\ncommand. For instance, the following rule will let the user <code>karin</code> perform\neverything but the most dangerous operations that may affect the server\nstability:</p>\n<pre><code>ACL SETUSER karin on +@all -@dangerous\n</code></pre>\n<p>We first add all the commands to the set of commands that <code>karin</code> is able\nto execute, but then we remove all the dangerous commands.</p>\n<p>Checking for all the available categories is as simple as:</p>\n<pre><code>&gt; ACL CAT\n 1) &quot;keyspace&quot;\n 2) &quot;read&quot;\n 3) &quot;write&quot;\n 4) &quot;set&quot;\n 5) &quot;sortedset&quot;\n 6) &quot;list&quot;\n 7) &quot;hash&quot;\n 8) &quot;string&quot;\n 9) &quot;bitmap&quot;\n10) &quot;hyperloglog&quot;\n11) &quot;geo&quot;\n12) &quot;stream&quot;\n13) &quot;pubsub&quot;\n14) &quot;admin&quot;\n15) &quot;fast&quot;\n16) &quot;slow&quot;\n17) &quot;blocking&quot;\n18) &quot;dangerous&quot;\n19) &quot;connection&quot;\n20) &quot;transaction&quot;\n21) &quot;scripting&quot;\n</code></pre>\n<p>Then we may want to know what commands are part of a given category:</p>\n<pre><code>&gt; ACL CAT dangerous\n 1) &quot;flushdb&quot;\n 2) &quot;acl&quot;\n 3) &quot;slowlog&quot;\n 4) &quot;debug&quot;\n 5) &quot;role&quot;\n 6) &quot;keys&quot;\n 7) &quot;pfselftest&quot;\n 8) &quot;client&quot;\n 9) &quot;bgrewriteaof&quot;\n10) &quot;replicaof&quot;\n11) &quot;monitor&quot;\n12) &quot;restore-asking&quot;\n13) &quot;latency&quot;\n14) &quot;replconf&quot;\n15) &quot;pfdebug&quot;\n16) &quot;bgsave&quot;\n17) &quot;sync&quot;\n18) &quot;config&quot;\n19) &quot;flushall&quot;\n20) &quot;cluster&quot;\n21) &quot;info&quot;\n22) &quot;lastsave&quot;\n23) &quot;slaveof&quot;\n24) &quot;swapdb&quot;\n25) &quot;module&quot;\n26) &quot;restore&quot;\n27) &quot;migrate&quot;\n28) &quot;save&quot;\n29) &quot;shutdown&quot;\n30) &quot;psync&quot;\n31) &quot;sort&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-deluser",
    "command": "ACL DELUSER",
    "description": "Deletes ACL users, and terminates their connections.",
    "htmlContent": "<p>Delete all the specified ACL users and terminate all the connections that are\nauthenticated with such users. Note: the special <code>default</code> user cannot be\nremoved from the system, this is the default user that every new connection\nis authenticated with. The list of users may include usernames that do not\nexist, in such case no operation is performed for the non existing users.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL DELUSER antirez\n(integer) 1\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-dryrun",
    "command": "ACL DRYRUN",
    "description": "Simulates the execution of a command by a user, without executing the command.",
    "htmlContent": "<p>Simulate the execution of a given command by a given user.\nThis command can be used to test the permissions of a given user without having to enable the user or cause the side effects of running the command.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL SETUSER VIRGINIA +SET ~*\n&quot;OK&quot;\n127.0.0.1:6379&gt; ACL DRYRUN VIRGINIA SET foo bar\n&quot;OK&quot;\n127.0.0.1:6379&gt; ACL DRYRUN VIRGINIA GET foo\n&quot;User VIRGINIA has no permissions to run the &#39;get&#39; command&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-genpass",
    "command": "ACL GENPASS",
    "description": "Generates a pseudorandom, secure password that can be used to identify ACL users.",
    "htmlContent": "<p>ACL users need a solid password in order to authenticate to the server without\nsecurity risks. Such password does not need to be remembered by humans, but\nonly by computers, so it can be very long and strong (unguessable by an\nexternal attacker). The <code>ACL GENPASS</code> command generates a password starting\nfrom /dev/urandom if available, otherwise (in systems without /dev/urandom) it\nuses a weaker system that is likely still better than picking a weak password\nby hand.</p>\n<p>By default (if /dev/urandom is available) the password is strong and\ncan be used for other uses in the context of an application, for\ninstance in order to create unique session identifiers or other kind of\nunguessable and not colliding IDs. The password generation is also very cheap\nbecause we don&#39;t really ask /dev/urandom for bits at every execution. At\nstartup Valkey creates a seed using /dev/urandom, then it will use SHA256\nin counter mode, with HMAC-SHA256(seed,counter) as primitive, in order to\ncreate more random bytes as needed. This means that the application developer\nshould be feel free to abuse <code>ACL GENPASS</code> to create as many secure\npseudorandom strings as needed.</p>\n<p>The command output is a hexadecimal representation of a binary string.\nBy default it emits 256 bits (so 64 hex characters). The user can provide\nan argument in form of number of bits to emit from 1 to 1024 to change\nthe output length. Note that the number of bits provided is always\nrounded to the next multiple of 4. So for instance asking for just 1\nbit password will result in 4 bits to be emitted, in the form of a single\nhex character.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL GENPASS\n&quot;dd721260bfe1b3d9601e7fbab36de6d04e2e67b0ef1c53de59d45950db0dd3cc&quot;\n127.0.0.1:6379&gt; ACL GENPASS 32\n&quot;355ef3dd&quot;\n127.0.0.1:6379&gt; ACL GENPASS 5\n&quot;90&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-getuser",
    "command": "ACL GETUSER",
    "description": "Lists the ACL rules of a user.",
    "htmlContent": "<p>The command returns all the rules defined for an existing ACL user.</p>\n<p>Specifically, it lists the user&#39;s ACL flags, password hashes, commands, key patterns, channel patterns (Added in version 6.2) and selectors (Added in version 7.0).\nAdditional information may be returned in the future if more metadata is added to the user.</p>\n<p>Command rules are always returned in the same format as the one used in the <code>ACL SETUSER</code> command.\nBefore version 7.0, keys and channels were returned as an array of patterns, however in version 7.0 later they are now also returned in same format as the one used in the <code>ACL SETUSER</code> command.\nNote: This description of command rules reflects the user&#39;s effective permissions, so while it may not be identical to the set of rules used to configure the user, it is still functionally identical.</p>\n<p>Selectors are listed in the order they were applied to the user, and include information about commands, key patterns, and channel patterns.</p>\n<h2>Examples</h2>\n<p>Here&#39;s an example configuration for a user</p>\n<pre><code>127.0.0.1:6379&gt; ACL SETUSER sample on nopass +GET allkeys &amp;* (+SET ~key2)\n&quot;OK&quot;\n127.0.0.1:6379&gt; ACL GETUSER sample\n1) &quot;flags&quot;\n2) 1) &quot;on&quot;\n   2) &quot;allkeys&quot;\n   3) &quot;nopass&quot;\n3) &quot;passwords&quot;\n4) (empty array)\n5) &quot;commands&quot;\n6) &quot;+@all&quot;\n7) &quot;keys&quot;\n8) &quot;~*&quot;\n9) &quot;channels&quot;\n10) &quot;&amp;*&quot;\n11) &quot;selectors&quot;\n12) 1) 1) &quot;commands&quot;\n       6) &quot;+SET&quot;\n       7) &quot;keys&quot;\n       8) &quot;~key2&quot;\n       9) &quot;channels&quot;\n       10) &quot;&amp;*&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-help",
    "command": "ACL HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>ACL HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-list",
    "command": "ACL LIST",
    "description": "Dumps the effective rules in ACL file format.",
    "htmlContent": "<p>The command shows the currently active ACL rules in the Valkey server. Each\nline in the returned array defines a different user, and the format is the\nsame used in the valkey.conf file or the external ACL file, so you can\ncut and paste what is returned by the ACL LIST command directly inside a\nconfiguration file if you wish (but make sure to check <code>ACL SAVE</code>).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL LIST\n1) &quot;user antirez on #9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 ~objects:* &amp;* +@all -@admin -@dangerous&quot;\n2) &quot;user default on nopass ~* &amp;* +@all&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-load",
    "command": "ACL LOAD",
    "description": "Reloads the rules from the configured ACL file.",
    "htmlContent": "<p>When Valkey is configured to use an ACL file (with the <code>aclfile</code> configuration\noption), this command will reload the ACLs from the file, replacing all\nthe current ACL rules with the ones defined in the file. The command makes\nsure to have an <em>all or nothing</em> behavior, that is:</p>\n<ul>\n<li>If every line in the file is valid, all the ACLs are loaded.</li>\n<li>If one or more line in the file is not valid, nothing is loaded, and the old ACL rules defined in the server memory continue to be used.</li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL LOAD\nOK\n</code></pre>\n<pre><code>127.0.0.1:6379&gt; ACL LOAD\n(error) ERR /tmp/foo:1: Unknown command or category name in ACL...\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-log",
    "command": "ACL LOG",
    "description": "Lists recent security events generated due to ACL rules.",
    "htmlContent": "<p>The command shows a list of recent ACL security events:</p>\n<ol>\n<li>Failures to authenticate their connections with <code>AUTH</code> or <code>HELLO</code>.</li>\n<li>Commands denied because against the current ACL rules.</li>\n<li>Commands denied because accessing keys not allowed in the current ACL rules.</li>\n</ol>\n<p>The optional argument specifies how many entries to show. By default\nup to ten failures are returned. The special <code>RESET</code> argument clears the log.\nEntries are displayed starting from the most recent.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; AUTH someuser wrongpassword\n(error) WRONGPASS invalid username-password pair\n&gt; ACL LOG 1\n1)  1) &quot;count&quot;\n    2) (integer) 1\n    3) &quot;reason&quot;\n    4) &quot;auth&quot;\n    5) &quot;context&quot;\n    6) &quot;toplevel&quot;\n    7) &quot;object&quot;\n    8) &quot;AUTH&quot;\n    9) &quot;username&quot;\n   10) &quot;someuser&quot;\n   11) &quot;age-seconds&quot;\n   12) &quot;8.038&quot;\n   13) &quot;client-info&quot;\n   14) &quot;id=3 addr=127.0.0.1:57275 laddr=127.0.0.1:6379 fd=8 name= age=16 idle=0 flags=N db=0 sub=0 psub=0 ssub=0 multi=-1 qbuf=48 qbuf-free=16842 argv-mem=25 multi-mem=0 rbs=1024 rbp=0 obl=0 oll=0 omem=0 tot-mem=18737 events=r cmd=auth user=default redir=-1 resp=2&quot;\n   15) &quot;entry-id&quot;\n   16) (integer) 0\n   17) &quot;timestamp-created&quot;\n   18) (integer) 1675361492408\n   19) &quot;timestamp-last-updated&quot;\n   20) (integer) 1675361492408\n</code></pre>\n<p>Each log entry is composed of the following fields:</p>\n<ol>\n<li><code>count</code>: The number of security events detected within a 60 second period that are represented by this entry.</li>\n<li><code>reason</code>: The reason that the security events were logged. Either <code>command</code>, <code>key</code>, <code>channel</code>, or <code>auth</code>.</li>\n<li><code>context</code>: The context that the security events were detected in. Either <code>toplevel</code>, <code>multi</code>, <code>lua</code>, or <code>module</code>.</li>\n<li><code>object</code>: The resource that the user had insufficient permissions to access. <code>auth</code> when the reason is <code>auth</code>.</li>\n<li><code>username</code>: The username that executed the command that caused the security events or the username that had a failed authentication attempt.</li>\n<li><code>age-seconds</code>: Age of the log entry in seconds.</li>\n<li><code>client-info</code>: Displays the client info of a client which caused one of the security events.</li>\n<li><code>entry-id</code>: The sequence number of the entry (starting at 0) since the server process started. Can also be used to check if items were “lost”, if they fell between periods.</li>\n<li><code>timestamp-created</code>: A UNIX timestamp in <code>milliseconds</code> at the time the entry was first created.</li>\n<li><code>timestamp-last-updated</code>: A UNIX timestamp in <code>milliseconds</code> at the time the entry was last updated.</li>\n</ol>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-save",
    "command": "ACL SAVE",
    "description": "Saves the effective ACL rules in the configured ACL file.",
    "htmlContent": "<p>When Valkey is configured to use an ACL file (with the <code>aclfile</code> configuration\noption), this command will save the currently defined ACLs from the server memory to the ACL file.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL SAVE\nOK\n127.0.0.1:6379&gt; ACL SAVE\n(error) ERR There was an error trying to save the ACLs. Please check the server logs for more information\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-setuser",
    "command": "ACL SETUSER",
    "description": "Creates and modifies an ACL user and its rules.",
    "htmlContent": "<p>Create an ACL user with the specified rules or modify the rules of an\nexisting user. </p>\n<p>Manipulate Valkey ACL users interactively.\nIf the username does not exist, the command creates the username without any privilege.\nIt then reads from left to right all the <a href=\"#acl-rules\">rules</a> provided as successive arguments, setting the user ACL rules as specified.\nIf the user already exists, the provided ACL rules are simply applied\n<em>in addition</em> to the rules already set. For example:</p>\n<pre><code>ACL SETUSER virginia on allkeys +set\n</code></pre>\n<p>The above command creates a user called <code>virginia</code> who is active(the <em>on</em> rule), can access any key (<em>allkeys</em> rule), and can call the set command (<em>+set</em> rule).\nThen, you can use another <code>ACL SETUSER</code> call to modify the user rules:</p>\n<pre><code>ACL SETUSER virginia +get\n</code></pre>\n<p>The above rule applies the new rule to the user <code>virginia</code>, so other than <code>SET</code>, the user <code>virginia</code> can now also use the <code>GET</code> command.</p>\n<p>ACL rules can also be grouped into multiple distinct sets of rules, called <em>selectors</em>.\nSelectors are added by wrapping the rules in parentheses and providing them just like any other rule.\nIn order to execute a command, either the root permissions (rules defined outside of parenthesis) or any of the selectors (rules defined inside parenthesis) must match the given command.\nFor example:</p>\n<pre><code>ACL SETUSER virginia on +GET allkeys (+SET ~app1*)\n</code></pre>\n<p>This sets a user with two sets of permissions, one defined on the user and one defined with a selector.\nThe root user permissions only allow executing the get command, but can be executed on any keys.\nThe selector then grants a secondary set of permissions: access to the <code>SET</code> command to be executed on any key that starts with <code>app1</code>.\nUsing multiple selectors allows you to grant permissions that are different depending on what keys are being accessed.</p>\n<p>When we want to be sure to define a user from scratch, without caring if\nit had previously defined rules associated, we can use the special rule\n<code>reset</code> as first rule, in order to flush all the other existing rules:</p>\n<pre><code>ACL SETUSER antirez reset [... other rules ...]\n</code></pre>\n<p>After resetting a user, its ACL rules revert to the default: inactive, passwordless, can&#39;t execute any command nor access any key or channel:</p>\n<pre><code>127.0.0.1:6379&gt; ACL SETUSER antirez reset\nOK\n127.0.0.1:6379&gt; ACL LIST\n1) &quot;user antirez off -@all&quot;\n</code></pre>\n<p>ACL rules are either words like &quot;on&quot;, &quot;off&quot;, &quot;reset&quot;, &quot;allkeys&quot;, or are\nspecial rules that start with a special character, and are followed by\nanother string (without any space in between), like &quot;+SET&quot;.</p>\n<p>The following documentation is a reference manual about the capabilities of this command, however our <a href=\"../topics/acl\">ACL tutorial</a> may be a more gentle introduction to how the ACL system works in general.</p>\n<h2>ACL rules</h2>\n<p>Valkey ACL rules are split into two categories: rules that define command permissions or <em>command rules</em>, and rules that define the user state or <em>user management rules</em>.\nThis is a list of all the supported Valkey ACL rules:</p>\n<h3>Command rules</h3>\n<ul>\n<li><code>~&lt;pattern&gt;</code>: Adds the specified key pattern (glob style pattern, like in the <code>KEYS</code> command), to the list of key patterns accessible by the user. This grants both read and write permissions to keys that match the pattern. You can add multiple key patterns to the same user. Example: <code>~objects:*</code></li>\n<li><code>%R~&lt;pattern&gt;</code>: Adds the specified read key pattern. This behaves similar to the regular key pattern but only grants permission to read from keys that match the given pattern. See <a href=\"../topics/acl#key-permissions\">key permissions</a> for more information.</li>\n<li><code>%W~&lt;pattern&gt;</code>: Adds the specified write key pattern. This behaves similar to the regular key pattern but only grants permission to write to keys that match the given pattern. See <a href=\"../topics/acl#key-permissions\">key permissions</a> for more information.</li>\n<li><code>%RW~&lt;pattern&gt;</code>: Alias for <code>~&lt;pattern&gt;</code>.</li>\n<li><code>allkeys</code>: Alias for <code>~*</code>, it allows the user to access all the keys.</li>\n<li><code>resetkeys</code>: Removes all the key patterns from the list of key patterns the user can access.</li>\n<li><code>&amp;&lt;pattern&gt;</code>: Adds the specified glob style pattern to the list of Pub/Sub channel patterns accessible by the user. You can add multiple channel patterns to the same user. Example: <code>&amp;chatroom:*</code></li>\n<li><code>allchannels</code>: Alias for <code>&amp;*</code>, it allows the user to access all Pub/Sub channels.</li>\n<li><code>resetchannels</code>: Removes all channel patterns from the list of Pub/Sub channel patterns the user can access.</li>\n<li><code>+&lt;command&gt;</code>: Adds the command to the list of commands the user can call. Can be used with <code>|</code> for allowing subcommands (e.g &quot;+config|get&quot;).</li>\n<li><code>+@&lt;category&gt;</code>: Adds all the commands in the specified category to the list of commands the user is able to execute. Example: <code>+@string</code> (adds all the string commands). For a list of categories, check the <code>ACL CAT</code> command.</li>\n<li><code>+&lt;command&gt;|first-arg</code>: Allows a specific first argument of an otherwise disabled command. It is only supported on commands with no sub-commands, and is not allowed as negative form like -SELECT|1, only additive starting with &quot;+&quot;. This feature is deprecated and may be removed in the future.</li>\n<li><code>allcommands</code>: Alias of <code>+@all</code>. Adds all the commands there are in the server, including <em>future commands</em> loaded via module, to be executed by this user.</li>\n<li><code>-&lt;command&gt;</code>: Remove the command to the list of commands the user can call. It can be used with <code>|</code> for blocking subcommands (e.g., &quot;-config|set&quot;).</li>\n<li><code>-@&lt;category&gt;</code>: Like <code>+@&lt;category&gt;</code> but removes all the commands in the category instead of adding them.</li>\n<li><code>nocommands</code>: Alias for <code>-@all</code>. Removes all the commands, and the user is no longer able to execute anything.</li>\n</ul>\n<h3>User management rules</h3>\n<ul>\n<li><code>on</code>: Set the user as active, it will be possible to authenticate as this user using <code>AUTH &lt;username&gt; &lt;password&gt;</code>.</li>\n<li><code>off</code>: Set user as not active, it will be impossible to log as this user. Please note that if a user gets disabled (set to off) after there are connections already authenticated with such a user, the connections will continue to work as expected. To also kill the old connections you can use <code>CLIENT KILL</code> with the user option. An alternative is to delete the user with <code>ACL DELUSER</code>, that will result in all the connections authenticated as the deleted user to be disconnected.</li>\n<li><code>nopass</code>: The user is set as a <em>no password</em> user. It means that it will be possible to authenticate as such user with any password. By default, the <code>default</code> special user is set as &quot;nopass&quot;. The <code>nopass</code> rule will also reset all the configured passwords for the user.</li>\n<li><code>&gt;password</code>: Adds the specified clear text password as a hashed password in the list of the users passwords. Every user can have many active passwords, so that password rotation will be simpler. The specified password is not stored as clear text inside the server. Example: <code>&gt;mypassword</code>.</li>\n<li><code>#&lt;hashedpassword&gt;</code>: Adds the specified hashed password to the list of user passwords. A hashed password is hashed with SHA256 and translated into a hexadecimal string. Example: <code>#c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2</code>.</li>\n<li><code>&lt;password</code>: Like <code>&gt;password</code> but removes the password instead of adding it.</li>\n<li><code>!&lt;hashedpassword&gt;</code>: Like <code>#&lt;hashedpassword&gt;</code> but removes the password instead of adding it.</li>\n<li><code>(&lt;rule list&gt;)</code>: Creates a new selector to match rules against. Selectors are evaluated after the user permissions, and are evaluated according to the order they are defined. If a command matches either the user permissions or any selector, it is allowed. See <a href=\"../topics/acl#selectors\">selectors</a> for more information.</li>\n<li><code>clearselectors</code>: Deletes all of the selectors attached to the user.</li>\n<li><code>reset</code>: Removes any capability from the user. They are set to off, without passwords, unable to execute any command, unable to access any key.</li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL SETUSER alan allkeys +@string +@set -SADD &gt;alanpassword\nOK\n127.0.0.1:6379&gt; ACL SETUSER antirez heeyyyy\n(error) ERR Error in ACL SETUSER modifier &#39;heeyyyy&#39;: Syntax error\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-users",
    "command": "ACL USERS",
    "description": "Lists all ACL users.",
    "htmlContent": "<p>The command shows a list of all the usernames of the currently configured\nusers in the Valkey ACL system.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL USERS\n1) &quot;anna&quot;\n2) &quot;antirez&quot;\n3) &quot;default&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-acl-whoami",
    "command": "ACL WHOAMI",
    "description": "Returns the authenticated username of the current connection.",
    "htmlContent": "<p>Return the username the current connection is authenticated with.\nNew connections are authenticated with the &quot;default&quot; user. They\ncan change user using <code>AUTH</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ACL WHOAMI\n&quot;default&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-append",
    "command": "APPEND",
    "description": "Appends a string to the value of a key. Creates the key if it doesn't exist.",
    "htmlContent": "<p>If <code>key</code> already exists and is a string, this command appends the <code>value</code> at the\nend of the string.\nIf <code>key</code> does not exist it is created and set as an empty string, so <code>APPEND</code>\nwill be similar to <code>SET</code> in this special case.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; EXISTS mykey\n(integer) 0\n127.0.0.1:6379&gt; APPEND mykey &quot;Hello&quot;\n(integer) 5\n127.0.0.1:6379&gt; APPEND mykey &quot; World&quot;\n(integer) 11\n127.0.0.1:6379&gt; GET mykey\n&quot;Hello World&quot;\n</code></pre>\n<h2>Pattern: Time series</h2>\n<p>The <code>APPEND</code> command can be used to create a very compact representation of a\nlist of fixed-size samples, usually referred as <em>time series</em>.\nEvery time a new sample arrives we can store it using the command</p>\n<pre><code>APPEND timeseries &quot;fixed-size sample&quot;\n</code></pre>\n<p>Accessing individual elements in the time series is not hard:</p>\n<ul>\n<li><code>STRLEN</code> can be used in order to obtain the number of samples.</li>\n<li><code>GETRANGE</code> allows for random access of elements.\nIf our time series have associated time information we can easily implement\na binary search to get range combining <code>GETRANGE</code> with the Lua scripting\nengine.</li>\n<li><code>SETRANGE</code> can be used to overwrite an existing time series.</li>\n</ul>\n<p>The limitation of this pattern is that we are forced into an append-only mode\nof operation, there is no way to cut the time series to a given size easily\nbecause Valkey currently lacks a command able to trim string objects.\nHowever the space efficiency of time series stored in this way is remarkable.</p>\n<p>Hint: it is possible to switch to a different key based on the current Unix\ntime, in this way it is possible to have just a relatively small amount of\nsamples per key, to avoid dealing with very big keys, and to make this pattern\nmore friendly to be distributed across many Valkey instances.</p>\n<p>An example sampling the temperature of a sensor using fixed-size strings (using\na binary format is better in real implementations).</p>\n<pre><code>127.0.0.1:6379&gt; APPEND ts &quot;0043&quot;\n(integer) 4\n127.0.0.1:6379&gt; APPEND ts &quot;0035&quot;\n(integer) 8\n127.0.0.1:6379&gt; GETRANGE ts 0 3\n&quot;0043&quot;\n127.0.0.1:6379&gt; GETRANGE ts 4 7\n&quot;0035&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-asking",
    "command": "ASKING",
    "description": "Signals that a cluster client is following an -ASK redirect.",
    "htmlContent": "<p>When a cluster client receives an <code>-ASK</code> redirect, the <code>ASKING</code> command is sent to the target node followed by the command which was redirected.\nThis is normally done automatically by cluster clients.</p>\n<p>If an <code>-ASK</code> redirect is received during a transaction, only one ASKING command needs to be sent to the target node before sending the complete transaction to the target node.</p>\n<p>See <a href=\"../topics/cluster-spec#ask-redirection\">ASK redirection in the Valkey Cluster Specification</a> for details.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-auth",
    "command": "AUTH",
    "description": "Authenticates the connection.",
    "htmlContent": "<p>The AUTH command authenticates the current connection using the <a href=\"../topics/acl\">Valkey ACL system</a>.</p>\n<p>The standard way to <code>AUTH</code> is the two-argument form:</p>\n<pre><code>AUTH &lt;username&gt; &lt;password&gt;\n</code></pre>\n<p>This authenticates the current connection with one of the users\ndefined in the ACL list (see <code>ACL SETUSER</code> and the official <a href=\"../topics/acl\">ACL guide</a> for more information).</p>\n<p>When the single argument form of the command is used, where only the password is specified,\nit is assumed that the implicit username is &quot;default&quot;.</p>\n<pre><code>AUTH &lt;password&gt;\n</code></pre>\n<p>This form authenticates against the &quot;default&quot; user&#39;s password set with <code>requirepass</code>.</p>\n<p>If the password provided via AUTH matches the password in the configuration file, the server replies with the <code>OK</code> status code and starts accepting commands.\nOtherwise, an error is returned and the clients needs to try a new password.</p>\n<h2>Security notice</h2>\n<p>Because of the high performance nature of Valkey, it is possible to try\na lot of passwords in parallel in very short time, so make sure to generate a\nstrong and very long password so that this attack is infeasible.\nA good way to generate strong passwords is via the <code>ACL GENPASS</code> command.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-bgrewriteaof",
    "command": "BGREWRITEAOF",
    "description": "Asynchronously rewrites the append-only file to disk.",
    "htmlContent": "<p>Instruct Valkey to start an <a href=\"../topics/persistence#append-only-file\">Append Only File</a> rewrite process.\nThe rewrite will create a small optimized version of the current Append Only\nFile.</p>\n<p>If <code>BGREWRITEAOF</code> fails, no data gets lost as the old AOF will be untouched.</p>\n<p>The rewrite will be only triggered by Valkey if there is not already a background\nprocess doing persistence.</p>\n<p>Specifically:</p>\n<ul>\n<li>If a Valkey child is creating a snapshot on disk, the AOF rewrite is <em>scheduled</em> but not started until the saving child producing the RDB file terminates. In this case the <code>BGREWRITEAOF</code> will still return a positive status reply, but with an appropriate message.  You can check if an AOF rewrite is scheduled looking at the <code>INFO</code> command.</li>\n<li>If an AOF rewrite is already in progress the command returns an error and no\nAOF rewrite will be scheduled for a later time.</li>\n<li>If the AOF rewrite could start, but the attempt at starting it fails (for instance because of an error in creating the child process), an error is returned to the caller.</li>\n</ul>\n<p>The AOF rewrite is automatically triggered by Valkey, however the\n<code>BGREWRITEAOF</code> command can be used to trigger a rewrite at any time.</p>\n<p>Please refer to the <a href=\"../topics/persistence\">persistence documentation</a> for detailed information.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-bgsave",
    "command": "BGSAVE",
    "description": "Asynchronously saves the database(s) to disk.",
    "htmlContent": "<p>Save the DB in background.</p>\n<p>Normally the OK code is immediately returned.\nValkey forks, the parent continues to serve the clients, the child saves the DB\non disk then exits.</p>\n<p>An error is returned if there is already a background save running or if there\nis another non-background-save process running, specifically an in-progress AOF\nrewrite.</p>\n<p>If <code>BGSAVE SCHEDULE</code> is used, the command will immediately return <code>OK</code> when an\nAOF rewrite is in progress and schedule the background save to run at the next\nopportunity.</p>\n<p>If <code>BGSAVE CANCEL</code> is used, it will immediately terminate any in-progress RDB save or replication full sync process.\nIn case a background save is scheduled to run (e.g. using <code>BGSAVE SCHEDULE</code> command) the scheduled execution will be \ncancelled as well.</p>\n<p>A client may be able to check if the operation succeeded using the <code>LASTSAVE</code>\ncommand.</p>\n<p>Please refer to the <a href=\"../topics/persistence\">persistence documentation</a> for detailed information.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-bitcount",
    "command": "BITCOUNT",
    "description": "Counts the number of set bits (population counting) in a string.",
    "htmlContent": "<p>Count the number of set bits (population counting) in a string.</p>\n<p>By default all the bytes contained in the string are examined.\nIt is possible to specify the counting operation only in an interval passing the\nadditional arguments <em>start</em> and <em>end</em>.</p>\n<p>Like for the <code>GETRANGE</code> command start and end can contain negative values in\norder to index bytes starting from the end of the string, where -1 is the last\nbyte, -2 is the penultimate, and so forth.</p>\n<p>Non-existent keys are treated as empty strings, so the command will return zero.</p>\n<p>By default, the additional arguments <em>start</em> and <em>end</em> specify a byte index.\nWe can use an additional argument <code>BIT</code> to specify a bit index.\nSo 0 is the first bit, 1 is the second bit, and so forth.\nFor negative values, -1 is the last bit, -2 is the penultimate, and so forth.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;foobar&quot;\nOK\n127.0.0.1:6379&gt; BITCOUNT mykey\n(integer) 26\n127.0.0.1:6379&gt; BITCOUNT mykey 0 0\n(integer) 4\n127.0.0.1:6379&gt; BITCOUNT mykey 1 1\n(integer) 6\n127.0.0.1:6379&gt; BITCOUNT mykey 1 1 BYTE\n(integer) 6\n127.0.0.1:6379&gt; BITCOUNT mykey 5 30 BIT\n(integer) 17\n</code></pre>\n<h2>Pattern: real-time metrics using bitmaps</h2>\n<p>Bitmaps are a very space-efficient representation of certain kinds of\ninformation.\nOne example is a Web application that needs the history of user visits, so that\nfor instance it is possible to determine what users are good targets of beta\nfeatures.</p>\n<p>Using the <code>SETBIT</code> command this is trivial to accomplish, identifying every day\nwith a small progressive integer.\nFor instance day 0 is the first day the application was put online, day 1 the\nnext day, and so forth.</p>\n<p>Every time a user performs a page view, the application can register that in\nthe current day the user visited the web site using the <code>SETBIT</code> command setting\nthe bit corresponding to the current day.</p>\n<p>Later it will be trivial to know the number of single days the user visited the\nweb site simply calling the <code>BITCOUNT</code> command against the bitmap.</p>\n<p>A similar pattern where user IDs are used instead of days is described\nin the article called &quot;<a href=\"http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps\">Fast easy realtime metrics using Redis bitmaps</a>&quot;.</p>\n<h2>Performance considerations</h2>\n<p>In the above example of counting days, even after 10 years the application is\nonline we still have just <code>365*10</code> bits of data per user, that is just 456 bytes\nper user.\nWith this amount of data <code>BITCOUNT</code> is still as fast as any other O(1) Valkey\ncommand like <code>GET</code> or <code>INCR</code>.</p>\n<p>When the bitmap is big, there are two alternatives:</p>\n<ul>\n<li>Taking a separated key that is incremented every time the bitmap is modified.\nThis can be very efficient and atomic using a small Lua script.</li>\n<li>Running the bitmap incrementally using the <code>BITCOUNT</code> <em>start</em> and <em>end</em>\noptional parameters, accumulating the results client-side, and optionally\ncaching the result into a key.</li>\n</ul>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-bitfield",
    "command": "BITFIELD",
    "description": "Performs arbitrary bitfield integer operations on strings.",
    "htmlContent": "<p>The command treats a string as an array of bits, and is capable of addressing specific integer fields of varying bit widths and arbitrary non (necessary) aligned offset. In practical terms using this command you can set, for example, a signed 5 bits integer at bit offset 1234 to a specific value, retrieve a 31 bit unsigned integer from offset 4567. Similarly the command handles increments and decrements of the specified integers, providing guaranteed and well specified overflow and underflow behavior that the user can configure.</p>\n<p><code>BITFIELD</code> is able to operate with multiple bit fields in the same command call. It takes a list of operations to perform, and returns an array of replies, where each array matches the corresponding operation in the list of arguments.</p>\n<p>For example the following command increments a 5 bit signed integer at bit offset 100, and gets the value of the 4 bit unsigned integer at bit offset 0:</p>\n<pre><code>&gt; BITFIELD mykey INCRBY i5 100 1 GET u4 0\n1) (integer) 1\n2) (integer) 0\n</code></pre>\n<p>Note that:</p>\n<ol>\n<li>Addressing with <code>!GET</code> bits outside the current string length (including the case the key does not exist at all), results in the operation to be performed like the missing part all consists of bits set to 0.</li>\n<li>Addressing with <code>!SET</code> or <code>!INCRBY</code> bits outside the current string length will enlarge the string, zero-padding it, as needed, for the minimal length needed, according to the most far bit touched.</li>\n</ol>\n<h2>Supported subcommands and integer encoding</h2>\n<p>The following is the list of supported commands.</p>\n<ul>\n<li><strong>GET</strong> <code>&lt;encoding&gt;</code> <code>&lt;offset&gt;</code> -- Returns the specified bit field.</li>\n<li><strong>SET</strong> <code>&lt;encoding&gt;</code> <code>&lt;offset&gt;</code> <code>&lt;value&gt;</code> -- Set the specified bit field and returns its old value.</li>\n<li><strong>INCRBY</strong> <code>&lt;encoding&gt;</code> <code>&lt;offset&gt;</code> <code>&lt;increment&gt;</code> -- Increments or decrements (if a negative increment is given) the specified bit field and returns the new value.</li>\n</ul>\n<p>There is another subcommand that only changes the behavior of successive\n<code>!INCRBY</code> and <code>!SET</code> subcommands calls by setting the overflow behavior:</p>\n<ul>\n<li><strong>OVERFLOW</strong> <code>[WRAP|SAT|FAIL]</code></li>\n</ul>\n<p>Where an integer encoding is expected, it can be composed by prefixing with <code>i</code> for signed integers and <code>u</code> for unsigned integers with the number of bits of our integer encoding. So for example <code>u8</code> is an unsigned integer of 8 bits and <code>i16</code> is a\nsigned integer of 16 bits.</p>\n<p>The supported encodings are up to 64 bits for signed integers, and up to 63 bits for\nunsigned integers. This limitation with unsigned integers is due to the fact\nthat currently the Valkey protocol is unable to return 64 bit unsigned integers\nas replies.</p>\n<h2>Bits and positional offsets</h2>\n<p>There are two ways in order to specify offsets in the bitfield command.\nIf a number without any prefix is specified, it is used just as a zero based\nbit offset inside the string.</p>\n<p>However if the offset is prefixed with a <code>#</code> character, the specified offset\nis multiplied by the integer encoding&#39;s width, so for example:</p>\n<pre><code>BITFIELD mystring SET i8 #0 100 SET i8 #1 200\n</code></pre>\n<p>Will set the first i8 integer at offset 0 and the second at offset 8.\nThis way you don&#39;t have to do the math yourself inside your client if what\nyou want is a plain array of integers of a given size.</p>\n<h2>Overflow control</h2>\n<p>Using the <code>OVERFLOW</code> command the user is able to fine-tune the behavior of\nthe increment or decrement overflow (or underflow) by specifying one of\nthe following behaviors:</p>\n<ul>\n<li><strong>WRAP</strong>: wrap around, both with signed and unsigned integers. In the case of unsigned integers, wrapping is like performing the operation modulo the maximum value the integer can contain (the C standard behavior). With signed integers instead wrapping means that overflows restart towards the most negative value and underflows towards the most positive ones, so for example if an <code>i8</code> integer is set to the value 127, incrementing it by 1 will yield <code>-128</code>.</li>\n<li><strong>SAT</strong>: uses saturation arithmetic, that is, on underflows the value is set to the minimum integer value, and on overflows to the maximum integer value. For example incrementing an <code>i8</code> integer starting from value 120 with an increment of 10, will result into the value 127, and further increments will always keep the value at 127. The same happens on underflows, but towards the value is blocked at the most negative value.</li>\n<li><strong>FAIL</strong>: in this mode no operation is performed on overflows or underflows detected. The corresponding return value is set to NULL to signal the condition to the caller.</li>\n</ul>\n<p>Note that each <code>OVERFLOW</code> statement only affects the <code>!INCRBY</code> and <code>!SET</code>\ncommands that follow it in the list of subcommands, up to the next <code>OVERFLOW</code>\nstatement.</p>\n<p>By default, <strong>WRAP</strong> is used if not otherwise specified.</p>\n<pre><code>&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 1\n2) (integer) 1\n&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 2\n2) (integer) 2\n&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 3\n2) (integer) 3\n&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 0\n2) (integer) 3\n</code></pre>\n<p>The following is an example of <code>OVERFLOW FAIL</code> returning NULL.</p>\n<pre><code>&gt; BITFIELD mykey OVERFLOW FAIL incrby u2 102 1\n1) (nil)\n</code></pre>\n<h2>Motivations</h2>\n<p>The motivation for this command is that the ability to store many small integers\nas a single large bitmap (or segmented over a few keys to avoid having huge keys) is extremely memory efficient, and opens new use cases for Valkey to be applied, especially in the field of real time analytics. This use cases are supported by the ability to specify the overflow in a controlled way.</p>\n<p>Fun fact: Reddit&#39;s 2017 April fools&#39; project <a href=\"https://reddit.com/r/place\">r/place</a> was <a href=\"https://redditblog.com/2017/04/13/how-we-built-rplace/\">built using the BITFIELD command</a> in order to take an in-memory representation of the collaborative canvas.</p>\n<h2>Performance considerations</h2>\n<p>Usually <code>BITFIELD</code> is a fast command, however note that addressing far bits of currently short strings will trigger an allocation that may be more costly than executing the command on bits already existing.</p>\n<h2>Orders of bits</h2>\n<p>The representation used by <code>BITFIELD</code> considers the bitmap as having the\nbit number 0 to be the most significant bit of the first byte, and so forth, so\nfor example setting a 5 bits unsigned integer to value 23 at offset 7 into a\nbitmap previously set to all zeroes, will produce the following representation:</p>\n<pre><code>+--------+--------+\n|00000001|01110000|\n+--------+--------+\n</code></pre>\n<p>When offsets and integer sizes are aligned to bytes boundaries, this is the\nsame as big endian, however when such alignment does not exist, its important\nto also understand how the bits inside a byte are ordered.</p>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-bitfield_ro",
    "command": "BITFIELD_RO",
    "description": "Performs arbitrary read-only bitfield integer operations on strings.",
    "htmlContent": "<p>Read-only variant of the <code>BITFIELD</code> command.\nIt is like the original <code>BITFIELD</code> but only accepts <code>!GET</code> subcommand and can safely be used in read-only replicas.</p>\n<p>Since the original <code>BITFIELD</code> has <code>!SET</code> and <code>!INCRBY</code> options it is technically flagged as a writing command in the Valkey command table.\nFor this reason read-only replicas in a Valkey Cluster will redirect it to the master instance even if the connection is in read-only mode (see the <code>READONLY</code> command of Valkey Cluster).</p>\n<p>See original <code>BITFIELD</code> for more details.</p>\n<pre><code>BITFIELD_RO hello GET i8 16\n</code></pre>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-bitop",
    "command": "BITOP",
    "description": "Performs bitwise operations on multiple strings, and stores the result.",
    "htmlContent": "<p>Perform a bitwise operation between multiple keys (containing string values) and\nstore the result in the destination key.</p>\n<p>The <code>BITOP</code> command supports four bitwise operations: <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong>\nand <strong>NOT</strong>, thus the valid forms to call the command are:</p>\n<ul>\n<li><code>BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN</code></li>\n<li><code>BITOP OR  destkey srckey1 srckey2 srckey3 ... srckeyN</code></li>\n<li><code>BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN</code></li>\n<li><code>BITOP NOT destkey srckey</code></li>\n</ul>\n<p>As you can see <strong>NOT</strong> is special as it only takes an input key, because it\nperforms inversion of bits so it only makes sense as a unary operator.</p>\n<p>The result of the operation is always stored at <code>destkey</code>.</p>\n<h2>Handling of strings with different lengths</h2>\n<p>When an operation is performed between strings having different lengths, all the\nstrings shorter than the longest string in the set are treated as if they were\nzero-padded up to the length of the longest string.</p>\n<p>The same holds true for non-existent keys, that are considered as a stream of\nzero bytes up to the length of the longest string.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;foobar&quot;\nOK\n127.0.0.1:6379&gt; SET key2 &quot;abcdef&quot;\nOK\n127.0.0.1:6379&gt; BITOP AND dest key1 key2\n(integer) 6\n127.0.0.1:6379&gt; GET dest\n&quot;`bc`ab&quot;\n</code></pre>\n<h2>Pattern: real time metrics using bitmaps</h2>\n<p><code>BITOP</code> is a good complement to the pattern documented in the <code>BITCOUNT</code> command\ndocumentation.\nDifferent bitmaps can be combined in order to obtain a target bitmap where\nthe population counting operation is performed.</p>\n<p>See the article called &quot;<a href=\"http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps\">Fast easy realtime metrics using Valkey\nbitmaps</a>&quot; for an interesting use cases.</p>\n<h2>Performance considerations</h2>\n<p><code>BITOP</code> is a potentially slow command as it runs in O(N) time.\nCare should be taken when running it against long input strings.</p>\n<p>For real-time metrics and statistics involving large inputs a good approach is\nto use a replica (with replica-read-only option enabled) where the bit-wise\noperations are performed to avoid blocking the primary instance.</p>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-bitpos",
    "command": "BITPOS",
    "description": "Finds the first set (1) or clear (0) bit in a string.",
    "htmlContent": "<p>Return the position of the first bit set to 1 or 0 in a string.</p>\n<p>The position is returned, thinking of the string as an array of bits from left to\nright, where the first byte&#39;s most significant bit is at position 0, the second\nbyte&#39;s most significant bit is at position 8, and so forth.</p>\n<p>The same bit position convention is followed by <code>GETBIT</code> and <code>SETBIT</code>.</p>\n<p>By default, all the bytes contained in the string are examined.\nIt is possible to look for bits only in a specified interval passing the additional arguments <em>start</em> and <em>end</em> (it is possible to just pass <em>start</em>, the operation will assume that the end is the last byte of the string. However there are semantic differences as explained later).\nBy default, the range is interpreted as a range of bytes and not a range of bits, so <code>start=0</code> and <code>end=2</code> means to look at the first three bytes.</p>\n<p>You can use the optional <code>BIT</code> modifier to specify that the range should be interpreted as a range of bits.\nSo <code>start=0</code> and <code>end=2</code> means to look at the first three bits.</p>\n<p>Note that bit positions are returned always as absolute values starting from bit zero even when <em>start</em> and <em>end</em> are used to specify a range.</p>\n<p>Like for the <code>GETRANGE</code> command start and end can contain negative values in\norder to index bytes starting from the end of the string, where -1 is the last\nbyte, -2 is the penultimate, and so forth. When <code>BIT</code> is specified, -1 is the last\nbit, -2 is the penultimate, and so forth.</p>\n<p>Non-existent keys are treated as empty strings.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;\\xff\\xf0\\x00&quot;\nOK\n127.0.0.1:6379&gt; BITPOS mykey 0\n(integer) 12\n127.0.0.1:6379&gt; SET mykey &quot;\\x00\\xff\\xf0&quot;\nOK\n127.0.0.1:6379&gt; BITPOS mykey 1 0\n(integer) 8\n127.0.0.1:6379&gt; BITPOS mykey 1 2\n(integer) 16\n127.0.0.1:6379&gt; BITPOS mykey 1 2 -1 BYTE\n(integer) 16\n127.0.0.1:6379&gt; BITPOS mykey 1 7 15 BIT\n(integer) 8\n127.0.0.1:6379&gt; set mykey &quot;\\x00\\x00\\x00&quot;\nOK\n127.0.0.1:6379&gt; BITPOS mykey 1\n(integer) -1\n127.0.0.1:6379&gt; BITPOS mykey 1 7 -3 BIT\n(integer) -1\n</code></pre>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-blmove",
    "command": "BLMOVE",
    "description": "Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.",
    "htmlContent": "<p><code>BLMOVE</code> is the blocking variant of <code>LMOVE</code>.\nWhen <code>source</code> contains elements, this command behaves exactly like <code>LMOVE</code>.\nWhen used inside a <code>MULTI</code>/<code>EXEC</code> block, this command behaves exactly like <code>LMOVE</code>.\nWhen <code>source</code> is empty, Valkey will block the connection until another client\npushes to it or until <code>timeout</code> (a double value specifying the maximum number of seconds to block) is reached.\nA <code>timeout</code> of zero can be used to block indefinitely.</p>\n<p>This command comes in place of the now deprecated <code>BRPOPLPUSH</code>. Doing\n<code>BLMOVE RIGHT LEFT</code> is equivalent.</p>\n<p>See <code>LMOVE</code> for more information.</p>\n<h2>Pattern: Reliable queue</h2>\n<p>Please see the pattern description in the <code>LMOVE</code> documentation.</p>\n<h2>Pattern: Circular list</h2>\n<p>Please see the pattern description in the <code>LMOVE</code> documentation.</p>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-blmpop",
    "command": "BLMPOP",
    "description": "Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
    "htmlContent": "<p><code>BLMPOP</code> is the blocking variant of <code>LMPOP</code>.</p>\n<p>When any of the lists contains elements, this command behaves exactly like <code>LMPOP</code>.\nWhen used inside a <code>MULTI</code>/<code>EXEC</code> block, this command behaves exactly like <code>LMPOP</code>.\nWhen all lists are empty, Valkey will block the connection until another client pushes to it or until the <code>timeout</code> (a double value specifying the maximum number of seconds to block) elapses.\nA <code>timeout</code> of zero can be used to block indefinitely.</p>\n<p>See <code>LMPOP</code> for more information.</p>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-blpop",
    "command": "BLPOP",
    "description": "Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
    "htmlContent": "<p><code>BLPOP</code> is a blocking list pop primitive.\nIt is the blocking version of <code>LPOP</code> because it blocks the connection when there\nare no elements to pop from any of the given lists.\nAn element is popped from the head of the first list that is non-empty, with the\ngiven keys being checked in the order that they are given.</p>\n<h2>Non-blocking behavior</h2>\n<p>When <code>BLPOP</code> is called, if at least one of the specified keys contains a\nnon-empty list, an element is popped from the head of the list and returned to\nthe caller together with the <code>key</code> it was popped from.</p>\n<p>Keys are checked in the order that they are given.\nLet&#39;s say that the key <code>list1</code> doesn&#39;t exist and <code>list2</code> and <code>list3</code> hold\nnon-empty lists.\nConsider the following command:</p>\n<pre><code>BLPOP list1 list2 list3 0\n</code></pre>\n<p><code>BLPOP</code> guarantees to return an element from the list stored at <code>list2</code> (since\nit is the first non empty list when checking <code>list1</code>, <code>list2</code> and <code>list3</code> in\nthat order).</p>\n<h2>Blocking behavior</h2>\n<p>If none of the specified keys exist, <code>BLPOP</code> blocks the connection until another\nclient performs an <code>LPUSH</code> or <code>RPUSH</code> operation against one of the keys.</p>\n<p>Once new data is present on one of the lists, the client returns with the name\nof the key unblocking it and the popped value.</p>\n<p>When <code>BLPOP</code> causes a client to block and a non-zero timeout is specified,\nthe client will unblock returning a <code>nil</code> multi-bulk value when the specified\ntimeout has expired without a push operation against at least one of the\nspecified keys.</p>\n<p><strong>The timeout argument is interpreted as a double value specifying the maximum number of seconds to block</strong>. A timeout of zero can be used to block indefinitely.</p>\n<h2>What key is served first? What client? What element? Priority ordering details.</h2>\n<ul>\n<li>If the client tries to blocks for multiple keys, but at least one key contains elements, the returned key / element pair is the first key from left to right that has one or more elements. In this case the client is not blocked. So for instance <code>BLPOP key1 key2 key3 key4 0</code>, assuming that both <code>key2</code> and <code>key4</code> are non-empty, will always return an element from <code>key2</code>.</li>\n<li>If multiple clients are blocked for the same key, the first client to be served is the one that was waiting for more time (the first that blocked for the key). Once a client is unblocked it does not retain any priority, when it blocks again with the next call to <code>BLPOP</code> it will be served accordingly to the number of clients already blocked for the same key, that will all be served before it (from the first to the last that blocked).</li>\n<li>When a client is blocking for multiple keys at the same time, and elements are available at the same time in multiple keys (because of a transaction or a Lua script added elements to multiple lists), the client will be unblocked using the first key that received a push operation (assuming it has enough elements to serve our client, as there may be other clients as well waiting for this key). Basically after the execution of every command Valkey will run a list of all the keys that received data AND that have at least a client blocked. The list is ordered by new element arrival time, from the first key that received data to the last. For every key processed, Valkey will serve all the clients waiting for that key in a FIFO fashion, as long as there are elements in this key. When the key is empty or there are no longer clients waiting for this key, the next key that received new data in the previous command / transaction / script is processed, and so forth.</li>\n</ul>\n<h2>Behavior of <code>!BLPOP</code> when multiple elements are pushed inside a list.</h2>\n<p>There are times when a list can receive multiple elements in the context of the same conceptual command:</p>\n<ul>\n<li>Variadic push operations such as <code>LPUSH mylist a b c</code>.</li>\n<li>After an <code>EXEC</code> of a <code>MULTI</code> block with multiple push operations against the same list.</li>\n<li>Executing a Lua Script.</li>\n</ul>\n<p>What happens is that the command performing multiple pushes is executed, and <em>only after</em> the execution of the command the blocked clients are served. Consider this sequence of commands.</p>\n<pre><code>Client A:   BLPOP foo 0\nClient B:   LPUSH foo a b c\n</code></pre>\n<p>If the above condition happens using a Redis OSS 2.6 server or greater, Client <strong>A</strong> will be served with the <code>c</code> element, because after the <code>LPUSH</code> command the list contains <code>c,b,a</code>, so taking an element from the left means to return <code>c</code>.</p>\n<p>Note that for the same reason a Lua script or a <code>MULTI/EXEC</code> block may push elements into a list and afterward <strong>delete the list</strong>. In this case the blocked clients will not be served at all and will continue to be blocked as long as no data is present on the list after the execution of a single command, transaction, or script.</p>\n<h2><code>!BLPOP</code> inside a <code>!MULTI</code> / <code>!EXEC</code> transaction</h2>\n<p><code>BLPOP</code> can be used with pipelining (sending multiple commands and\nreading the replies in batch), however this setup makes sense almost solely\nwhen it is the last command of the pipeline.</p>\n<p>Using <code>BLPOP</code> inside a <code>MULTI</code> / <code>EXEC</code> block does not make a lot of sense\nas it would require blocking the entire server in order to execute the block\natomically, which in turn does not allow other clients to perform a push\noperation. For this reason the behavior of <code>BLPOP</code> inside <code>MULTI</code> / <code>EXEC</code> when the list is empty is to return a <code>nil</code> multi-bulk reply, which is the same\nthing that happens when the timeout is reached.</p>\n<p>If you like science fiction, think of time flowing at infinite speed inside a\n<code>MULTI</code> / <code>EXEC</code> block...</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; DEL list1 list2\n(integer) 0\n127.0.0.1:6379&gt; RPUSH list1 a b c\n(integer) 3\n127.0.0.1:6379&gt; BLPOP list1 list2 0\n1) &quot;list1&quot;\n2) &quot;a&quot;\n</code></pre>\n<h2>Reliable queues</h2>\n<p>When <code>BLPOP</code> returns an element to the client, it also removes the element from the list. This means that the element only exists in the context of the client: if the client crashes while processing the returned element, it is lost forever.</p>\n<p>This can be a problem with some application where we want a more reliable messaging system. When this is the case, please check the <code>BRPOPLPUSH</code> command, that is a variant of <code>BLPOP</code> that adds the returned element to a target list before returning it to the client.</p>\n<h2>Pattern: Event notification</h2>\n<p>Using blocking list operations it is possible to mount different blocking\nprimitives.\nFor instance for some application you may need to block waiting for elements\ninto a Set, so that as far as a new element is added to the Set, it is\npossible to retrieve it without resort to polling.\nThis would require a blocking version of <code>SPOP</code> that is not available, but using\nblocking list operations we can easily accomplish this task.</p>\n<p>The consumer will do:</p>\n<pre><code>LOOP forever\n    WHILE SPOP(key) returns elements\n        ... process elements ...\n    END\n    BRPOP helper_key\nEND\n</code></pre>\n<p>While in the producer side we&#39;ll use simply:</p>\n<pre><code>MULTI\nSADD key element\nLPUSH helper_key x\nEXEC\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-brpop",
    "command": "BRPOP",
    "description": "Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
    "htmlContent": "<p><code>BRPOP</code> is a blocking list pop primitive.\nIt is the blocking version of <code>RPOP</code> because it blocks the connection when there\nare no elements to pop from any of the given lists.\nAn element is popped from the tail of the first list that is non-empty, with the\ngiven keys being checked in the order that they are given.</p>\n<p>See the <a href=\"blpop\">BLPOP documentation</a> for the exact semantics, since <code>BRPOP</code> is\nidentical to <code>BLPOP</code> with the only difference being that it pops elements from\nthe tail of a list instead of popping from the head.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; DEL list1 list2\n(integer) 0\n127.0.0.1:6379&gt; RPUSH list1 a b c\n(integer) 3\n127.0.0.1:6379&gt; BRPOP list1 list2 0\n1) &quot;list1&quot;\n2) &quot;c&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-brpoplpush",
    "command": "BRPOPLPUSH",
    "description": "Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.",
    "htmlContent": "<p><code>BRPOPLPUSH</code> is the blocking variant of <code>RPOPLPUSH</code>.\nWhen <code>source</code> contains elements, this command behaves exactly like <code>RPOPLPUSH</code>.\nWhen used inside a <code>MULTI</code>/<code>EXEC</code> block, this command behaves exactly like <code>RPOPLPUSH</code>.\nWhen <code>source</code> is empty, Valkey will block the connection until another client\npushes to it or until <code>timeout</code> is reached.\nA <code>timeout</code> of zero can be used to block indefinitely.</p>\n<p>See <code>RPOPLPUSH</code> for more information.</p>\n<h2>Pattern: Reliable queue</h2>\n<p>Please see the pattern description in the <code>RPOPLPUSH</code> documentation.</p>\n<h2>Pattern: Circular list</h2>\n<p>Please see the pattern description in the <code>RPOPLPUSH</code> documentation.</p>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-bzmpop",
    "command": "BZMPOP",
    "description": "Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.",
    "htmlContent": "<p><code>BZMPOP</code> is the blocking variant of <code>ZMPOP</code>.</p>\n<p>When any of the sorted sets contains elements, this command behaves exactly like <code>ZMPOP</code>.\nWhen used inside a <code>MULTI</code>/<code>EXEC</code> block, this command behaves exactly like <code>ZMPOP</code>.\nWhen all sorted sets are empty, Valkey will block the connection until another client adds members to one of the keys or until the <code>timeout</code> (a double value specifying the maximum number of seconds to block) elapses.\nA <code>timeout</code> of zero can be used to block indefinitely.</p>\n<p>See <code>ZMPOP</code> for more information.</p>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-bzpopmax",
    "command": "BZPOPMAX",
    "description": "Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.",
    "htmlContent": "<p><code>BZPOPMAX</code> is the blocking variant of the sorted set <code>ZPOPMAX</code> primitive.</p>\n<p>It is the blocking version because it blocks the connection when there are no\nmembers to pop from any of the given sorted sets.\nA member with the highest score is popped from first sorted set that is\nnon-empty, with the given keys being checked in the order that they are given.</p>\n<p>The <code>timeout</code> argument is interpreted as a double value specifying the maximum\nnumber of seconds to block. A timeout of zero can be used to block indefinitely.</p>\n<p>See the <a href=\"bzpopmin\">BZPOPMIN documentation</a> for the exact semantics, since <code>BZPOPMAX</code>\nis identical to <code>BZPOPMIN</code> with the only difference being that it pops members\nwith the highest scores instead of popping the ones with the lowest scores.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; DEL zset1 zset2\n(integer) 0\n127.0.0.1:6379&gt; ZADD zset1 0 a 1 b 2 c\n(integer) 3\n127.0.0.1:6379&gt; BZPOPMAX zset1 zset2 0\n1) &quot;zset1&quot;\n2) &quot;c&quot;\n3) &quot;2&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-bzpopmin",
    "command": "BZPOPMIN",
    "description": "Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.",
    "htmlContent": "<p><code>BZPOPMIN</code> is the blocking variant of the sorted set <code>ZPOPMIN</code> primitive.</p>\n<p>It is the blocking version because it blocks the connection when there are no\nmembers to pop from any of the given sorted sets.\nA member with the lowest score is popped from first sorted set that is\nnon-empty, with the given keys being checked in the order that they are given.</p>\n<p>The <code>timeout</code> argument is interpreted as a double value specifying the maximum\nnumber of seconds to block. A timeout of zero can be used to block indefinitely.</p>\n<p>See the <a href=\"blpop\">BLPOP documentation</a> for the exact semantics, since <code>BZPOPMIN</code> is\nidentical to <code>BLPOP</code> with the only difference being the data structure being\npopped from.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; DEL zset1 zset2\n(integer) 0\n127.0.0.1:6379&gt; ZADD zset1 0 a 1 b 2 c\n(integer) 3\n127.0.0.1:6379&gt; BZPOPMIN zset1 zset2 0\n1) &quot;zset1&quot;\n2) &quot;a&quot;\n3) &quot;0&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-client",
    "command": "CLIENT",
    "description": "A container for client connection commands.",
    "htmlContent": "<p>This is a container command for client connection commands.</p>\n<p>To see the list of available commands you can call <code>CLIENT HELP</code>.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-caching",
    "command": "CLIENT CACHING",
    "description": "Instructs the server whether to track the keys in the next request.",
    "htmlContent": "<p>This command controls the tracking of the keys in the next command executed\nby the connection, when tracking is enabled in <code>OPTIN</code> or <code>OPTOUT</code> mode.\nPlease check the\n<a href=\"../topics/client-side-caching\">client side caching documentation</a> for\nbackground information.</p>\n<p>When tracking is enabled Valkey, using the <code>CLIENT TRACKING</code> command, it is\npossible to specify the <code>OPTIN</code> or <code>OPTOUT</code> options, so that keys\nin read only commands are not automatically remembered by the server to\nbe invalidated later. When we are in <code>OPTIN</code> mode, we can enable the\ntracking of the keys in the next command by calling <code>CLIENT CACHING yes</code>\nimmediately before it. Similarly when we are in <code>OPTOUT</code> mode, and keys\nare normally tracked, we can avoid the keys in the next command to be\ntracked using <code>CLIENT CACHING no</code>.</p>\n<p>Basically the command sets a state in the connection, that is valid only\nfor the next command execution, that will modify the behavior of client\ntracking.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-getname",
    "command": "CLIENT GETNAME",
    "description": "Returns the name of the connection.",
    "htmlContent": "<p>The <code>CLIENT GETNAME</code> returns the name of the current connection as set by <code>CLIENT SETNAME</code>. Since every new connection starts without an associated name, if no name was assigned a null bulk reply is returned.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-getredir",
    "command": "CLIENT GETREDIR",
    "description": "Returns the client ID to which the connection's tracking notifications are redirected.",
    "htmlContent": "<p>This command returns the client ID we are redirecting our\n<a href=\"../topics/client-side-caching\">tracking</a> notifications to. We set a client\nto redirect to when using <code>CLIENT TRACKING</code> to enable tracking. However in\norder to avoid forcing client libraries implementations to remember the\nID notifications are redirected to, this command exists in order to improve\nintrospection and allow clients to check later if redirection is active\nand towards which client ID.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-help",
    "command": "CLIENT HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>CLIENT HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-id",
    "command": "CLIENT ID",
    "description": "Returns the unique client ID of the connection.",
    "htmlContent": "<p>The command just returns the ID of the current connection. Every connection\nID has certain guarantees:</p>\n<ol>\n<li>It is never repeated, so if <code>CLIENT ID</code> returns the same number, the caller can be sure that the underlying client did not disconnect and reconnect the connection, but it is still the same connection.</li>\n<li>The ID is monotonically incremental. If the ID of a connection is greater than the ID of another connection, it is guaranteed that the second connection was established with the server at a later time.</li>\n</ol>\n<p>This command is especially useful together with <code>CLIENT UNBLOCK</code>.\nCheck the <code>CLIENT UNBLOCK</code> command page for a pattern involving the two commands.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; CLIENT ID\n(integer) 2873\n</code></pre>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-info",
    "command": "CLIENT INFO",
    "description": "Returns information about the connection.",
    "htmlContent": "<p>The command returns information and statistics about the current client connection in a mostly human readable format.</p>\n<p>The reply format is identical to that of <code>CLIENT LIST</code>, and the content consists only of information about the current client.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; CLIENT INFO\nid=2875 addr=127.0.0.1:38610 laddr=127.0.0.1:6379 fd=10 name= age=0 idle=0 flags=N capa= db=0 sub=0 psub=0 ssub=0 multi=-1 watch=0 qbuf=26 qbuf-free=20448 argv-mem=10 multi-mem=0 rbs=16384 rbp=16384 obl=0 oll=0 omem=0 tot-mem=37786 events=r cmd=client|info user=default redir=-1 resp=2 lib-name= lib-ver=\n</code></pre>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-kill",
    "command": "CLIENT KILL",
    "description": "Terminates open connections.",
    "htmlContent": "<p>The <code>CLIENT KILL</code> command closes a given client connection. This command support two formats, the old format:</p>\n<pre><code>CLIENT KILL addr:port\n</code></pre>\n<p>The <code>ip:port</code> should match a line returned by the <code>CLIENT LIST</code> command (<code>addr</code> field).</p>\n<p>The new format:</p>\n<pre><code>CLIENT KILL &lt;filter&gt; &lt;value&gt; ... ... &lt;filter&gt; &lt;value&gt;\n</code></pre>\n<p>With the new form it is possible to kill clients by different attributes\ninstead of killing just by address. The following filters are available:</p>\n<ul>\n<li><code>CLIENT KILL ADDR ip:port</code>. This is exactly the same as the old three-arguments behavior.</li>\n<li><code>CLIENT KILL LADDR ip:port</code>. Kill all clients connected to specified local (bind) address.</li>\n<li><code>CLIENT KILL ID client-id [client-id ...]</code>. Allows to kill a client by its unique <code>ID</code> field. Client <code>ID</code>&#39;s can be retrieved using the <code>CLIENT LIST</code> command. The filter supports one or more <code>client-id</code> arguments.</li>\n<li><code>CLIENT KILL TYPE type</code>, where <em>type</em> is one of <code>normal</code>, <code>master</code>, <code>replica</code> and <code>pubsub</code>. This closes the connections of <strong>all the clients</strong> in the specified class. Note that clients blocked into the <code>MONITOR</code> command are considered to belong to the <code>normal</code> class.</li>\n<li><code>CLIENT KILL USER username</code>. Closes all the connections that are authenticated with the specified <a href=\"../topics/acl\">ACL</a> username, however it returns an error if the username does not map to an existing ACL user.</li>\n<li><code>CLIENT KILL SKIPME yes/no</code>. By default this option is set to <code>yes</code>, that is, the client calling the command will not get killed, however setting this option to <code>no</code> will have the effect of also killing the client calling the command.</li>\n<li><code>CLIENT KILL MAXAGE maxage</code>. Closes all the connections that are older than the specified age, in seconds.</li>\n</ul>\n<p>It is possible to provide multiple filters at the same time. The command will handle multiple filters via logical AND. For example:</p>\n<pre><code>CLIENT KILL addr 127.0.0.1:12345 type pubsub\n</code></pre>\n<p>is valid and will kill only a pubsub client with the specified address. This format containing multiple filters is rarely useful currently.</p>\n<p>When the new form is used the command no longer returns <code>OK</code> or an error, but instead the number of killed clients, that may be zero.</p>\n<h2>CLIENT KILL and Valkey Sentinel</h2>\n<p>Valkey Sentinel uses CLIENT KILL to terminate client connections when an instance is reconfigured.\nThis mechanism ensures that clients re-establish a connection with a Sentinel, refreshing their configurations.</p>\n<h2>Notes</h2>\n<p>Due to the single-threaded nature of Valkey, it is not possible to\nkill a client connection while it is executing a command. From\nthe client point of view, the connection can never be closed\nin the middle of the execution of a command. However, the client\nwill notice the connection has been closed only when the\nnext command is sent (and results in network error).</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-list",
    "command": "CLIENT LIST",
    "description": "Lists open connections.",
    "htmlContent": "<p>The <code>CLIENT LIST</code> command returns information and statistics about the client\nconnections server in a mostly human readable format.</p>\n<p>You can use one or more optional arguments to filter the list:</p>\n<ul>\n<li><p><strong><code>TYPE type</code></strong>: Filters the list by clients&#39; type, where <em>type</em> is one of <code>normal</code>, <code>master</code>, <code>replica</code>, and <code>pubsub</code>.</p>\n<blockquote>\n<p>Note: Clients blocked by the <code>MONITOR</code> command belong to the <code>normal</code> class.</p>\n</blockquote>\n</li>\n<li><p><strong><code>ID client-id [client-id ...]</code></strong>: Returns entries for clients with IDs matching one or more <code>client-id</code> arguments.</p>\n</li>\n<li><p><strong><code>USER user</code></strong>: Filters the list to include only clients authenticated as the specified user.</p>\n</li>\n<li><p><strong><code>ADDR ip:port</code></strong>: Filters the list to include only clients connected from the specified address and port.</p>\n</li>\n<li><p><strong><code>LADDR ip:port</code></strong>: Filters the list to include only clients connected to the specified local address and port.</p>\n</li>\n<li><p><strong><code>SKIPME yes|no</code></strong>: Filters whether the list should skip the client making the request.</p>\n<ul>\n<li><code>yes</code>: Skips the client making the request.</li>\n<li><code>no</code>: Includes the client making the request.</li>\n</ul>\n</li>\n<li><p><strong><code>MAXAGE milliseconds</code></strong>: Filters the list to include only clients whose connection age (time since the client was created) is greater than or equal to the specified number of milliseconds.</p>\n<blockquote>\n<p>Note: This is actually a minimum age, not a maximum age. This filter was first added to CLIENT KILL, where the intention was to keep clients of a maximum age and kill the ones newer than the max age.</p>\n</blockquote>\n</li>\n</ul>\n<p>Filters can be combined to perform more precise searches. The command will handle multiple filters via logical AND.</p>\n<p>Here is the meaning of the fields:</p>\n<ul>\n<li><code>id</code>: a unique 64-bit client ID</li>\n<li><code>addr</code>: address/port of the client</li>\n<li><code>laddr</code>: address/port of local address client connected to (bind address)</li>\n<li><code>fd</code>: file descriptor corresponding to the socket</li>\n<li><code>name</code>: the name set by the client with <code>CLIENT SETNAME</code></li>\n<li><code>age</code>: total duration of the connection in seconds</li>\n<li><code>idle</code>: idle time of the connection in seconds</li>\n<li><code>flags</code>: client flags (see below)</li>\n<li><code>capa</code>: client capabilities (see below). Added in Valkey 8.1</li>\n<li><code>db</code>: current database ID</li>\n<li><code>sub</code>: number of channel subscriptions</li>\n<li><code>psub</code>: number of pattern matching subscriptions</li>\n<li><code>ssub</code>: number of shard channel subscriptions.</li>\n<li><code>multi</code>: number of commands in a MULTI/EXEC context</li>\n<li><code>watch</code>: number of keys this client is currently watching. Added in Valkey 8.0</li>\n<li><code>qbuf</code>: query buffer length (0 means no query pending)</li>\n<li><code>qbuf-free</code>: free space of the query buffer (0 means the buffer is full)</li>\n<li><code>argv-mem</code>: incomplete arguments for the next command (already extracted from query buffer)</li>\n<li><code>multi-mem</code>: memory is used up by buffered multi commands.</li>\n<li><code>obl</code>: output buffer length</li>\n<li><code>oll</code>: output list length (replies are queued in this list when the buffer is full)</li>\n<li><code>omem</code>: output buffer memory usage</li>\n<li><code>tot-mem</code>: total memory consumed by this client in its various buffers</li>\n<li><code>events</code>: file descriptor events (see below)</li>\n<li><code>cmd</code>: last command played</li>\n<li><code>user</code>: the authenticated username of the client</li>\n<li><code>redir</code>: client id of current client tracking redirection</li>\n<li><code>resp</code>: client RESP protocol version.</li>\n<li><code>lib-name</code>: The client library name as set by <code>CLIENT SETINFO</code></li>\n<li><code>lib-version</code>: The client library version as set by <code>CLIENT SETINFO</code></li>\n<li><code>tot-net-in</code>: Total network input bytes read from this client. Added in Valkey 8.0</li>\n<li><code>tot-net-out</code>: Total network output bytes sent to this client. Added in Valkey 8.0</li>\n<li><code>tot-cmds</code>: Total count of commands this client executed. Added in Valkey 8.0</li>\n</ul>\n<p>The client flags can be a combination of:</p>\n<pre><code>A: connection to be closed ASAP\nb: the client is waiting in a blocking operation\nc: connection to be closed after writing entire reply\nd: a watched keys has been modified - EXEC will fail\ne: the client is excluded from the client eviction mechanism\ni: the client is waiting for a VM I/O (deprecated)\nM: the client is a primary\nN: no specific flag set\nO: the client is a client in MONITOR mode\nP: the client is a Pub/Sub subscriber\nr: the client is in readonly mode against a cluster node\nS: the client is a replica node connection to this instance\nu: the client is unblocked\nU: the client is connected via a Unix domain socket\nx: the client is in a MULTI/EXEC context\nt: the client enabled keys tracking in order to perform client side caching\nT: the client will not touch the LRU/LFU of the keys it accesses\nR: the client tracking target client is invalid\nB: the client enabled broadcast tracking mode\nI: the client is an import source\n</code></pre>\n<p>Client&#39;s capabilities can be:</p>\n<pre><code>r: the client can handle redirect messages\n</code></pre>\n<p>The file descriptor events can be:</p>\n<pre><code>r: the client socket is readable (event loop)\nw: the client socket is writable (event loop)\n</code></pre>\n<h2>Examples</h2>\n<pre><code class=\"language-bash\">CLIENT LIST TYPE normal USER admin MAXAGE 5000 ID 1234 5678\n</code></pre>\n<h2>Notes</h2>\n<p>New fields are regularly added for debugging purpose. Some could be removed\nin the future. A version safe Valkey client using this command should parse\nthe output accordingly (i.e. handling gracefully missing fields, skipping\nunknown fields).</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-no-evict",
    "command": "CLIENT NO-EVICT",
    "description": "Sets the client eviction mode of the connection.",
    "htmlContent": "<p>The <code>CLIENT NO-EVICT</code> command sets the <a href=\"../topics/clients#client-eviction\">client eviction</a> mode for the current connection.</p>\n<p>When turned on and client eviction is configured, the current connection will be excluded from the client eviction process even if we&#39;re above the configured client eviction threshold.</p>\n<p>When turned off, the current client will be re-included in the pool of potential clients to be evicted (and evicted if needed).</p>\n<p>See <a href=\"../topics/clients#client-eviction\">client eviction</a> for more details.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-no-touch",
    "command": "CLIENT NO-TOUCH",
    "description": "Controls whether commands sent by the client affect the LRU/LFU of accessed keys.",
    "htmlContent": "<p>The <code>CLIENT NO-TOUCH</code> command controls whether commands sent by the client will alter the LRU/LFU of the keys they access.</p>\n<p>When turned on, the current client will not change LFU/LRU stats, unless it sends the <code>TOUCH</code> command.</p>\n<p>When turned off, the client touches LFU/LRU stats just as a normal client.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-pause",
    "command": "CLIENT PAUSE",
    "description": "Suspends commands processing.",
    "htmlContent": "<p><code>CLIENT PAUSE</code> is a connections control command able to suspend all the Valkey clients for the specified amount of time (in milliseconds).</p>\n<p>The command performs the following actions:</p>\n<ul>\n<li>It stops processing all the pending commands from normal and pub/sub clients for the given mode. However interactions with replicas will continue normally. Note that clients are formally paused when they try to execute a command, so no work is taken on the server side for inactive clients.</li>\n<li>However it returns OK to the caller ASAP, so the <code>CLIENT PAUSE</code> command execution is not paused by itself.</li>\n<li>When the specified amount of time has elapsed, all the clients are unblocked: this will trigger the processing of all the commands accumulated in the query buffer of every client during the pause.</li>\n</ul>\n<p>Client pause currently supports two modes:</p>\n<ul>\n<li><code>ALL</code>: This is the default mode. All client commands are blocked.</li>\n<li><code>WRITE</code>: Clients are only blocked if they attempt to execute a write command.</li>\n</ul>\n<p>For the <code>WRITE</code> mode, some commands have special behavior:</p>\n<ul>\n<li><code>EVAL</code>/<code>EVALSHA</code>: Will block client for all scripts.</li>\n<li><code>PUBLISH</code>: Will block client.</li>\n<li><code>PFCOUNT</code>: Will block client.</li>\n<li><code>WAIT</code>: Acknowledgments will be delayed, so this command will appear blocked.</li>\n</ul>\n<p>This command is useful as it makes able to switch clients from a Valkey instance to another one in a controlled way. For example during an instance upgrade the system administrator could do the following:</p>\n<ul>\n<li>Pause the clients using <code>CLIENT PAUSE</code></li>\n<li>Wait a few seconds to make sure the replicas processed the latest replication stream from the primary.</li>\n<li>Turn one of the replicas into a primary.</li>\n<li>Reconfigure clients to connect with the new primary.</li>\n</ul>\n<p>The recommended mode for client pause is <code>WRITE</code>. This mode will stop all replication traffic, can be\naborted with the <code>CLIENT UNPAUSE</code> command, and allows reconfiguring the old primary without risking accepting writes after the\nfailover. This is also the mode used during cluster failover.</p>\n<p>This command also prevents keys to be evicted or expired during the time clients are paused.\nThis way the dataset is guaranteed to be static not just from the point of view of clients not being able to write,\nbut also from the point of view of internal operations.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-reply",
    "command": "CLIENT REPLY",
    "description": "Instructs the server whether to reply to commands.",
    "htmlContent": "<p>Sometimes it can be useful for clients to completely disable replies from the Valkey server. For example when the client sends fire and forget commands or performs a mass loading of data, or in caching contexts where new data is streamed constantly. In such contexts to use server time and bandwidth in order to send back replies to clients, which are going to be ignored, is considered wasteful.</p>\n<p>The <code>CLIENT REPLY</code> command controls whether the server will reply the client&#39;s commands. The following modes are available:</p>\n<ul>\n<li><code>ON</code>. This is the default mode in which the server returns a reply to every command.</li>\n<li><code>OFF</code>. In this mode the server will not reply to client commands.</li>\n<li><code>SKIP</code>. This mode skips the reply of command immediately after it.</li>\n</ul>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-setinfo",
    "command": "CLIENT SETINFO",
    "description": "Sets information specific to the client or connection.",
    "htmlContent": "<p>The <code>CLIENT SETINFO</code> command assigns various info attributes to the current connection which are displayed in the output of <code>CLIENT LIST</code> and <code>CLIENT INFO</code>.</p>\n<p>Client libraries are expected to pipeline this command after authentication on all connections\nand ignore failures since they could be connected to an older version that doesn&#39;t support them.</p>\n<p>Currently the supported attributes are:</p>\n<ul>\n<li><code>lib-name</code> - meant to hold the name of the client library that&#39;s in use.</li>\n<li><code>lib-ver</code> - meant to hold the client library&#39;s version.</li>\n</ul>\n<p>There is no limit to the length of these attributes. However it is not possible to use spaces, newlines, or other non-printable characters that would violate the format of the <code>CLIENT LIST</code> reply.</p>\n<p>Note that these attributes are <strong>not</strong> cleared by the RESET command.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-setname",
    "command": "CLIENT SETNAME",
    "description": "Sets the connection name.",
    "htmlContent": "<p>The <code>CLIENT SETNAME</code> command assigns a name to the current connection.</p>\n<p>The assigned name is displayed in the output of <code>CLIENT LIST</code> so that it is possible to identify the client that performed a given connection.</p>\n<p>For instance when Valkey is used in order to implement a queue, producers and consumers of messages may want to set the name of the connection according to their role.</p>\n<p>There is no limit to the length of the name that can be assigned if not the usual limits of the String type (512 MB). However it is not possible to use spaces in the connection name as this would violate the format of the <code>CLIENT LIST</code> reply.</p>\n<p>It is possible to entirely remove the connection name setting it to the empty string, that is not a valid connection name since it serves to this specific purpose.</p>\n<p>The connection name can be inspected using <code>CLIENT GETNAME</code>.</p>\n<p>Every new connection starts without an assigned name.</p>\n<p>Tip: setting names to connections is a good way to debug connection leaks due to bugs in the application using Valkey.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-tracking",
    "command": "CLIENT TRACKING",
    "description": "Controls server-assisted client-side caching for the connection.",
    "htmlContent": "<p>This command enables the tracking feature of the Valkey server, that is used\nfor <a href=\"../topics/client-side-caching\">server assisted client side caching</a>.</p>\n<p>When tracking is enabled Valkey remembers the keys that the connection\nrequested, in order to send later invalidation messages when such keys are\nmodified. Invalidation messages are sent in the same connection (only available\nwhen the RESP3 protocol is used) or redirected in a different connection\n(available also with RESP2 and Pub/Sub). A special <em>broadcasting</em> mode is\navailable where clients participating in this protocol receive every\nnotification just subscribing to given key prefixes, regardless of the\nkeys that they requested. Given the complexity of the argument please\nrefer to <a href=\"../topics/client-side-caching\">the main client side caching documentation</a> for the details. This manual page is only a reference for the options of this subcommand.</p>\n<p>In order to enable tracking, use:</p>\n<pre><code>CLIENT TRACKING on ... options ...\n</code></pre>\n<p>The feature will remain active in the current connection for all its life,\nunless tracking is turned off with <code>CLIENT TRACKING off</code> at some point.</p>\n<p>The following are the list of options that modify the behavior of the\ncommand when enabling tracking:</p>\n<ul>\n<li><code>REDIRECT &lt;id&gt;</code>: send invalidation messages to the connection with the specified ID. The connection must exist. You can get the ID of a connection using <code>CLIENT ID</code>. If the connection we are redirecting to is terminated, when in RESP3 mode the connection with tracking enabled will receive <code>tracking-redir-broken</code> push messages in order to signal the condition.</li>\n<li><code>BCAST</code>: enable tracking in broadcasting mode. In this mode invalidation messages are reported for all the prefixes specified, regardless of the keys requested by the connection. Instead when the broadcasting mode is not enabled, Valkey will track which keys are fetched using read-only commands, and will report invalidation messages only for such keys.</li>\n<li><code>PREFIX &lt;prefix&gt;</code>: for broadcasting, register a given key prefix, so that notifications will be provided only for keys starting with this string. This option can be given multiple times to register multiple prefixes. If broadcasting is enabled without this option, Valkey will send notifications for every key. You can&#39;t delete a single prefix, but you can delete all prefixes by disabling and re-enabling tracking. Using this option adds the additional time complexity of O(N^2), where N is the total number of prefixes tracked. </li>\n<li><code>OPTIN</code>: when broadcasting is NOT active, normally don&#39;t track keys in read only commands, unless they are called immediately after a <code>CLIENT CACHING yes</code> command.</li>\n<li><code>OPTOUT</code>: when broadcasting is NOT active, normally track keys in read only commands, unless they are called immediately after a <code>CLIENT CACHING no</code> command.</li>\n<li><code>NOLOOP</code>: don&#39;t send notifications about keys modified by this connection itself.</li>\n</ul>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-trackinginfo",
    "command": "CLIENT TRACKINGINFO",
    "description": "Returns information about server-assisted client-side caching for the connection.",
    "htmlContent": "<p>The command returns information about the current client connection&#39;s use of the <a href=\"../topics/client-side-caching\">server assisted client side caching</a> feature.</p>\n<p>Here&#39;s the list of tracking information sections and their respective values:</p>\n<ul>\n<li><strong>flags</strong>: A list of tracking flags used by the connection. The flags and their meanings are as follows:<ul>\n<li><code>off</code>: The connection isn&#39;t using server assisted client side caching.</li>\n<li><code>on</code>: Server assisted client side caching is enabled for the connection.</li>\n<li><code>bcast</code>: The client uses broadcasting mode.</li>\n<li><code>optin</code>: The client does not cache keys by default.</li>\n<li><code>optout</code>: The client caches keys by default.</li>\n<li><code>caching-yes</code>: The next command will cache keys (exists only together with <code>optin</code>).</li>\n<li><code>caching-no</code>: The next command won&#39;t cache keys (exists only together with <code>optout</code>).</li>\n<li><code>noloop</code>: The client isn&#39;t notified about keys modified by itself.</li>\n<li><code>broken_redirect</code>: The client ID used for redirection isn&#39;t valid anymore.</li>\n</ul>\n</li>\n<li><strong>redirect</strong>: The client ID used for notifications redirection, or -1 when none.</li>\n<li><strong>prefixes</strong>: A list of key prefixes for which notifications are sent to the client.</li>\n</ul>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-unblock",
    "command": "CLIENT UNBLOCK",
    "description": "Unblocks a client blocked by a blocking command from a different connection.",
    "htmlContent": "<p>This command can unblock, from a different connection, a client blocked in a blocking operation, such as for instance <code>BRPOP</code> or <code>XREAD</code> or <code>WAIT</code>.</p>\n<p>By default the client is unblocked as if the timeout of the command was\nreached, however if an additional (and optional) argument is passed, it is possible to specify the unblocking behavior, that can be <strong>TIMEOUT</strong> (the default) or <strong>ERROR</strong>. If <strong>ERROR</strong> is specified, the behavior is to unblock the client returning as error the fact that the client was force-unblocked. Specifically the client will receive the following error:</p>\n<pre><code>-UNBLOCKED client unblocked via CLIENT UNBLOCK\n</code></pre>\n<p>Note: of course as usually it is not guaranteed that the error text remains\nthe same, however the error code will remain <code>-UNBLOCKED</code>.</p>\n<p>This command is useful especially when we are monitoring many keys with\na limited number of connections. For instance we may want to monitor multiple\nstreams with <code>XREAD</code> without using more than N connections. However at some\npoint the consumer process is informed that there is one more stream key\nto monitor. In order to avoid using more connections, the best behavior would\nbe to stop the blocking command from one of the connections in the pool, add\nthe new key, and issue the blocking command again.</p>\n<p>To obtain this behavior the following pattern is used. The process uses\nan additional <em>control connection</em> in order to send the <code>CLIENT UNBLOCK</code> command\nif needed. In the meantime, before running the blocking operation on the other\nconnections, the process runs <code>CLIENT ID</code> in order to get the ID associated\nwith that connection. When a new key should be added, or when a key should\nno longer be monitored, the relevant connection blocking command is aborted\nby sending <code>CLIENT UNBLOCK</code> in the control connection. The blocking command\nwill return and can be finally reissued.</p>\n<p>This example shows the application in the context of streams, however\nthe pattern is a general one and can be applied to other cases.</p>\n<h2>Examples</h2>\n<pre><code>Connection A (blocking connection):\n&gt; CLIENT ID\n2934\n&gt; BRPOP key1 key2 key3 0\n(client is blocked)\n\n... Now we want to add a new key ...\n\nConnection B (control connection):\n&gt; CLIENT UNBLOCK 2934\n1\n\nConnection A (blocking connection):\n... BRPOP reply with timeout ...\nNULL\n&gt; BRPOP key1 key2 key3 key4 0\n(client is blocked again)\n</code></pre>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-client-unpause",
    "command": "CLIENT UNPAUSE",
    "description": "Resumes processing commands from paused clients.",
    "htmlContent": "<p><code>CLIENT UNPAUSE</code> is used to resume command processing for all clients that were paused by <code>CLIENT PAUSE</code>.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-cluster",
    "command": "CLUSTER",
    "description": "A container for Valkey Cluster commands.",
    "htmlContent": "<p>This is a container command for Valkey Cluster commands.</p>\n<p>To see the list of available commands you can call <code>CLUSTER HELP</code>.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-addslots",
    "command": "CLUSTER ADDSLOTS",
    "description": "Assigns new hash slots to a node.",
    "htmlContent": "<p>This command is useful in order to modify a node&#39;s view of the cluster\nconfiguration. Specifically it assigns a set of hash slots to the node\nreceiving the command. If the command is successful, the node will map\nthe specified hash slots to itself, and will start broadcasting the new\nconfiguration.</p>\n<p>However note that:</p>\n<ol>\n<li>The command only works if all the specified slots are, from the point of view of the node receiving the command, currently not assigned. A node will refuse to take ownership for slots that already belong to some other node (including itself).</li>\n<li>The command fails if the same slot is specified multiple times.</li>\n<li>As a side effect of the command execution, if a slot among the ones specified as argument is set as <code>importing</code>, this state gets cleared once the node assigns the (previously unbound) slot to itself.</li>\n</ol>\n<h2>Example</h2>\n<p>For example the following command assigns slots 1 2 3 to the node receiving\nthe command:</p>\n<pre><code>&gt; CLUSTER ADDSLOTS 1 2 3\nOK\n</code></pre>\n<p>However trying to execute it again results into an error since the slots\nare already assigned:</p>\n<pre><code>&gt; CLUSTER ADDSLOTS 1 2 3\nERR Slot 1 is already busy\n</code></pre>\n<h2>Usage in Valkey Cluster</h2>\n<p>This command only works in cluster mode and is useful in the following\nValkey Cluster operations:</p>\n<ol>\n<li>To create a new <code>cluster ADDSLOTS</code> is used in order to initially setup primary nodes splitting the available hash slots among them.</li>\n<li>In order to fix a broken cluster where certain slots are unassigned.</li>\n</ol>\n<h2>Information about slots propagation and warnings</h2>\n<p>Note that once a node assigns a set of slots to itself, it will start\npropagating this information in heartbeat packet headers. However the\nother nodes will accept the information only if they have the slot as\nnot already bound with another node, or if the configuration epoch of the\nnode advertising the new hash slot, is greater than the node currently listed\nin the table.</p>\n<p>This means that this command should be used with care only by applications\norchestrating Valkey Cluster, like <code>valkey-cli</code>, and the command if used\nout of the right context can leave the cluster in a wrong state or cause\ndata loss.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-addslotsrange",
    "command": "CLUSTER ADDSLOTSRANGE",
    "description": "Assigns new hash slot ranges to a node.",
    "htmlContent": "<p>The <code>CLUSTER ADDSLOTSRANGE</code> is similar to the <code>CLUSTER ADDSLOTS</code> command in that they both assign hash slots to nodes.</p>\n<p>The difference between the two commands is that <code>CLUSTER ADDSLOTS</code> takes a list of slots to assign to the node, while <code>CLUSTER ADDSLOTSRANGE</code> takes a list of slot ranges (specified by start and end slots) to assign to the node.</p>\n<h2>Example</h2>\n<p>To assign slots 1 2 3 4 5 to the node, the <code>CLUSTER ADDSLOTS</code> command is:</p>\n<pre><code>&gt; CLUSTER ADDSLOTS 1 2 3 4 5\nOK\n</code></pre>\n<p>The same operation can be completed with the following <code>CLUSTER ADDSLOTSRANGE</code> command:</p>\n<pre><code>&gt; CLUSTER ADDSLOTSRANGE 1 5\nOK\n</code></pre>\n<h2>Usage in Valkey Cluster</h2>\n<p>This command only works in cluster mode and is useful in the following Valkey Cluster operations:</p>\n<ol>\n<li>To create a new cluster, <code>CLUSTER ADDSLOTSRANGE</code> is used to initially set up primary nodes splitting the available hash slots among them.</li>\n<li>In order to fix a broken cluster where certain slots are unassigned.</li>\n</ol>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-bumpepoch",
    "command": "CLUSTER BUMPEPOCH",
    "description": "Advances the cluster config epoch.",
    "htmlContent": "<p>Advances the cluster config epoch.</p>\n<p>The <code>CLUSTER BUMPEPOCH</code> command triggers an increment to the cluster&#39;s config epoch from the connected node. The epoch will be incremented if the node&#39;s config epoch is zero, or if it is less than the cluster&#39;s greatest epoch.</p>\n<p><strong>Note:</strong> config epoch management is performed internally by the cluster, and relies on obtaining a consensus of nodes. The <code>CLUSTER BUMPEPOCH</code> attempts to increment the config epoch <strong>WITHOUT</strong> getting the consensus, so using it may violate the &quot;last failover wins&quot; rule. Use it with caution.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-count-failure-reports",
    "command": "CLUSTER COUNT-FAILURE-REPORTS",
    "description": "Returns the number of active failure reports active for a node.",
    "htmlContent": "<p>The command returns the number of <em>failure reports</em> for the specified node.\nFailure reports are the way Valkey Cluster uses in order to promote a\n<code>PFAIL</code> state, that means a node is not reachable, to a <code>FAIL</code> state,\nthat means that the majority of primaries in the cluster agreed within\na window of time that the node is not reachable.</p>\n<p>A few more details:</p>\n<ul>\n<li>A node flags another node with <code>PFAIL</code> when the node is not reachable for a time greater than the configured <em>node timeout</em>, which is a fundamental configuration parameter of a Valkey Cluster.</li>\n<li>Nodes in <code>PFAIL</code> state are provided in gossip sections of heartbeat packets.</li>\n<li>Every time a node processes gossip packets from other nodes, it creates (and refreshes the TTL if needed) <strong>failure reports</strong>, remembering that a given node said another given node is in <code>PFAIL</code> condition.</li>\n<li>Each failure report has a time to live of two times the <em>node timeout</em> time.</li>\n<li>If at a given time a node has another node flagged with <code>PFAIL</code>, and at the same time collected the majority of other primary nodes <em>failure reports</em> about this node (including itself if it is a primary), then it elevates the failure state of the node from <code>PFAIL</code> to <code>FAIL</code>, and broadcasts a message forcing all the nodes that can be reached to flag the node as <code>FAIL</code>.</li>\n</ul>\n<p>This command returns the number of failure reports for the current node which are currently not expired (so received within two times the <em>node timeout</em> time). The count does not include what the node we are asking this count believes about the node ID we pass as argument, the count <em>only</em> includes the failure reports the node received from other nodes.</p>\n<p>This command is mainly useful for debugging, when the failure detector of\nValkey Cluster is not operating as we believe it should.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-countkeysinslot",
    "command": "CLUSTER COUNTKEYSINSLOT",
    "description": "Returns the number of keys in a hash slot.",
    "htmlContent": "<p>Returns the number of keys in the specified Valkey Cluster hash slot. The\ncommand only queries the local data set, so contacting a node\nthat is not serving the specified hash slot will always result in a count of\nzero being returned.</p>\n<pre><code>&gt; CLUSTER COUNTKEYSINSLOT 7000\n(integer) 50341\n</code></pre>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-delslots",
    "command": "CLUSTER DELSLOTS",
    "description": "Sets hash slots as unbound for a node.",
    "htmlContent": "<p>In Valkey Cluster, each node keeps track of which primary is serving\na particular hash slot.</p>\n<p>The <code>CLUSTER DELSLOTS</code> command asks a particular Valkey Cluster node to\nforget which primary is serving the hash slots specified as arguments.</p>\n<p>In the context of a node that has received a <code>CLUSTER DELSLOTS</code> command and\nhas consequently removed the associations for the passed hash slots,\nwe say those hash slots are <em>unbound</em>. Note that the existence of\nunbound hash slots occurs naturally when a node has not been\nconfigured to handle them (something that can be done with the\n<code>CLUSTER ADDSLOTS</code> command) and if it has not received any information about\nwho owns those hash slots (something that it can learn from heartbeat\nor update messages).</p>\n<p>If a node with unbound hash slots receives a heartbeat packet from\nanother node that claims to be the owner of some of those hash\nslots, the association is established instantly. Moreover, if a\nheartbeat or update message is received with a configuration epoch\ngreater than the node&#39;s own, the association is re-established.</p>\n<p>However, note that:</p>\n<ol>\n<li>The command only works if all the specified slots are already\nassociated with some node.</li>\n<li>The command fails if the same slot is specified multiple times.</li>\n<li>As a side effect of the command execution, the node may go into\n<em>down</em> state because not all hash slots are covered.</li>\n</ol>\n<h2>Example</h2>\n<p>The following command removes the association for slots 5000 and\n5001 from the node receiving the command:</p>\n<pre><code>&gt; CLUSTER DELSLOTS 5000 5001\nOK\n</code></pre>\n<h2>Usage in Valkey Cluster</h2>\n<p>This command only works in cluster mode and may be useful for\ndebugging and in order to manually orchestrate a cluster configuration\nwhen a new cluster is created. It is currently not used by <code>valkey-cli</code>,\nand mainly exists for API completeness.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-delslotsrange",
    "command": "CLUSTER DELSLOTSRANGE",
    "description": "Sets hash slot ranges as unbound for a node.",
    "htmlContent": "<p>The <code>CLUSTER DELSLOTSRANGE</code> command is similar to the <code>CLUSTER DELSLOTS</code> command in that they both remove hash slots from the node.\nThe difference is that <code>CLUSTER DELSLOTS</code> takes a list of hash slots to remove from the node, while <code>CLUSTER DELSLOTSRANGE</code> takes a list of slot ranges (specified by start and end slots) to remove from the node.</p>\n<h2>Example</h2>\n<p>To remove slots 1 2 3 4 5 from the node, the <code>CLUSTER DELSLOTS</code> command is:</p>\n<pre><code>&gt; CLUSTER DELSLOTS 1 2 3 4 5\nOK\n</code></pre>\n<p>The same operation can be completed with the following <code>CLUSTER DELSLOTSRANGE</code> command:</p>\n<pre><code>&gt; CLUSTER DELSLOTSRANGE 1 5\nOK\n</code></pre>\n<p>However, note that:</p>\n<ol>\n<li>The command only works if all the specified slots are already associated with the node.</li>\n<li>The command fails if the same slot is specified multiple times.</li>\n<li>As a side effect of the command execution, the node may go into <em>down</em> state because not all hash slots are covered.</li>\n</ol>\n<h2>Usage in Valkey Cluster</h2>\n<p>This command only works in cluster mode and may be useful for\ndebugging and in order to manually orchestrate a cluster configuration\nwhen a new cluster is created. It is currently not used by <code>valkey-cli</code>,\nand mainly exists for API completeness.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-failover",
    "command": "CLUSTER FAILOVER",
    "description": "Forces a replica to perform a manual failover of its master.",
    "htmlContent": "<p>This command, that can only be sent to a Valkey Cluster replica node, forces\nthe replica to start a manual failover of its primary instance.</p>\n<p>A manual failover is a special kind of failover that is usually executed when\nthere are no actual failures, but we wish to swap the current primary with one\nof its replicas (which is the node we send the command to), in a safe way,\nwithout any window for data loss. It works in the following way:</p>\n<ol>\n<li>The replica tells the primary to stop processing queries from clients.</li>\n<li>The primary replies to the replica with the current <em>replication offset</em>.</li>\n<li>The replica waits for the replication offset to match on its side, to make sure it processed all the data from the primary before it continues.</li>\n<li>The replica starts a failover, obtains a new configuration epoch from the majority of the primaries, and broadcasts the new configuration.</li>\n<li>The old primary receives the configuration update: unblocks its clients and starts replying with redirection messages so that they&#39;ll continue the chat with the new primary.</li>\n</ol>\n<p>This way clients are moved away from the old primary to the new primary\natomically and only when the replica that is turning into the new primary\nhas processed all of the replication stream from the old primary.</p>\n<p>There is a built-in timeout for the primary to resume processing queries if the\nreplica does not catch quickly enough or is unable to secure the votes to take over.\nThe default failover timeout is 5000ms. It is possible to configure the timeout\nvia the <code>cluster-manual-failover-timeout</code> configuration parameter (added in Valkey 8.1)\nand decide how long the primary will pause in the worst case scenario.</p>\n<h2>FORCE option: manual failover when the primary is down</h2>\n<p>The command behavior can be modified by two options: <strong>FORCE</strong> and <strong>TAKEOVER</strong>.</p>\n<p>If the <strong>FORCE</strong> option is given, the replica does not perform any handshake\nwith the primary, that may be not reachable, but instead just starts a\nfailover ASAP starting from point 4. This is useful when we want to start\na manual failover while the primary is no longer reachable.</p>\n<p>However using <strong>FORCE</strong> we still need the majority of primaries to be available\nin order to authorize the failover and generate a new configuration epoch\nfor the replica that is going to become primary.</p>\n<h2>TAKEOVER option: manual failover without cluster consensus</h2>\n<p>There are situations where this is not enough, and we want a replica to failover\nwithout any agreement with the rest of the cluster. A real world use case\nfor this is to mass promote replicas in a different data center to primaries\nin order to perform a data center switch, while all the primaries are down\nor partitioned away.</p>\n<p>The <strong>TAKEOVER</strong> option implies everything <strong>FORCE</strong> implies, but also does\nnot uses any cluster authorization in order to failover. A replica receiving\n<code>CLUSTER FAILOVER TAKEOVER</code> will instead:</p>\n<ol>\n<li>Generate a new <code>configEpoch</code> unilaterally, just taking the current greatest epoch available and incrementing it if its local configuration epoch is not already the greatest.</li>\n<li>Assign itself all the hash slots of its primary, and propagate the new configuration to every node which is reachable ASAP, and eventually to every other node.</li>\n</ol>\n<p>Note that <strong>TAKEOVER violates the last-failover-wins principle</strong> of Valkey Cluster, since the configuration epoch generated by the replica violates the normal generation of configuration epochs in several ways:</p>\n<ol>\n<li>There is no guarantee that it is actually the higher configuration epoch, since, for example, we can use the <strong>TAKEOVER</strong> option within a minority, nor any message exchange is performed to generate the new configuration epoch.</li>\n<li>If we generate a configuration epoch which happens to collide with another instance, eventually our configuration epoch, or the one of another instance with our same epoch, will be moved away using the <em>configuration epoch collision resolution algorithm</em>.</li>\n</ol>\n<p>Because of this the <strong>TAKEOVER</strong> option should be used with care.</p>\n<h2>Implementation details and notes</h2>\n<ul>\n<li><code>CLUSTER FAILOVER</code>, unless the <strong>TAKEOVER</strong> option is specified, does not execute a failover synchronously.\nIt only <em>schedules</em> a manual failover, bypassing the failure detection stage.</li>\n<li>An <code>OK</code> reply is no guarantee that the failover will succeed.</li>\n<li>A replica can only be promoted to a primary if it is known as a replica by a majority of the primaries in the cluster.\nIf the replica is a new node that has just been added to the cluster (for example after upgrading it), it may not yet be known to all the primaries in the cluster.\nTo check that the primaries are aware of a new replica, you can send <code>CLUSTER NODES</code> or <code>CLUSTER REPLICAS</code> to each of the primary nodes and check that it appears as a replica, before sending <code>CLUSTER FAILOVER</code> to the replica.</li>\n<li>To check that the failover has actually happened you can use <code>ROLE</code>, <code>INFO REPLICATION</code> (which indicates &quot;role:master&quot; after successful failover), or <code>CLUSTER NODES</code> to verify that the state of the cluster has changed sometime after the command was sent.</li>\n<li>To check if the failover has failed, check the replica&#39;s log for &quot;Manual failover timed out&quot;, which is logged if the replica has given up after a few seconds.</li>\n</ul>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-flushslots",
    "command": "CLUSTER FLUSHSLOTS",
    "description": "Deletes all slots information from a node.",
    "htmlContent": "<p>Deletes all slots from a node.</p>\n<p>The <code>CLUSTER FLUSHSLOTS</code> deletes all information about slots from the connected node. It can only be called when the database is empty.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-forget",
    "command": "CLUSTER FORGET",
    "description": "Removes a node from the nodes table.",
    "htmlContent": "<p>The command is used in order to remove a node, specified via its node ID,\nfrom the set of <em>known nodes</em> of the Valkey Cluster node receiving the command.\nIn other words the specified node is removed from the <em>nodes table</em> of the\nnode receiving the command.</p>\n<p>Because when a given node is part of the cluster, all the other nodes\nparticipating in the cluster knows about it, in order for a node to be\ncompletely removed from a cluster, the <code>CLUSTER FORGET</code> command must be\nsent to all the remaining nodes, regardless of the fact they are primaries\nor replicas.</p>\n<p>However the command cannot simply drop the node from the internal node\ntable of the node receiving the command, it also implements a ban-list, not\nallowing the same node to be added again as a side effect of processing the\n<em>gossip section</em> of the heartbeat packets received from other nodes.</p>\n<h2>Details on why the ban-list is needed</h2>\n<p>In the following example we&#39;ll show why the command must not just remove\na given node from the nodes table, but also prevent it for being re-inserted\nagain for some time.</p>\n<p>Let&#39;s assume we have four nodes, A, B, C and D. In order to\nend with just a three nodes cluster A, B, C we may follow these steps:</p>\n<ol>\n<li>Reshard all the hash slots from D to nodes A, B, C.</li>\n<li>D is now empty, but still listed in the nodes table of A, B and C.</li>\n<li>We contact A, and send <code>CLUSTER FORGET D</code>.</li>\n<li>B sends node A a heartbeat packet, where node D is listed.</li>\n<li>A does no longer known node D (see step 3), so it starts a handshake with D.</li>\n<li>D ends re-added in the nodes table of A.</li>\n</ol>\n<p>As you can see in this way removing a node is fragile, we need to send\n<code>CLUSTER FORGET</code> commands to all the nodes ASAP hoping there are no\ngossip sections processing in the meantime. Because of this problem the\ncommand implements a ban-list with an expire time for each entry.</p>\n<p>So what the command really does is:</p>\n<ol>\n<li>The specified node gets removed from the nodes table.</li>\n<li>The node ID of the removed node gets added to the ban-list, for 1 minute.</li>\n<li>The node will skip all the node IDs listed in the ban-list when processing gossip sections received in heartbeat packets from other nodes.</li>\n</ol>\n<p>This way we have a 60 second window to inform all the nodes in the cluster that\nwe want to remove a node.</p>\n<h2>Special conditions not allowing the command execution</h2>\n<p>The command does not succeed and returns an error in the following cases:</p>\n<ol>\n<li>The specified node ID is not found in the nodes table.</li>\n<li>The node receiving the command is a replica, and the specified node ID identifies its current primary.</li>\n<li>The node ID identifies the same node we are sending the command to.</li>\n</ol>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-getkeysinslot",
    "command": "CLUSTER GETKEYSINSLOT",
    "description": "Returns the key names in a hash slot.",
    "htmlContent": "<p>The command returns an array of keys names stored in the contacted node and\nhashing to the specified hash slot. The maximum number of keys to return\nis specified via the <code>count</code> argument, so that it is possible for the user\nof this API to batch-processing keys.</p>\n<p>The main usage of this command is during rehashing of cluster slots from one\nnode to another. The way the rehashing is performed is exposed in the Valkey\nCluster specification, or in a more simple to digest form, as an appendix\nof the <code>CLUSTER SETSLOT</code> command documentation.</p>\n<pre><code>&gt; CLUSTER GETKEYSINSLOT 7000 3\n1) &quot;key_39015&quot;\n2) &quot;key_89793&quot;\n3) &quot;key_92937&quot;\n</code></pre>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-help",
    "command": "CLUSTER HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>CLUSTER HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-info",
    "command": "CLUSTER INFO",
    "description": "Returns information about the state of a node.",
    "htmlContent": "<p><code>CLUSTER INFO</code> provides <code>INFO</code> style information about Valkey Cluster vital parameters.\nThe following fields are always present in the reply:</p>\n<pre><code>cluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:2\ncluster_stats_messages_sent:1483972\ncluster_stats_messages_received:1483968\ntotal_cluster_links_buffer_limit_exceeded:0\n</code></pre>\n<ul>\n<li><code>cluster_state</code>: State is <code>ok</code> if the node is able to receive queries. <code>fail</code> if there is at least one hash slot which is unbound (no node associated), in error state (node serving it is flagged with FAIL flag), or if the majority of primaries can&#39;t be reached by this node.</li>\n<li><code>cluster_slots_assigned</code>: Number of slots which are associated to some node (not unbound). This number should be 16384 for the node to work properly, which means that each hash slot should be mapped to a node.</li>\n<li><code>cluster_slots_ok</code>: Number of hash slots mapping to a node not in <code>FAIL</code> or <code>PFAIL</code> state.</li>\n<li><code>cluster_slots_pfail</code>: Number of hash slots mapping to a node in <code>PFAIL</code> state. Note that those hash slots still work correctly, as long as the <code>PFAIL</code> state is not promoted to <code>FAIL</code> by the failure detection algorithm. <code>PFAIL</code> only means that we are currently not able to talk with the node, but may be just a transient error.</li>\n<li><code>cluster_slots_fail</code>: Number of hash slots mapping to a node in <code>FAIL</code> state. If this number is not zero the node is not able to serve queries unless <code>cluster-require-full-coverage</code> is set to <code>no</code> in the configuration.</li>\n<li><code>cluster_known_nodes</code>: The total number of known nodes in the cluster, including nodes in <code>HANDSHAKE</code> state that may not currently be proper members of the cluster.</li>\n<li><code>cluster_size</code>: The number of primary nodes serving at least one hash slot in the cluster.</li>\n<li><code>cluster_current_epoch</code>: The local <code>Current Epoch</code> variable. This is used in order to create unique increasing version numbers during fail overs.</li>\n<li><code>cluster_my_epoch</code>: The <code>Config Epoch</code> of the node we are talking with. This is the current configuration version assigned to this node.</li>\n<li><code>cluster_stats_messages_sent</code>: Number of messages sent via the cluster node-to-node binary bus.</li>\n<li><code>cluster_stats_messages_received</code>: Number of messages received via the cluster node-to-node binary bus.</li>\n<li><code>total_cluster_links_buffer_limit_exceeded</code>: Accumulated count of cluster links freed due to exceeding the <code>cluster-link-sendbuf-limit</code> configuration.</li>\n</ul>\n<p>The following message-related fields may be included in the reply if the value is not 0:\nEach message type includes statistics on the number of messages sent and received.\nHere are the explanation of these fields:</p>\n<ul>\n<li><code>cluster_stats_messages_ping_sent</code> and <code>cluster_stats_messages_ping_received</code>: Cluster bus PING (not to be confused with the client command <code>PING</code>).</li>\n<li><code>cluster_stats_messages_pong_sent</code> and <code>cluster_stats_messages_pong_received</code>: PONG (reply to PING).</li>\n<li><code>cluster_stats_messages_meet_sent</code> and <code>cluster_stats_messages_meet_received</code>: Handshake message sent to a new node, either through gossip or <code>CLUSTER MEET</code>.</li>\n<li><code>cluster_stats_messages_fail_sent</code> and <code>cluster_stats_messages_fail_received</code>: Mark node xxx as failing.</li>\n<li><code>cluster_stats_messages_publish_sent</code> and <code>cluster_stats_messages_publish_received</code>: Pub/Sub Publish propagation, see <a href=\"../topics/pubsub#pubsub\">Pubsub</a>.</li>\n<li><code>cluster_stats_messages_auth-req_sent</code> and <code>cluster_stats_messages_auth-req_received</code>: Replica initiated leader election to replace its primary.</li>\n<li><code>cluster_stats_messages_auth-ack_sent</code> and <code>cluster_stats_messages_auth-ack_received</code>: Message indicating a vote during leader election.</li>\n<li><code>cluster_stats_messages_update_sent</code> and <code>cluster_stats_messages_update_received</code>: Another node slots configuration.</li>\n<li><code>cluster_stats_messages_mfstart_sent</code> and <code>cluster_stats_messages_mfstart_received</code>: Pause clients for manual failover.</li>\n<li><code>cluster_stats_messages_module_sent</code> and <code>cluster_stats_messages_module_received</code>: Module cluster API message.</li>\n<li><code>cluster_stats_messages_publishshard_sent</code> and <code>cluster_stats_messages_publishshard_received</code>: Pub/Sub Publish shard propagation, see <a href=\"../topics/pubsub#sharded-pubsub\">Sharded Pubsub</a>.</li>\n</ul>\n<p>More information about the Current Epoch and Config Epoch variables are available in the <a href=\"../topics/cluster-spec#cluster-current-epoch\">Valkey Cluster specification document</a>.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-keyslot",
    "command": "CLUSTER KEYSLOT",
    "description": "Returns the hash slot for a key.",
    "htmlContent": "<p>Returns an integer identifying the hash slot the specified key hashes to.\nThis command is mainly useful for debugging and testing, since it exposes\nvia an API the underlying Valkey implementation of the hashing algorithm.\nExample use cases for this command:</p>\n<ol>\n<li>Client libraries may use Valkey in order to test their own hashing algorithm, generating random keys and hashing them with both their local implementation and using Valkey <code>CLUSTER KEYSLOT</code> command, then checking if the result is the same.</li>\n<li>Humans may use this command in order to check what is the hash slot, and then the associated Valkey Cluster node, responsible for a given key.</li>\n</ol>\n<h2>Example</h2>\n<pre><code>&gt; CLUSTER KEYSLOT somekey\n(integer) 11058\n&gt; CLUSTER KEYSLOT foo{hash_tag}\n(integer) 2515\n&gt; CLUSTER KEYSLOT bar{hash_tag}\n(integer) 2515\n</code></pre>\n<p>Note that the command implements the full hashing algorithm, including support for <strong>hash tags</strong>, that is the special property of Valkey Cluster key hashing algorithm, of hashing just what is between <code>{</code> and <code>}</code> if such a pattern is found inside the key name, in order to force multiple keys to be handled by the same node.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-links",
    "command": "CLUSTER LINKS",
    "description": "Returns a list of all TCP links to and from peer nodes.",
    "htmlContent": "<p>Each node in a Valkey Cluster maintains a pair of long-lived TCP link with each peer in the cluster: One for sending outbound messages towards the peer and one for receiving inbound messages from the peer.</p>\n<p><code>CLUSTER LINKS</code> outputs information of all such peer links as an array, where each array element is a map that contains attributes and their values for an individual link.</p>\n<h2>Examples</h2>\n<p>The following is an example output:</p>\n<pre><code>&gt; CLUSTER LINKS\n1)  1) &quot;direction&quot;\n    2) &quot;to&quot;\n    3) &quot;node&quot;\n    4) &quot;8149d745fa551e40764fecaf7cab9dbdf6b659ae&quot;\n    5) &quot;create-time&quot;\n    6) (integer) 1639442739375\n    7) &quot;events&quot;\n    8) &quot;rw&quot;\n    9) &quot;send-buffer-allocated&quot;\n   10) (integer) 4512\n   11) &quot;send-buffer-used&quot;\n   12) (integer) 0\n2)  1) &quot;direction&quot;\n    2) &quot;from&quot;\n    3) &quot;node&quot;\n    4) &quot;8149d745fa551e40764fecaf7cab9dbdf6b659ae&quot;\n    5) &quot;create-time&quot;\n    6) (integer) 1639442739411\n    7) &quot;events&quot;\n    8) &quot;r&quot;\n    9) &quot;send-buffer-allocated&quot;\n   10) (integer) 0\n   11) &quot;send-buffer-used&quot;\n   12) (integer) 0\n</code></pre>\n<p>Each map is composed of the following attributes of the corresponding cluster link and their values:</p>\n<ol>\n<li><code>direction</code>: This link is established by the local node <code>to</code> the peer, or accepted by the local node <code>from</code> the peer.</li>\n<li><code>node</code>: The node id of the peer.</li>\n<li><code>create-time</code>: Creation time of the link. (In the case of a <code>to</code> link, this is the time when the TCP link is created by the local node, not the time when it is actually established.)</li>\n<li><code>events</code>: Events currently registered for the link. <code>r</code> means readable event, <code>w</code> means writable event.</li>\n<li><code>send-buffer-allocated</code>: Allocated size of the link&#39;s send buffer, which is used to buffer outgoing messages toward the peer.</li>\n<li><code>send-buffer-used</code>: Size of the portion of the link&#39;s send buffer that is currently holding data(messages).</li>\n</ol>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-meet",
    "command": "CLUSTER MEET",
    "description": "Forces a node to handshake with another node.",
    "htmlContent": "<p><code>CLUSTER MEET</code> is used in order to connect different Valkey nodes with cluster\nsupport enabled, into a working cluster.</p>\n<p>The basic idea is that nodes by default don&#39;t trust each other, and are\nconsidered unknown, so that it is unlikely that different cluster nodes will\nmix into a single one because of system administration errors or network\naddresses modifications.</p>\n<p>So in order for a given node to accept another one into the list of nodes\ncomposing a Valkey Cluster, there are only two ways:</p>\n<ol>\n<li>The system administrator sends a <code>CLUSTER MEET</code> command to force a node to meet another one.</li>\n<li>An already known node sends a list of nodes in the gossip section that we are not aware of. If the receiving node trusts the sending node as a known node, it will process the gossip section and send a handshake to the nodes that are still not known.</li>\n</ol>\n<p>Note that Valkey Cluster needs to form a full mesh (each node is connected with each other node), but in order to create a cluster, there is no need to send all the <code>CLUSTER MEET</code> commands needed to form the full mesh. What matter is to send enough <code>CLUSTER MEET</code> messages so that each node can reach each other node through a <em>chain of known nodes</em>. Thanks to the exchange of gossip information in heartbeat packets, the missing links will be created.</p>\n<p>So, if we link node A with node B via <code>CLUSTER MEET</code>, and B with C, A and C will find their ways to handshake and create a link.</p>\n<p>Another example: if we imagine a cluster formed of the following four nodes called A, B, C and D, we may send just the following set of commands to A:</p>\n<ol>\n<li><code>CLUSTER MEET B-ip B-port</code></li>\n<li><code>CLUSTER MEET C-ip C-port</code></li>\n<li><code>CLUSTER MEET D-ip D-port</code></li>\n</ol>\n<p>As a side effect of <code>A</code> knowing and being known by all the other nodes, it will send gossip sections in the heartbeat packets that will allow each other node to create a link with each other one, forming a full mesh in a matter of seconds, even if the cluster is large.</p>\n<p>Moreover <code>CLUSTER MEET</code> does not need to be reciprocal. If I send the command to A in order to join B, I don&#39;t need to also send it to B in order to join A.</p>\n<p>If the optional <code>cluster_bus_port</code> argument is not provided, the default of port + 10000 will be used.</p>\n<h2>Implementation details: MEET and PING packets</h2>\n<p>When a given node receives a <code>CLUSTER MEET</code> message, the node specified in the\ncommand still does not know the node we sent the command to. So in order for\nthe node to force the receiver to accept it as a trusted node, it sends a\n<code>MEET</code> packet instead of a <code>PING</code> packet. The two packets have exactly the\nsame format, but the former forces the receiver to acknowledge the node as\ntrusted.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-myid",
    "command": "CLUSTER MYID",
    "description": "Returns the ID of a node.",
    "htmlContent": "<p>Returns the node&#39;s id.</p>\n<p>The <code>CLUSTER MYID</code> command returns the unique, auto-generated identifier that is associated with the connected cluster node.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-myshardid",
    "command": "CLUSTER MYSHARDID",
    "description": "Returns the shard ID of a node.",
    "htmlContent": "<p>Returns the node&#39;s shard id.</p>\n<p>The <code>CLUSTER MYSHARDID</code> command returns the unique, auto-generated identifier that is associated with the shard to which the connected cluster node belongs.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-nodes",
    "command": "CLUSTER NODES",
    "description": "Returns the cluster configuration for a node.",
    "htmlContent": "<p>Each node in a Valkey Cluster has its view of the current cluster configuration,\ngiven by the set of known nodes, the state of the connection we have with such\nnodes, their flags, properties and assigned slots, and so forth.</p>\n<p><code>CLUSTER NODES</code> provides all this information, that is, the current cluster\nconfiguration of the node we are contacting, in a serialization format which\nhappens to be exactly the same as the one used by Valkey Cluster itself in\norder to store on disk the cluster state (however the on disk cluster state\nhas a few additional info appended at the end).</p>\n<p>Note that normally clients willing to fetch the map between Cluster\nhash slots and node addresses should use <code>CLUSTER SLOTS</code> instead.\n<code>CLUSTER NODES</code>, that provides more information, should be used for\nadministrative tasks, debugging, and configuration inspections.\nIt is also used by <code>valkey-cli</code> in order to manage a cluster.</p>\n<h2>Serialization format</h2>\n<p>The output of the command is just a space-separated CSV string, where\neach line represents a node in the cluster. The following\nis an example of output on Valkey 7.2.4.</p>\n<pre><code>07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004@31004,hostname4 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected\n67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002@31002,hostname2 master - 0 1426238316232 2 connected 5461-10922\n292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003@31003,hostname3 master - 0 1426238318243 3 connected 10923-16383\n6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005@31005,hostname5 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected\n824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006@31006,hostname6 slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected\ne7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001@31001,hostname1 myself,master - 0 0 1 connected 0-5460\n</code></pre>\n<p>Each line is composed of the following fields:</p>\n<pre><code>&lt;id&gt; &lt;ip:port@cport[,hostname]&gt; &lt;flags&gt; &lt;master&gt; &lt;ping-sent&gt; &lt;pong-recv&gt; &lt;config-epoch&gt; &lt;link-state&gt; &lt;slot&gt; &lt;slot&gt; ... &lt;slot&gt;\n</code></pre>\n<p>The meaning of each field is the following:</p>\n<ol>\n<li><code>id</code>: The node ID, a 40-character globally unique string generated when a node is created and never changed again (unless <code>CLUSTER RESET HARD</code> is used).</li>\n<li><code>ip:port@cport</code>: The node address that clients should contact to run queries, along with the used cluster bus port.\n<code>:0@0</code> can be expected when the address is no longer known for this node ID, hence flagged with <code>noaddr</code>.</li>\n<li><code>hostname</code>: A human readable string that can be configured via the <code>cluster-annouce-hostname</code> setting. The max length of the string is 256 characters, excluding the null terminator. The name can contain ASCII alphanumeric characters, &#39;-&#39;, and &#39;.&#39; only.</li>\n<li><code>flags</code>: A list of comma separated flags: <code>myself</code>, <code>master</code>, <code>slave</code>, <code>fail?</code>, <code>fail</code>, <code>handshake</code>, <code>noaddr</code>, <code>nofailover</code>, <code>noflags</code>. Flags are explained below.</li>\n<li><code>master</code>: If the node is a replica, and the primary is known, the primary node ID, otherwise the &quot;-&quot; character.</li>\n<li><code>ping-sent</code>: Unix time at which the currently active ping was sent, or zero if there are no pending pings, in milliseconds.</li>\n<li><code>pong-recv</code>: Unix time the last pong was received, in milliseconds.</li>\n<li><code>config-epoch</code>: The configuration epoch (or version) of the current node (or of the current primary if the node is a replica). Each time there is a failover, a new, unique, monotonically increasing configuration epoch is created. If multiple nodes claim to serve the same hash slots, the one with the higher configuration epoch wins.</li>\n<li><code>link-state</code>: The state of the link used for the node-to-node cluster bus. Use this link to communicate with the node. Can be <code>connected</code> or <code>disconnected</code>.</li>\n<li><code>slot</code>: A hash slot number or range. Starting from argument number 9, but there may be up to 16384 entries in total (limit never reached). This is the list of hash slots served by this node. If the entry is just a number, it is parsed as such.  If it is a range, it is in the form <code>start-end</code>, and means that the node is responsible for all the hash slots from <code>start</code> to <code>end</code> including the start and end values.</li>\n</ol>\n<p>Flags are:</p>\n<ul>\n<li><code>myself</code>: The node you are contacting.</li>\n<li><code>master</code>: Node is a primary.</li>\n<li><code>slave</code>: Node is a replica.</li>\n<li><code>fail?</code>: Node is in <code>PFAIL</code> state. Not reachable for the node you are contacting, but still logically reachable (not in <code>FAIL</code> state).</li>\n<li><code>fail</code>: Node is in <code>FAIL</code> state. It was not reachable for multiple nodes that promoted the <code>PFAIL</code> state to <code>FAIL</code>.</li>\n<li><code>handshake</code>: Untrusted node, we are handshaking.</li>\n<li><code>noaddr</code>: No address known for this node.</li>\n<li><code>nofailover</code>: Replica will not try to failover.</li>\n<li><code>noflags</code>: No flags at all.</li>\n</ul>\n<h2>Notes on published config epochs</h2>\n<p>Replicas broadcast their primary&#39;s config epochs (in order to get an <code>UPDATE</code>\nmessage if they are found to be stale), so the real config epoch of the\nreplica (which is meaningless more or less, since they don&#39;t serve hash slots)\ncan be only obtained checking the node flagged as <code>myself</code>, which is the entry\nof the node we are asking to generate <code>CLUSTER NODES</code> output. The other\nreplicas epochs reflect what they publish in heartbeat packets, which is, the\nconfiguration epoch of the primaries they are currently replicating.</p>\n<h2>Special slot entries</h2>\n<p>Normally hash slots associated to a given node are in one of the following formats,\nas already explained above:</p>\n<ol>\n<li>Single number: 3894</li>\n<li>Range: 3900-4000</li>\n</ol>\n<p>However node hash slots can be in a special state, used in order to communicate errors after a node restart (mismatch between the keys in the AOF/RDB file, and the node hash slots configuration), or when there is a resharding operation in progress. This two states are <strong>importing</strong> and <strong>migrating</strong>.</p>\n<p>The meaning of the two states is explained in the Valkey Specification, however the gist of the two states is the following:</p>\n<ul>\n<li><strong>Importing</strong> slots are yet not part of the nodes hash slot, there is a migration in progress. The node will accept queries about these slots only if the <code>ASK</code> command is used.</li>\n<li><strong>Migrating</strong> slots are assigned to the node, but are being migrated to some other node. The node will accept queries if all the keys in the command exist already, otherwise it will emit what is called an <strong>ASK redirection</strong>, to force new keys creation directly in the importing node.</li>\n</ul>\n<p>Importing and migrating slots are emitted in the <code>CLUSTER NODES</code> output as follows:</p>\n<ul>\n<li><strong>Importing slot:</strong> <code>[slot_number-&lt;-importing_from_node_id]</code></li>\n<li><strong>Migrating slot:</strong> <code>[slot_number-&gt;-migrating_to_node_id]</code></li>\n</ul>\n<p>The following are a few examples of importing and migrating slots:</p>\n<ul>\n<li><code>[93-&lt;-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]</code></li>\n<li><code>[1002-&lt;-67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1]</code></li>\n<li><code>[77-&gt;-e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca]</code></li>\n<li><code>[16311-&gt;-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]</code></li>\n</ul>\n<p>Note that the format does not have any space, so <code>CLUSTER NODES</code> output format is plain CSV with space as separator even when this special slots are emitted. However a complete parser for the format should be able to handle them.</p>\n<p>Note that:</p>\n<ol>\n<li>Migration and importing slots are only added to the node flagged as <code>myself</code>. This information is local to a node, for its own slots.</li>\n<li>Importing and migrating slots are provided as <strong>additional info</strong>. If the node has a given hash slot assigned, it will be also a plain number in the list of hash slots, so clients that don&#39;t have a clue about hash slots migrations can just skip this special fields.</li>\n</ol>\n<blockquote>\n<p>NOTE: If not for backward compatibility, the Valkey project no longer uses the words &quot;master&quot; and &quot;slave&quot;. Unfortunately in the given commands these words are part of the protocol, so we&#39;ll be able to remove such occurrences only when this API will be naturally deprecated.</p>\n</blockquote>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-replicas",
    "command": "CLUSTER REPLICAS",
    "description": "Lists the replica nodes of a master node.",
    "htmlContent": "<p>The command provides a list of replica nodes replicating from the specified\nprimary node. The list is provided in the same format used by <code>CLUSTER NODES</code> (please refer to its documentation for the specification of the format).</p>\n<p>The command will fail if the specified node is not known or if it is not\na primary according to the node table of the node receiving the command.</p>\n<p>Note that if a replica is added, moved, or removed from a given primary node,\nand we ask <code>CLUSTER REPLICAS</code> to a node that has not yet received the\nconfiguration update, it may show stale information. However eventually\n(in a matter of seconds if there are no network partitions) all the nodes\nwill agree about the set of nodes associated with a given primary.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-replicate",
    "command": "CLUSTER REPLICATE",
    "description": "Configure a node as replica of a master node.",
    "htmlContent": "<p>The command reconfigures a node as a replica of the specified primary.\nIf the node receiving the command is an <em>empty primary</em>, as a side effect\nof the command, the node role is changed from primary to replica.</p>\n<p>Once a node is turned into the replica of another primary node, there is no need\nto inform the other cluster nodes about the change: heartbeat packets exchanged\nbetween nodes will propagate the new configuration automatically.</p>\n<p>A replica will always accept the command, assuming that:</p>\n<ol>\n<li>The specified node ID exists in its nodes table.</li>\n<li>The specified node ID does not identify the instance we are sending the command to.</li>\n<li>The specified node ID is a primary.</li>\n</ol>\n<p>If the node receiving the command is not already a replica, but is a primary,\nthe command will only succeed, and the node will be converted into a replica,\nonly if the following additional conditions are met:</p>\n<ol>\n<li>The node is not serving any hash slots.</li>\n<li>The node is empty, no keys are stored at all in the key space.</li>\n</ol>\n<p>If the command succeeds the new replica will immediately try to contact its primary in order to replicate from it.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-reset",
    "command": "CLUSTER RESET",
    "description": "Resets a node.",
    "htmlContent": "<p>Reset a Valkey Cluster node, in a more or less drastic way depending on the\nreset type, that can be <strong>hard</strong> or <strong>soft</strong>. Note that this command\n<strong>does not work for primaries if they hold one or more keys</strong>, in that case\nto completely reset a primary node keys must be removed first, e.g. by using <code>FLUSHALL</code> first,\nand then <code>CLUSTER RESET</code>.</p>\n<p>Effects on the node:</p>\n<ol>\n<li>All the other nodes in the cluster are forgotten.</li>\n<li>All the assigned / open slots are reset, so the slots-to-nodes mapping is totally cleared.</li>\n<li>If the node is a replica it is turned into an (empty) primary. Its dataset is flushed, so at the end the node will be an empty primary.</li>\n<li><strong>Hard reset only</strong>: a new Node ID is generated.</li>\n<li><strong>Hard reset only</strong>: <code>currentEpoch</code> and <code>configEpoch</code> vars are set to 0.</li>\n<li>The new configuration is persisted on disk in the node cluster configuration file.</li>\n</ol>\n<p>This command is mainly useful to re-provision a Valkey Cluster node\nin order to be used in the context of a new, different cluster. The command\nis also extensively used by the Valkey Cluster testing framework in order to\nreset the state of the cluster every time a new test unit is executed.</p>\n<p>If no reset type is specified, the default is <strong>soft</strong>.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-saveconfig",
    "command": "CLUSTER SAVECONFIG",
    "description": "Forces a node to save the cluster configuration to disk.",
    "htmlContent": "<p>Forces a node to save the <code>nodes.conf</code> configuration on disk. Before to return\nthe command calls <code>fsync(2)</code> in order to make sure the configuration is\nflushed on the computer disk.</p>\n<p>This command is mainly used in the event a <code>nodes.conf</code> node state file\ngets lost / deleted for some reason, and we want to generate it again from\nscratch. It can also be useful in case of mundane alterations of a node cluster\nconfiguration via the <code>CLUSTER</code> command in order to ensure the new configuration\nis persisted on disk, however all the commands should normally be able to\nauto schedule to persist the configuration on disk when it is important\nto do so for the correctness of the system in the event of a restart.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-set-config-epoch",
    "command": "CLUSTER SET-CONFIG-EPOCH",
    "description": "Sets the configuration epoch for a new node.",
    "htmlContent": "<p>This command sets a specific <em>config epoch</em> in a fresh node. It only works when:</p>\n<ol>\n<li>The nodes table of the node is empty.</li>\n<li>The node current <em>config epoch</em> is zero.</li>\n</ol>\n<p>These prerequisites are needed since usually, manually altering the\nconfiguration epoch of a node is unsafe, we want to be sure that the node with\nthe higher configuration epoch value (that is the last that failed over) wins\nover other nodes in claiming the hash slots ownership.</p>\n<p>However there is an exception to this rule, and it is when a new\ncluster is created from scratch. Valkey Cluster <em>config epoch collision\nresolution</em> algorithm can deal with new nodes all configured with the\nsame configuration at startup, but this process is slow and should be\nthe exception, only to make sure that whatever happens, two more\nnodes eventually always move away from the state of having the same\nconfiguration epoch.</p>\n<p>So, using <code>CLUSTER SET-CONFIG-EPOCH</code>, when a new cluster is created, we can\nassign a different progressive configuration epoch to each node before\njoining the cluster together.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-setslot",
    "command": "CLUSTER SETSLOT",
    "description": "Binds a hash slot to a node.",
    "htmlContent": "<p><code>CLUSTER SETSLOT</code> is responsible of changing the state of a hash slot in the receiving node in different ways. It can, depending on the subcommand used:</p>\n<ol>\n<li><code>MIGRATING</code> subcommand: Set a hash slot in <em>migrating</em> state.</li>\n<li><code>IMPORTING</code> subcommand: Set a hash slot in <em>importing</em> state.</li>\n<li><code>STABLE</code> subcommand: Clear any importing / migrating state from hash slot.</li>\n<li><code>NODE</code> subcommand: Bind the hash slot to a different node.</li>\n</ol>\n<p>The command with its set of subcommands is useful in order to start and end cluster live resharding operations, which are accomplished by setting a hash slot in migrating state in the source node, and importing state in the destination node.</p>\n<p>Each subcommand is documented below. At the end you&#39;ll find a description of\nhow live resharding is performed using this command and other related commands.</p>\n<h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> MIGRATING <code>&lt;destination-node-id&gt;</code></h2>\n<p>This subcommand sets a slot to <em>migrating</em> state. In order to set a slot\nin this state, the node receiving the command must be the hash slot owner,\notherwise an error is returned.</p>\n<p>When a slot is set in migrating state, the node changes behavior in the\nfollowing way:</p>\n<ol>\n<li>If a command is received about an existing key, the command is processed as usually.</li>\n<li>If a command is received about a key that does not exists, an <code>ASK</code> redirection is emitted by the node, asking the client to retry only that specific query into <code>destination-node</code>. In this case the client should not update its hash slot to node mapping.</li>\n<li>If the command contains multiple keys, in case none exist, the behavior is the same as point 2, if all exist, it is the same as point 1, however if only a partial number of keys exist, the command emits a <code>TRYAGAIN</code> error in order for the keys interested to finish being migrated to the target node, so that the multi keys command can be executed.</li>\n</ol>\n<h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> IMPORTING <code>&lt;source-node-id&gt;</code></h2>\n<p>This subcommand is the reverse of <code>MIGRATING</code>, and prepares the destination\nnode to import keys from the specified source node. The command only works if\nthe node is not already owner of the specified hash slot.</p>\n<p>When a slot is set in importing state, the node changes behavior in the following way:</p>\n<ol>\n<li>Commands about this hash slot are refused and a <code>MOVED</code> redirection is generated as usually, but in the case the command follows an <code>ASKING</code> command, in this case the command is executed.</li>\n</ol>\n<p>In this way when a node in migrating state generates an <code>ASK</code> redirection, the client contacts the target node, sends <code>ASKING</code>, and immediately after sends the command. This way commands about non-existing keys in the old node or keys already migrated to the target node are executed in the target node, so that:</p>\n<ol>\n<li>New keys are always created in the target node. During a hash slot migration we&#39;ll have to move only old keys, not new ones.</li>\n<li>Commands about keys already migrated are correctly processed in the context of the node which is the target of the migration, the new hash slot owner, in order to guarantee consistency.</li>\n<li>Without <code>ASKING</code> the behavior is the same as usually. This guarantees that clients with a broken hash slots mapping will not write for error in the target node, creating a new version of a key that has yet to be migrated.</li>\n</ol>\n<h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> STABLE</h2>\n<p>This subcommand just clears migrating / importing state from the slot. It is\nmainly used to fix a cluster stuck in a wrong state by <code>valkey-cli --cluster fix</code>.\nNormally the two states are cleared automatically at the end of the migration\nusing the <code>SETSLOT ... NODE ...</code> subcommand as explained in the next section.</p>\n<h2>CLUSTER SETSLOT <code>&lt;slot&gt;</code> NODE <code>&lt;node-id&gt;</code></h2>\n<p>The <code>NODE</code> subcommand is the one with the most complex semantics. It\nassociates the hash slot with the specified node, however the command works\nonly in specific situations and has different side effects depending on the\nslot state. The following is the set of pre-conditions and side effects of the\ncommand:</p>\n<ol>\n<li>If the current hash slot owner is the node receiving the command, but for effect of the command the slot would be assigned to a different node, the command will return an error if there are still keys for that hash slot in the node receiving the command.</li>\n<li>If the slot is in <em>migrating</em> state, the state gets cleared when the slot is assigned to another node.</li>\n<li>If the slot was in <em>importing</em> state in the node receiving the command, and the command assigns the slot to this node (which happens in the target node at the end of the resharding of a hash slot from one node to another), the command has the following side effects: A) the <em>importing</em> state is cleared. B) If the node config epoch is not already the greatest of the cluster, it generates a new one and assigns the new config epoch to itself. This way its new hash slot ownership will win over any past configuration created by previous failovers or slot migrations.</li>\n</ol>\n<p>It is important to note that step 3 is the only time when a Valkey Cluster node will create a new config epoch without agreement from other nodes. This only happens when a manual configuration is operated. However it is impossible that this creates a non-transient setup where two nodes have the same config epoch, since Valkey Cluster uses a config epoch collision resolution algorithm.</p>\n<h2>Valkey Cluster live resharding explained</h2>\n<p>The <code>CLUSTER SETSLOT</code> command is an important piece used by Valkey Cluster in order to migrate all the keys contained in one hash slot from one node to another. This is how the migration is orchestrated, with the help of other commands as well. We&#39;ll call the node that has the current ownership of the hash slot the <code>source</code> node, and the node where we want to migrate the <code>destination</code> node.</p>\n<ol>\n<li>Set the destination node slot to <em>importing</em> state using <code>CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;source-node-id&gt;</code>.</li>\n<li>Set the source node slot to <em>migrating</em> state using <code>CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;destination-node-id&gt;</code>.</li>\n<li>Get keys from the source node with <code>CLUSTER GETKEYSINSLOT</code> command and move them into the destination node using the <code>MIGRATE</code> command.</li>\n<li>Send <code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;destination-node-id&gt;</code> to the destination node.</li>\n<li>Send <code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;destination-node-id&gt;</code> to the source node.</li>\n<li>Send <code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;destination-node-id&gt;</code> to the other primary nodes (optional).</li>\n</ol>\n<p>Notes:</p>\n<ul>\n<li><p>The order of step 1 and 2 is important. We want the destination node to be ready to accept <code>ASK</code> redirections when the source node is configured to redirect.</p>\n</li>\n<li><p>The order of step 4 and 5 is important.\nThe destination node is responsible for propagating the change to the rest of the cluster.\nIf the source node is informed before the destination node and the destination node crashes before it is set as new slot owner, the slot is left with no owner, even after a successful failover.</p>\n</li>\n<li><p>Step 6, sending <code>SETSLOT</code> to the nodes not involved in the resharding, is not technically necessary since the configuration will eventually propagate itself.\nHowever, it is a good idea to do so in order to stop nodes from pointing to the wrong node for the hash slot moved as soon as possible, resulting in less redirections to find the right node.</p>\n</li>\n<li><p>Starting from Valkey 8.0, <code>CLUSTER SETSLOT</code> is synchronously replicated to all healthy replicas\nrunning Valkey version 8.0+. By default, this synchronous replication must complete within 2 seconds.\nIf the replication fails, the primary does not execute the command, and the client receives a\n<code>NOREPLICAS Not enough good replicas to write</code> error. Operators can retry the command or customize the\ntimeout using the <code>TIMEOUT</code> parameter to further increase the reliability of live reconfiguration:</p>\n<pre><code>CLUSTER SETSLOT slot [MIGRATING|IMPORTING|NODE] node-id [TIMEOUT timeout]\n</code></pre>\n<p>Here, <code>timeout</code> is measured in seconds, with 0 meaning to wait indefinitely.</p>\n</li>\n</ul>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-shards",
    "command": "CLUSTER SHARDS",
    "description": "Returns the mapping of cluster slots to shards.",
    "htmlContent": "<p><code>CLUSTER SHARDS</code> returns details about the shards of the cluster.\nA shard is defined as a collection of nodes that serve the same set of slots and that replicate from each other.\nA shard may only have a single primary at a given time, but may have multiple or no replicas.\nIt is possible for a shard to not be serving any slots while still having replicas.</p>\n<p>This command replaces the <code>CLUSTER SLOTS</code> command, by providing a more efficient and extensible representation of the cluster. </p>\n<p>The command is suitable to be used by Valkey Cluster client libraries in order to understand the topology of the cluster.\nA client should issue this command on startup in order to retrieve the map associating cluster <em>hash slots</em> with actual node information.\nThis map should be used to direct commands to the node that is likely serving the slot associated with a given command.\nIn the event the command is sent to the wrong node, in that it received a &#39;-MOVED&#39; redirect, this command can then be used to update the topology of the cluster.</p>\n<p>The command returns an array of shards, with each shard containing two fields, &#39;slots&#39; and &#39;nodes&#39;. </p>\n<p>The &#39;slots&#39; field is a list of slot ranges served by this shard, stored as pair of integers representing the inclusive start and end slots of the ranges.\nFor example, if a node owns the slots 1, 2, 3, 5, 7, 8 and 9, the slots ranges would be stored as [1-3], [5-5], [7-9].\nThe slots field would therefore be represented by the following list of integers.</p>\n<pre><code>1) 1) &quot;slots&quot;\n   2) 1) (integer) 1\n      2) (integer) 3\n      3) (integer) 5\n      4) (integer) 5\n      5) (integer) 7\n      6) (integer) 9\n</code></pre>\n<p>The &#39;nodes&#39; field contains a list of all nodes within the shard.\nEach individual node is a map of attributes that describe the node. \nSome attributes are optional and more attributes may be added in the future. \nThe current list of attributes:</p>\n<ul>\n<li>id: The unique node id for this particular node.</li>\n<li>endpoint: The preferred endpoint to reach the node, see below for more information about the possible values of this field.</li>\n<li>ip: The IP address to send requests to for this node.</li>\n<li>hostname (optional): The announced hostname to send requests to for this node.</li>\n<li>port (optional): The TCP (non-TLS) port of the node. At least one of port or tls-port will be present.</li>\n<li>tls-port (optional): The TLS port of the node. At least one of port or tls-port will be present.</li>\n<li>role: The replication role of this node.</li>\n<li>replication-offset: The replication offset of this node. This information can be used to send commands to the most up to date replicas.</li>\n<li>health: Either <code>online</code>, <code>failed</code>, or <code>loading</code>. This information should be used to determine which nodes should be sent traffic. The <code>loading</code> health state should be used to know that a node is not currently eligible to serve traffic, but may be eligible in the future.</li>\n</ul>\n<p>The endpoint, along with the port, defines the location that clients should use to send requests for a given slot.\nA NULL value for the endpoint indicates the node has an unknown endpoint and the client should connect to the same endpoint it used to send the <code>CLUSTER SHARDS</code> command but with the port returned from the command.\nThis unknown endpoint configuration is useful when the Valkey nodes are behind a load balancer that Valkey doesn&#39;t know the endpoint of.\nWhich endpoint is set is determined by the <code>cluster-preferred-endpoint-type</code> config.\nAn empty string <code>&quot;&quot;</code> is another abnormal value of the endpoint field, as well as for the ip field, which is returned if the node doesn&#39;t know its own IP address.\nThis can happen in a cluster that consists of only one node or the node has not yet been joined with the rest of the cluster.\nThe value <code>?</code> is displayed if the node is incorrectly configured to use announced hostnames but no hostname is configured using <code>cluster-announce-hostname</code>.\nClients may treat the empty string in the same way as NULL, that is the same endpoint it used to send the current command to, while <code>&quot;?&quot;</code> should be treated as an unknown node, not necessarily the same node as the one serving the current command.</p>\n<h2>Examples</h2>\n<pre><code>&gt; CLUSTER SHARDS\n1) 1) &quot;slots&quot;\n   2) 1) (integer) 0\n      2) (integer) 5460\n   3) &quot;nodes&quot;\n   4) 1)  1) &quot;id&quot;\n          2) &quot;e10b7051d6bf2d5febd39a2be297bbaea6084111&quot;\n          3) &quot;port&quot;\n          4) (integer) 30001\n          5) &quot;ip&quot;\n          6) &quot;127.0.0.1&quot;\n          7) &quot;endpoint&quot;\n          8) &quot;127.0.0.1&quot;\n          9) &quot;role&quot;\n         10) &quot;master&quot;\n         11) &quot;replication-offset&quot;\n         12) (integer) 72156\n         13) &quot;health&quot;\n         14) &quot;online&quot;\n      2)  1) &quot;id&quot;\n          2) &quot;1901f5962d865341e81c85f9f596b1e7160c35ce&quot;\n          3) &quot;port&quot;\n          4) (integer) 30006\n          5) &quot;ip&quot;\n          6) &quot;127.0.0.1&quot;\n          7) &quot;endpoint&quot;\n          8) &quot;127.0.0.1&quot;\n          9) &quot;role&quot;\n         10) &quot;replica&quot;\n         11) &quot;replication-offset&quot;\n         12) (integer) 72156\n         13) &quot;health&quot;\n         14) &quot;online&quot;\n2) 1) &quot;slots&quot;\n   2) 1) (integer) 10923\n      2) (integer) 16383\n   3) &quot;nodes&quot;\n   4) 1)  1) &quot;id&quot;\n          2) &quot;fd20502fe1b32fc32c15b69b0a9537551f162f1f&quot;\n          3) &quot;port&quot;\n          4) (integer) 30003\n          5) &quot;ip&quot;\n          6) &quot;127.0.0.1&quot;\n          7) &quot;endpoint&quot;\n          8) &quot;127.0.0.1&quot;\n          9) &quot;role&quot;\n         10) &quot;master&quot;\n         11) &quot;replication-offset&quot;\n         12) (integer) 72156\n         13) &quot;health&quot;\n         14) &quot;online&quot;\n      2)  1) &quot;id&quot;\n          2) &quot;6daa25c08025a0c7e4cc0d1ab255949ce6cee902&quot;\n          3) &quot;port&quot;\n          4) (integer) 30005\n          5) &quot;ip&quot;\n          6) &quot;127.0.0.1&quot;\n          7) &quot;endpoint&quot;\n          8) &quot;127.0.0.1&quot;\n          9) &quot;role&quot;\n         10) &quot;replica&quot;\n         11) &quot;replication-offset&quot;\n         12) (integer) 72156\n         13) &quot;health&quot;\n         14) &quot;online&quot;\n3) 1) &quot;slots&quot;\n   2) 1) (integer) 5461\n      2) (integer) 10922\n   3) &quot;nodes&quot;\n   4) 1)  1) &quot;id&quot;\n          2) &quot;a4a3f445ead085eb3eb9ee7d8c644ec4481ec9be&quot;\n          3) &quot;port&quot;\n          4) (integer) 30002\n          5) &quot;ip&quot;\n          6) &quot;127.0.0.1&quot;\n          7) &quot;endpoint&quot;\n          8) &quot;127.0.0.1&quot;\n          9) &quot;role&quot;\n         10) &quot;master&quot;\n         11) &quot;replication-offset&quot;\n         12) (integer) 72156\n         13) &quot;health&quot;\n         14) &quot;online&quot;\n      2)  1) &quot;id&quot;\n          2) &quot;da6d5847aa019e9b9d2a8aa24a75f856fd3456cc&quot;\n          3) &quot;port&quot;\n          4) (integer) 30004\n          5) &quot;ip&quot;\n          6) &quot;127.0.0.1&quot;\n          7) &quot;endpoint&quot;\n          8) &quot;127.0.0.1&quot;\n          9) &quot;role&quot;\n         10) &quot;replica&quot;\n         11) &quot;replication-offset&quot;\n         12) (integer) 72156\n         13) &quot;health&quot;\n         14) &quot;online&quot;\n</code></pre>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-slaves",
    "command": "CLUSTER SLAVES",
    "description": "Lists the replica nodes of a master node.",
    "htmlContent": "<p><strong>A note about the word slave used in this man page and command name</strong>: the Valkey project no longer uses the words &quot;master&quot; and &quot;slave&quot;. Please use the new command <code>CLUSTER REPLICAS</code>. The command <code>CLUSTER SLAVES</code> will continue to work for backward compatibility.</p>\n<p>The command provides a list of replica nodes replicating from the specified\nprimary node. The list is provided in the same format used by <code>CLUSTER NODES</code> (please refer to its documentation for the specification of the format).</p>\n<p>The command will fail if the specified node is not known or if it is not\na primary according to the node table of the node receiving the command.</p>\n<p>Note that if a replica is added, moved, or removed from a given primary node,\nand we ask <code>CLUSTER SLAVES</code> to a node that has not yet received the\nconfiguration update, it may show stale information. However eventually\n(in a matter of seconds if there are no network partitions) all the nodes\nwill agree about the set of nodes associated with a given primary.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-cluster-slots",
    "command": "CLUSTER SLOTS",
    "description": "Returns the mapping of cluster slots to nodes.",
    "htmlContent": "<p><code>CLUSTER SLOTS</code> returns details about which cluster slots map to which Valkey instances. \nThe command is suitable to be used by Valkey Cluster client libraries implementations in order to retrieve (or update when a redirection is received) the map associating cluster <em>hash slots</em> with actual nodes network information, so that when a command is received, it can be sent to what is likely the right instance for the keys specified in the command. </p>\n<p>The networking information for each node is an array containing the following elements:</p>\n<ul>\n<li>Preferred endpoint (Either an IP address, hostname, or NULL)</li>\n<li>Port number</li>\n<li>The node ID</li>\n<li>A map of additional networking metadata</li>\n</ul>\n<p>The preferred endpoint, along with the port, defines the location that clients should use to send requests for a given slot.\nA NULL value for the endpoint indicates the node has an unknown endpoint and the client should connect to the same endpoint it used to send the <code>CLUSTER SLOTS</code> command but with the port returned from the command.\nThis unknown endpoint configuration is useful when the Valkey nodes are behind a load balancer that Valkey doesn&#39;t know the endpoint of.\nWhich endpoint is set as preferred is determined by the <code>cluster-preferred-endpoint-type</code> config.\nAn empty string <code>&quot;&quot;</code> is another abnormal value of the endpoint field, as well as for the ip field, which is returned if the node doesn&#39;t know its own IP address.\nThis can happen in a cluster that consists of only one node or the node has not yet been joined with the rest of the cluster.\nThe value <code>?</code> is displayed if the node is incorrectly configured to use announced hostnames but no hostname is configured using <code>cluster-announce-hostname</code>.\nClients may treat the empty string in the same way as NULL, that is the same endpoint it used to send the current command to, while <code>&quot;?&quot;</code> should be treated as an unknown node, not necessarily the same node as the one serving the current command.</p>\n<p>Additional networking metadata is provided as a map on the fourth argument for each node. \nThe following networking metadata may be returned:</p>\n<ul>\n<li>IP: When the preferred endpoint is not set to IP.</li>\n<li>Hostname: When a node has an announced hostname but the primary endpoint is not set to hostname.</li>\n</ul>\n<h2>Nested Result Array</h2>\n<p>Each nested result is:</p>\n<ul>\n<li>Start slot range</li>\n<li>End slot range</li>\n<li>Primary for slot range represented as nested networking information</li>\n<li>First replica of primary for slot range</li>\n<li>Second replica</li>\n<li>...continues until all replicas for this primary are returned.</li>\n</ul>\n<p>Each result includes all active replicas of the primary instance\nfor the listed slot range. Failed replicas are not returned.</p>\n<p>The command response is deterministic across all nodes in a cluster, which means that if two nodes return the same response they have the same view of the cluster.\nPrimaries are ordered by the slots they serve and then replicas are ordered lexicographically by the node-id they were assigned by the cluster. \nThe third nested reply is guaranteed to be the networking information of the primary instance for the slot range.\nAll networking information after the third nested reply are replicas of the primary.</p>\n<p>If a cluster instance has non-contiguous slots (e.g. 1-400,900,1800-6000) then primary and replica networking information results will be duplicated for each top-level slot range reply.</p>\n<pre><code>&gt; CLUSTER SLOTS\n1) 1) (integer) 0\n   2) (integer) 5460\n   3) 1) &quot;127.0.0.1&quot;\n      2) (integer) 30001\n      3) &quot;09dbe9720cda62f7865eabc5fd8857c5d2678366&quot;\n      4) 1) hostname\n         2) &quot;host-1.valkey.example.com&quot;\n   4) 1) &quot;127.0.0.1&quot;\n      2) (integer) 30004\n      3) &quot;821d8ca00d7ccf931ed3ffc7e3db0599d2271abf&quot;\n      4) 1) hostname\n         2) &quot;host-2.valkey.example.com&quot;\n2) 1) (integer) 5461\n   2) (integer) 10922\n   3) 1) &quot;127.0.0.1&quot;\n      2) (integer) 30002\n      3) &quot;c9d93d9f2c0c524ff34cc11838c2003d8c29e013&quot;\n      4) 1) hostname\n         2) &quot;host-3.valkey.example.com&quot;\n   4) 1) &quot;127.0.0.1&quot;\n      2) (integer) 30005\n      3) &quot;faadb3eb99009de4ab72ad6b6ed87634c7ee410f&quot;\n      4) 1) hostname\n         2) &quot;host-4.valkey.example.com&quot;\n3) 1) (integer) 10923\n   2) (integer) 16383\n   3) 1) &quot;127.0.0.1&quot;\n      2) (integer) 30003\n      3) &quot;044ec91f325b7595e76dbcb18cc688b6a5b434a1&quot;\n      4) 1) hostname\n         2) &quot;host-5.valkey.example.com&quot;\n   4) 1) &quot;127.0.0.1&quot;\n      2) (integer) 30006\n      3) &quot;58e6e48d41228013e5d9c1c37c5060693925e97e&quot;\n      4) 1) hostname\n         2) &quot;host-6.valkey.example.com&quot;\n</code></pre>\n<p><strong>Warning:</strong> In future versions there could be more elements describing the node better.\nIn general a client implementation should just rely on the fact that certain parameters are at fixed positions as specified, but more parameters may follow and should be ignored.\nSimilarly a client library should try if possible to cope with the fact that older versions may just have the primary endpoint and port parameter.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-command",
    "command": "COMMAND",
    "description": "Returns detailed information about all commands.",
    "htmlContent": "<p>Return an array with details about every Valkey command.</p>\n<p>The <code>COMMAND</code> command is introspective.\nIts reply describes all commands that the server can process.\nValkey clients can call it to obtain the server&#39;s runtime capabilities during the handshake.</p>\n<p><code>COMMAND</code> also has several subcommands.\nPlease refer to its subcommands for further details.</p>\n<p><strong>Cluster note:</strong>\nthis command is especially beneficial for cluster-aware clients.\nSuch clients must identify the names of keys in commands to route requests to the correct shard.\nAlthough most commands accept a single key as their first argument, there are many exceptions to this rule. \nYou can call <code>COMMAND</code> and then keep the mapping between commands and their respective key specification rules cached in the client.</p>\n<p>The reply it returns is an array with an element per command.\nEach element that describes a Valkey command is represented as an array by itself.</p>\n<p>The command&#39;s array consists of a fixed number of elements.\nThe exact number of elements in the array depends on the server&#39;s version.</p>\n<ol>\n<li>Name</li>\n<li>Arity</li>\n<li>Flags</li>\n<li>First key</li>\n<li>Last key</li>\n<li>Step</li>\n<li><a href=\"../topics/acl\">ACL categories</a></li>\n<li><a href=\"../topics/command-tips\">Tips</a></li>\n<li><a href=\"../topics/key-specs\">Key specifications</a></li>\n<li>Subcommands</li>\n</ol>\n<h2>Name</h2>\n<p>This is the command&#39;s name in lowercase.</p>\n<p><strong>Note:</strong>\nValkey command names are case-insensitive.</p>\n<h2>Arity</h2>\n<p>Arity is the number of arguments a command expects.\nIt follows a simple pattern:</p>\n<ul>\n<li>A positive integer means a fixed number of arguments.</li>\n<li>A negative integer means a minimal number of arguments.</li>\n</ul>\n<p>Command arity <em>always includes</em> the command&#39;s name itself (and the subcommand when applicable).</p>\n<p>Examples:</p>\n<ul>\n<li><code>GET</code>&#39;s arity is <em>2</em> since the command only accepts one argument and always has the format <code>GET _key_</code>.</li>\n<li><code>MGET</code>&#39;s arity is <em>-2</em> since the command accepts at least one argument, but possibly multiple ones: <code>MGET _key1_ [key2] [key3] ...</code>.</li>\n</ul>\n<h2>Flags</h2>\n<p>Command flags are an array. It can contain the following simple strings (status reply):</p>\n<ul>\n<li><strong>admin:</strong> the command is an administrative command.</li>\n<li><strong>asking:</strong> the command is allowed even during hash slot migration.\nThis flag is relevant in Valkey Cluster deployments.</li>\n<li><strong>blocking:</strong> the command may block the requesting client.</li>\n<li><strong>denyoom</strong>: the command is rejected if the server&#39;s memory usage is too high (see the <em>maxmemory</em> configuration directive).</li>\n<li><strong>fast:</strong> the command operates in constant or log(N) time.\nThis flag is used for monitoring latency with the <code>LATENCY</code> command.</li>\n<li><strong>loading:</strong> the command is allowed while the database is loading.</li>\n<li><strong>movablekeys:</strong> the <em>first key</em>, <em>last key</em>, and <em>step</em> values don&#39;t determine all key positions.\nClients need to use <code>COMMAND GETKEYS</code> or <a href=\"../topics/key-specs\">key specifications</a> in this case.\nSee below for more details.</li>\n<li><strong>no_auth:</strong> executing the command doesn&#39;t require authentication.</li>\n<li><strong>no_async_loading:</strong> the command is denied during asynchronous loading (that is when a replica uses disk-less <code>SWAPDB SYNC</code>, and allows access to the old dataset).</li>\n<li><strong>no_mandatory_keys:</strong> the command may accept key name arguments, but these aren&#39;t mandatory.</li>\n<li><strong>no_multi:</strong> the command isn&#39;t allowed inside the context of a <a href=\"../topics/transactions\">transaction</a>.</li>\n<li><strong>noscript:</strong> the command can&#39;t be called from <a href=\"../topics/eval-intro\">scripts</a> or <a href=\"../topics/functions-intro\">functions</a>.</li>\n<li><strong>pubsub:</strong> the command is related to <a href=\"../topics/pubsub\">Valkey Pub/Sub</a>.</li>\n<li><strong>random</strong>: the command returns random results, which is a concern with verbatim script replication. This flag is a <a href=\"../topics/command-tips\">command tip</a>.</li>\n<li><strong>readonly:</strong> the command doesn&#39;t modify data.</li>\n<li><strong>sort_for_script:</strong> the command&#39;s output is sorted when called from a script.</li>\n<li><strong>skip_monitor:</strong> the command is not shown in <code>MONITOR</code>&#39;s output.</li>\n<li><strong>skip_slowlog:</strong> the command is not shown in <code>SLOWLOG</code>&#39;s output. This flag is a <a href=\"../topics/command-tips\">command tip</a>.</li>\n<li><strong>stale:</strong> the command is allowed while a replica has stale data.</li>\n<li><strong>write:</strong> the command may modify data.</li>\n</ul>\n<h3>Movablekeys</h3>\n<p>Consider <code>SORT</code>:</p>\n<pre><code>1) 1) &quot;sort&quot;\n   2) (integer) -2\n   3) 1) write\n      2) denyoom\n      3) movablekeys\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n   ...\n</code></pre>\n<p>Some Valkey commands have no predetermined key locations or are not easy to find.\nFor those commands, the <em>movablekeys</em> flag indicates that the <em>first key</em>, <em>last key</em>, and <em>step</em> values are insufficient to find all the keys.</p>\n<p>Here are several examples of commands that have the <em>movablekeys</em> flag:</p>\n<ul>\n<li><code>SORT</code>: the optional <em>STORE</em>, <em>BY</em>, and <em>GET</em> modifiers are followed by names of keys.</li>\n<li><code>ZUNION</code>: the <em>numkeys</em> argument specifies the number key name arguments.</li>\n<li><code>MIGRATE</code>: the keys appear <em>KEYS</em> keyword and only when the second argument is the empty string.</li>\n</ul>\n<p>Valkey Cluster clients need to use other measures, as follows, to locate the keys for such commands.</p>\n<p>You can use the <code>COMMAND GETKEYS</code> command and have your Valkey server report all keys of a given command&#39;s invocation.</p>\n<p>Clients can use the <a href=\"#key-specifications\">key specifications</a> to identify the positions of key names.\nThe only commands that require using <code>COMMAND GETKEYS</code> are <code>SORT</code> and <code>MIGRATE</code> for clients that parse keys&#39; specifications.</p>\n<p>For more information, please refer to the <a href=\"../topics/key-specs\">key specifications page</a>.</p>\n<h2>First key</h2>\n<p>The position of the command&#39;s first key name argument.\nFor most commands, the first key&#39;s position is 1.\nPosition 0 is always the command name itself.</p>\n<h2>Last key</h2>\n<p>The position of the command&#39;s last key name argument.\nValkey commands usually accept one, two or multiple number of keys.</p>\n<p>Commands that accept a single key have both <em>first key</em> and <em>last key</em> set to 1.</p>\n<p>Commands that accept two key name arguments, e.g. <code>BRPOPLPUSH</code>, <code>SMOVE</code> and <code>RENAME</code>, have this value set to the position of their second key.</p>\n<p>Multi-key commands that accept an arbitrary number of keys, such as <code>MSET</code>, use the value -1.</p>\n<h2>Step</h2>\n<p>The step, or increment, between the <em>first key</em> and the position of the next key.</p>\n<p>Consider the following two examples:</p>\n<pre><code>1) 1) &quot;mset&quot;\n   2) (integer) -3\n   3) 1) write\n      2) denyoom\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 2\n   ...\n</code></pre>\n<pre><code>1) 1) &quot;mget&quot;\n   2) (integer) -2\n   3) 1) readonly\n      2) fast\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 1\n   ...\n</code></pre>\n<p>The step count allows us to find keys&#39; positions. \nFor example <code>MSET</code>: Its syntax is <code>MSET _key1_ _val1_ [key2] [val2] [key3] [val3]...</code>, so the keys are at every other position (step value of <em>2</em>).\nUnlike <code>MGET</code>, which uses a step value of <em>1</em>.</p>\n<h2>ACL categories</h2>\n<p>This is an array of simple strings that are the ACL categories to which the command belongs.\nPlease refer to the <a href=\"../topics/acl\">Access Control List</a> page for more information.</p>\n<h2>Command tips</h2>\n<p>Helpful information about the command.\nTo be used by clients/proxies.</p>\n<p>Please check the <a href=\"../topics/command-tips\">Command tips</a> page for more information.</p>\n<h2>Key specifications</h2>\n<p>This is an array consisting of the command&#39;s key specifications.\nEach element in the array is a map describing a method for locating keys in the command&#39;s arguments.</p>\n<p>For more information please check the <a href=\"../topics/key-specs\">key specifications page</a>.</p>\n<h2>Subcommands</h2>\n<p>This is an array containing all of the command&#39;s subcommands, if any.\nSome Valkey commands have subcommands (e.g., the <code>REWRITE</code> subcommand of <code>CONFIG</code>).\nEach element in the array represents one subcommand and follows the same specifications as those of <code>COMMAND</code>&#39;s reply.</p>\n<h2>Examples</h2>\n<p>The following is <code>COMMAND</code>&#39;s output for the <code>GET</code> command:</p>\n<pre><code>1)  1) &quot;get&quot;\n    2) (integer) 2\n    3) 1) readonly\n       2) fast\n    4) (integer) 1\n    5) (integer) 1\n    6) (integer) 1\n    7) 1) @read\n       2) @string\n       3) @fast\n    8) (empty array)\n    9) 1) 1) &quot;flags&quot;\n          2) 1) read\n          3) &quot;begin_search&quot;\n          4) 1) &quot;type&quot;\n             2) &quot;index&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;index&quot;\n                2) (integer) 1\n          5) &quot;find_keys&quot;\n          6) 1) &quot;type&quot;\n             2) &quot;range&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;lastkey&quot;\n                2) (integer) 0\n                3) &quot;keystep&quot;\n                4) (integer) 1\n                5) &quot;limit&quot;\n                6) (integer) 0\n   10) (empty array)\n...\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-count",
    "command": "COMMAND COUNT",
    "description": "Returns a count of commands.",
    "htmlContent": "<p>Returns the total number of commands in this Valkey server.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; COMMAND COUNT\n(integer) 241\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-docs",
    "command": "COMMAND DOCS",
    "description": "Returns documentary information about one, multiple or all commands.",
    "htmlContent": "<p>Return documentary information about commands.</p>\n<p>By default, the reply includes all of the server&#39;s commands.\nYou can use the optional <em>command-name</em> argument to specify the names of one or more commands.</p>\n<p>The reply includes a map for each returned command.\nThe following keys may be included in the mapped reply:</p>\n<ul>\n<li><strong>summary:</strong> short command description.</li>\n<li><strong>since:</strong> the Valkey version that added the command (or for module commands, the module version).</li>\n<li><strong>group:</strong> the functional group to which the command belongs.\nPossible values are:<ul>\n<li><em>bitmap</em></li>\n<li><em>cluster</em></li>\n<li><em>connection</em></li>\n<li><em>generic</em></li>\n<li><em>geo</em></li>\n<li><em>hash</em></li>\n<li><em>hyperloglog</em></li>\n<li><em>list</em></li>\n<li><em>module</em></li>\n<li><em>pubsub</em></li>\n<li><em>scripting</em></li>\n<li><em>sentinel</em></li>\n<li><em>server</em></li>\n<li><em>set</em></li>\n<li><em>sorted-set</em></li>\n<li><em>stream</em></li>\n<li><em>string</em></li>\n<li><em>transactions</em></li>\n</ul>\n</li>\n<li><strong>complexity:</strong> a short explanation about the command&#39;s time complexity.</li>\n<li><strong>doc_flags:</strong> an array of documentation flags.\nPossible values are:<ul>\n<li><em>deprecated:</em> the command is deprecated.</li>\n<li><em>syscmd:</em> a system command that isn&#39;t meant to be called by users.</li>\n</ul>\n</li>\n<li><strong>deprecated_since:</strong> the Valkey version that deprecated the command (or for module commands, the module version)..</li>\n<li><strong>replaced_by:</strong> the alternative for a deprecated command.</li>\n<li><strong>history:</strong> an array of historical notes describing changes to the command&#39;s output or arguments. It should not contain information about behavioral changes.\nEach entry is an array itself, made up of two elements:<ol>\n<li>The Valkey version that the entry applies to.</li>\n<li>The description of the change.</li>\n</ol>\n</li>\n<li><strong>arguments:</strong> an array of maps that describe the command&#39;s arguments.\nPlease refer to the <a href=\"../topics/command-arguments\">Valkey command arguments</a> page for more information.</li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; COMMAND DOCS SET\n1) &quot;set&quot;\n2)  1) &quot;summary&quot;\n    2) &quot;Sets the string value of a key, ignoring its type. The key is created if it doesn&#39;t exist.&quot;\n    3) &quot;since&quot;\n    4) &quot;1.0.0&quot;\n    5) &quot;group&quot;\n    6) &quot;string&quot;\n    7) &quot;complexity&quot;\n    8) &quot;O(1)&quot;\n    9) &quot;history&quot;\n   10) 1) 1) &quot;2.6.12&quot;\n          2) &quot;Added the `EX`, `PX`, `NX` and `XX` options.&quot;\n       2) 1) &quot;6.0.0&quot;\n          2) &quot;Added the `KEEPTTL` option.&quot;\n       3) 1) &quot;6.2.0&quot;\n          2) &quot;Added the `GET`, `EXAT` and `PXAT` option.&quot;\n       4) 1) &quot;7.0.0&quot;\n          2) &quot;Allowed the `NX` and `GET` options to be used together.&quot;\n   11) &quot;arguments&quot;\n   12) 1) 1) &quot;name&quot;\n          2) &quot;key&quot;\n          3) &quot;type&quot;\n          4) &quot;key&quot;\n          5) &quot;display_text&quot;\n          6) &quot;key&quot;\n          7) &quot;key_spec_index&quot;\n          8) (integer) 0\n       2) 1) &quot;name&quot;\n          2) &quot;value&quot;\n          3) &quot;type&quot;\n          4) &quot;string&quot;\n          5) &quot;display_text&quot;\n          6) &quot;value&quot;\n       3)  1) &quot;name&quot;\n           2) &quot;condition&quot;\n           3) &quot;type&quot;\n           4) &quot;oneof&quot;\n           5) &quot;since&quot;\n           6) &quot;2.6.12&quot;\n           7) &quot;flags&quot;\n           8) 1) optional\n           9) &quot;arguments&quot;\n          10) 1) 1) &quot;name&quot;\n                 2) &quot;nx&quot;\n                 3) &quot;type&quot;\n                 4) &quot;pure-token&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;nx&quot;\n                 7) &quot;token&quot;\n                 8) &quot;NX&quot;\n              2) 1) &quot;name&quot;\n                 2) &quot;xx&quot;\n                 3) &quot;type&quot;\n                 4) &quot;pure-token&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;xx&quot;\n                 7) &quot;token&quot;\n                 8) &quot;XX&quot;\n       4)  1) &quot;name&quot;\n           2) &quot;get&quot;\n           3) &quot;type&quot;\n           4) &quot;pure-token&quot;\n           5) &quot;display_text&quot;\n           6) &quot;get&quot;\n           7) &quot;token&quot;\n           8) &quot;GET&quot;\n           9) &quot;since&quot;\n          10) &quot;6.2.0&quot;\n          11) &quot;flags&quot;\n          12) 1) optional\n       5) 1) &quot;name&quot;\n          2) &quot;expiration&quot;\n          3) &quot;type&quot;\n          4) &quot;oneof&quot;\n          5) &quot;flags&quot;\n          6) 1) optional\n          7) &quot;arguments&quot;\n          8) 1)  1) &quot;name&quot;\n                 2) &quot;seconds&quot;\n                 3) &quot;type&quot;\n                 4) &quot;integer&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;seconds&quot;\n                 7) &quot;token&quot;\n                 8) &quot;EX&quot;\n                 9) &quot;since&quot;\n                10) &quot;2.6.12&quot;\n             2)  1) &quot;name&quot;\n                 2) &quot;milliseconds&quot;\n                 3) &quot;type&quot;\n                 4) &quot;integer&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;milliseconds&quot;\n                 7) &quot;token&quot;\n                 8) &quot;PX&quot;\n                 9) &quot;since&quot;\n                10) &quot;2.6.12&quot;\n             3)  1) &quot;name&quot;\n                 2) &quot;unix-time-seconds&quot;\n                 3) &quot;type&quot;\n                 4) &quot;unix-time&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;unix-time-seconds&quot;\n                 7) &quot;token&quot;\n                 8) &quot;EXAT&quot;\n                 9) &quot;since&quot;\n                10) &quot;6.2.0&quot;\n             4)  1) &quot;name&quot;\n                 2) &quot;unix-time-milliseconds&quot;\n                 3) &quot;type&quot;\n                 4) &quot;unix-time&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;unix-time-milliseconds&quot;\n                 7) &quot;token&quot;\n                 8) &quot;PXAT&quot;\n                 9) &quot;since&quot;\n                10) &quot;6.2.0&quot;\n             5)  1) &quot;name&quot;\n                 2) &quot;keepttl&quot;\n                 3) &quot;type&quot;\n                 4) &quot;pure-token&quot;\n                 5) &quot;display_text&quot;\n                 6) &quot;keepttl&quot;\n                 7) &quot;token&quot;\n                 8) &quot;KEEPTTL&quot;\n                 9) &quot;since&quot;\n                10) &quot;6.0.0&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-getkeys",
    "command": "COMMAND GETKEYS",
    "description": "Extracts the key names from an arbitrary command.",
    "htmlContent": "<p>Returns @array-reply of keys from a full Valkey command.</p>\n<p><code>COMMAND GETKEYS</code> is a helper command to let you find the keys\nfrom a full Valkey command.</p>\n<p><code>COMMAND</code> provides information on how to find the key names of each command (see <code>firstkey</code>, <a href=\"../topics/key-specs#logical-operation-flags\">key specifications</a>, and <code>movablekeys</code>),\nbut in some cases it&#39;s not possible to find keys of certain commands and then the entire command must be parsed to discover some / all key names.\nYou can use <code>COMMAND GETKEYS</code> or <code>COMMAND GETKEYSANDFLAGS</code> to discover key names directly from how Valkey parses the commands.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; COMMAND GETKEYS MSET a b c d e f\n1) &quot;a&quot;\n2) &quot;c&quot;\n3) &quot;e&quot;\n127.0.0.1:6379&gt; COMMAND GETKEYS EVAL &quot;not consulted&quot; 3 key1 key2 key3 arg1 arg2 arg3 argN\n1) &quot;key1&quot;\n2) &quot;key2&quot;\n3) &quot;key3&quot;\n127.0.0.1:6379&gt; COMMAND GETKEYS SORT mylist ALPHA STORE outlist\n1) &quot;mylist&quot;\n2) &quot;outlist&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-getkeysandflags",
    "command": "COMMAND GETKEYSANDFLAGS",
    "description": "Extracts the key names and access flags for an arbitrary command.",
    "htmlContent": "<p>Returns @array-reply of keys from a full Valkey command and their usage flags.</p>\n<p><code>COMMAND GETKEYSANDFLAGS</code> is a helper command to let you find the keys from a full Valkey command together with flags indicating what each key is used for.</p>\n<p><code>COMMAND</code> provides information on how to find the key names of each command (see <code>firstkey</code>, <a href=\"../topics/key-specs#logical-operation-flags\">key specifications</a>, and <code>movablekeys</code>),\nbut in some cases it&#39;s not possible to find keys of certain commands and then the entire command must be parsed to discover some / all key names.\nYou can use <code>COMMAND GETKEYS</code> or <code>COMMAND GETKEYSANDFLAGS</code> to discover key names directly from how Valkey parses the commands.</p>\n<p>Refer to <a href=\"../topics/key-specs#logical-operation-flags\">key specifications</a> for information about the meaning of the key flags.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; COMMAND GETKEYS MSET a b c d e f\n1) &quot;a&quot;\n2) &quot;c&quot;\n3) &quot;e&quot;\n127.0.0.1:6379&gt; COMMAND GETKEYS EVAL &quot;not consulted&quot; 3 key1 key2 key3 arg1 arg2 arg3 argN\n1) &quot;key1&quot;\n2) &quot;key2&quot;\n3) &quot;key3&quot;\n127.0.0.1:6379&gt; COMMAND GETKEYSANDFLAGS LMOVE mylist1 mylist2 left left\n1) 1) &quot;mylist1&quot;\n   2) 1) RW\n      2) access\n      3) delete\n2) 1) &quot;mylist2&quot;\n   2) 1) RW\n      2) insert\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-help",
    "command": "COMMAND HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>COMMAND HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-info",
    "command": "COMMAND INFO",
    "description": "Returns information about one, multiple or all commands.",
    "htmlContent": "<p>Returns @array-reply of details about multiple Valkey commands.</p>\n<p>Same result format as <code>COMMAND</code> except you can specify which commands\nget returned.</p>\n<p>If you request details about non-existing commands, their return\nposition will be nil.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; COMMAND INFO get set eval\n1)  1) &quot;get&quot;\n    2) (integer) 2\n    3) 1) readonly\n       2) fast\n    4) (integer) 1\n    5) (integer) 1\n    6) (integer) 1\n    7) 1) @read\n       2) @string\n       3) @fast\n    8) (empty array)\n    9) 1) 1) &quot;flags&quot;\n          2) 1) RO\n             2) access\n          3) &quot;begin_search&quot;\n          4) 1) &quot;type&quot;\n             2) &quot;index&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;index&quot;\n                2) (integer) 1\n          5) &quot;find_keys&quot;\n          6) 1) &quot;type&quot;\n             2) &quot;range&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;lastkey&quot;\n                2) (integer) 0\n                3) &quot;keystep&quot;\n                4) (integer) 1\n                5) &quot;limit&quot;\n                6) (integer) 0\n   10) (empty array)\n2)  1) &quot;set&quot;\n    2) (integer) -3\n    3) 1) write\n       2) denyoom\n    4) (integer) 1\n    5) (integer) 1\n    6) (integer) 1\n    7) 1) @write\n       2) @string\n       3) @slow\n    8) (empty array)\n    9) 1) 1) &quot;notes&quot;\n          2) &quot;RW and ACCESS due to the optional `GET` argument&quot;\n          3) &quot;flags&quot;\n          4) 1) RW\n             2) access\n             3) update\n             4) variable_flags\n          5) &quot;begin_search&quot;\n          6) 1) &quot;type&quot;\n             2) &quot;index&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;index&quot;\n                2) (integer) 1\n          7) &quot;find_keys&quot;\n          8) 1) &quot;type&quot;\n             2) &quot;range&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;lastkey&quot;\n                2) (integer) 0\n                3) &quot;keystep&quot;\n                4) (integer) 1\n                5) &quot;limit&quot;\n                6) (integer) 0\n   10) (empty array)\n3)  1) &quot;eval&quot;\n    2) (integer) -3\n    3) 1) noscript\n       2) stale\n       3) skip_monitor\n       4) no_mandatory_keys\n       5) movablekeys\n    4) (integer) 0\n    5) (integer) 0\n    6) (integer) 0\n    7) 1) @slow\n       2) @scripting\n    8) (empty array)\n    9) 1) 1) &quot;notes&quot;\n          2) &quot;We cannot tell how the keys will be used so we assume the worst, RW and UPDATE&quot;\n          3) &quot;flags&quot;\n          4) 1) RW\n             2) access\n             3) update\n          5) &quot;begin_search&quot;\n          6) 1) &quot;type&quot;\n             2) &quot;index&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;index&quot;\n                2) (integer) 2\n          7) &quot;find_keys&quot;\n          8) 1) &quot;type&quot;\n             2) &quot;keynum&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;keynumidx&quot;\n                2) (integer) 0\n                3) &quot;firstkey&quot;\n                4) (integer) 1\n                5) &quot;keystep&quot;\n                6) (integer) 1\n   10) (empty array)\n127.0.0.1:6379&gt; COMMAND INFO foo evalsha config bar\n1) (nil)\n2)  1) &quot;evalsha&quot;\n    2) (integer) -3\n    3) 1) noscript\n       2) stale\n       3) skip_monitor\n       4) no_mandatory_keys\n       5) movablekeys\n    4) (integer) 0\n    5) (integer) 0\n    6) (integer) 0\n    7) 1) @slow\n       2) @scripting\n    8) (empty array)\n    9) 1) 1) &quot;flags&quot;\n          2) 1) RW\n             2) access\n             3) update\n          3) &quot;begin_search&quot;\n          4) 1) &quot;type&quot;\n             2) &quot;index&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;index&quot;\n                2) (integer) 2\n          5) &quot;find_keys&quot;\n          6) 1) &quot;type&quot;\n             2) &quot;keynum&quot;\n             3) &quot;spec&quot;\n             4) 1) &quot;keynumidx&quot;\n                2) (integer) 0\n                3) &quot;firstkey&quot;\n                4) (integer) 1\n                5) &quot;keystep&quot;\n                6) (integer) 1\n   10) (empty array)\n3)  1) &quot;config&quot;\n    2) (integer) -2\n    3) (empty array)\n    4) (integer) 0\n    5) (integer) 0\n    6) (integer) 0\n    7) 1) @slow\n    8) (empty array)\n    9) (empty array)\n   10) 1)  1) &quot;config|rewrite&quot;\n           2) (integer) 2\n           3) 1) admin\n              2) noscript\n              3) loading\n              4) stale\n           4) (integer) 0\n           5) (integer) 0\n           6) (integer) 0\n           7) 1) @admin\n              2) @slow\n              3) @dangerous\n           8) 1) &quot;request_policy:all_nodes&quot;\n              2) &quot;response_policy:all_succeeded&quot;\n           9) (empty array)\n          10) (empty array)\n       2)  1) &quot;config|resetstat&quot;\n           2) (integer) 2\n           3) 1) admin\n              2) noscript\n              3) loading\n              4) stale\n           4) (integer) 0\n           5) (integer) 0\n           6) (integer) 0\n           7) 1) @admin\n              2) @slow\n              3) @dangerous\n           8) 1) &quot;request_policy:all_nodes&quot;\n              2) &quot;response_policy:all_succeeded&quot;\n           9) (empty array)\n          10) (empty array)\n       3)  1) &quot;config|help&quot;\n           2) (integer) 2\n           3) 1) loading\n              2) stale\n           4) (integer) 0\n           5) (integer) 0\n           6) (integer) 0\n           7) 1) @slow\n           8) (empty array)\n           9) (empty array)\n          10) (empty array)\n       4)  1) &quot;config|get&quot;\n           2) (integer) -3\n           3) 1) admin\n              2) noscript\n              3) loading\n              4) stale\n           4) (integer) 0\n           5) (integer) 0\n           6) (integer) 0\n           7) 1) @admin\n              2) @slow\n              3) @dangerous\n           8) (empty array)\n           9) (empty array)\n          10) (empty array)\n       5)  1) &quot;config|set&quot;\n           2) (integer) -4\n           3) 1) admin\n              2) noscript\n              3) loading\n              4) stale\n           4) (integer) 0\n           5) (integer) 0\n           6) (integer) 0\n           7) 1) @admin\n              2) @slow\n              3) @dangerous\n           8) 1) &quot;request_policy:all_nodes&quot;\n              2) &quot;response_policy:all_succeeded&quot;\n           9) (empty array)\n          10) (empty array)\n4) (nil)\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-command-list",
    "command": "COMMAND LIST",
    "description": "Returns a list of command names.",
    "htmlContent": "<p>Return an array of the server&#39;s command names.</p>\n<p>You can use the optional <em>FILTERBY</em> modifier to apply one of the following filters:</p>\n<ul>\n<li><strong>MODULE module-name</strong>: get the commands that belong to the module specified by <em>module-name</em>.</li>\n<li><strong>ACLCAT category</strong>: get the commands in the <a href=\"../topics/acl#command-categories\">ACL category</a> specified by <em>category</em>.</li>\n<li><strong>PATTERN pattern</strong>: get the commands that match the given glob-like <em>pattern</em>.</li>\n</ul>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-config",
    "command": "CONFIG",
    "description": "A container for server configuration commands.",
    "htmlContent": "<p>This is a container command for runtime configuration commands.</p>\n<p>To see the list of available commands you can call <code>CONFIG HELP</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-config-get",
    "command": "CONFIG GET",
    "description": "Returns the effective values of configuration parameters.",
    "htmlContent": "<p>The <code>CONFIG GET</code> command is used to read the configuration parameters of a\nrunning Valkey server.</p>\n<p>The symmetric command used to alter the configuration at run time is <code>CONFIG SET</code>.</p>\n<p><code>CONFIG GET</code> takes multiple arguments, which are glob-style patterns.\nAny configuration parameter matching any of the patterns are reported as a list\nof key-value pairs.\nExample:</p>\n<pre><code>127.0.0.1:6379&gt; config get *max-*-entries* maxmemory\n 1) &quot;maxmemory&quot;\n 2) &quot;0&quot;\n 3) &quot;hash-max-listpack-entries&quot;\n 4) &quot;512&quot;\n 5) &quot;hash-max-ziplist-entries&quot;\n 6) &quot;512&quot;\n 7) &quot;set-max-intset-entries&quot;\n 8) &quot;512&quot;\n 9) &quot;zset-max-listpack-entries&quot;\n10) &quot;128&quot;\n11) &quot;zset-max-ziplist-entries&quot;\n12) &quot;128&quot;\n</code></pre>\n<p>You can obtain a list of all the supported configuration parameters by typing\n<code>CONFIG GET *</code> in an open <code>valkey-cli</code> prompt.</p>\n<p>All the supported parameters have the same meaning of the equivalent\nconfiguration parameter used in the <a href=\"http://github.com/valkey-io/valkey/raw/unstable/valkey.conf\">valkey.conf</a> file:</p>\n<p>Note that you should look at the valkey.conf file relevant to the version you&#39;re\nworking with as configuration options might change between versions. The link\nabove is to the latest development version.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-config-help",
    "command": "CONFIG HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>CONFIG HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-config-resetstat",
    "command": "CONFIG RESETSTAT",
    "description": "Resets the server's statistics.",
    "htmlContent": "<p>Resets the statistics reported by Valkey using the <code>INFO</code> and <code>LATENCY HISTOGRAM</code> commands.</p>\n<p>The following is a non-exhaustive list of values that are reset:</p>\n<ul>\n<li>Keyspace hits and misses</li>\n<li>Number of expired keys</li>\n<li>Command and error statistics</li>\n<li>Connections received, rejected and evicted</li>\n<li>Persistence statistics</li>\n<li>Active defragmentation statistics</li>\n</ul>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-config-rewrite",
    "command": "CONFIG REWRITE",
    "description": "Persists the effective configuration to file.",
    "htmlContent": "<p>The <code>CONFIG REWRITE</code> command rewrites the <code>valkey.conf</code> file the server was started with, applying the minimal changes needed to make it reflect the configuration currently used by the server, which may be different compared to the original one because of the use of the <code>CONFIG SET</code> command.</p>\n<p>The rewrite is performed in a very conservative way:</p>\n<ul>\n<li>Comments and the overall structure of the original valkey.conf are preserved as much as possible.</li>\n<li>If an option already exists in the old valkey.conf file, it will be rewritten at the same position (line number).</li>\n<li>If an option was not already present, but it is set to its default value, it is not added by the rewrite process.</li>\n<li>If an option was not already present, but it is set to a non-default value, it is appended at the end of the file.</li>\n<li>Non used lines are blanked. For instance if you used to have multiple <code>save</code> directives, but the current configuration has fewer or none as you disabled RDB persistence, all the lines will be blanked.</li>\n</ul>\n<p>CONFIG REWRITE is also able to rewrite the configuration file from scratch if the original one no longer exists for some reason. However if the server was started without a configuration file at all, the CONFIG REWRITE will just return an error.</p>\n<h2>Atomic rewrite process</h2>\n<p>In order to make sure the valkey.conf file is always consistent, that is, on errors or crashes you always end with the old file, or the new one, the rewrite is performed with a single <code>write(2)</code> call that has enough content to be at least as big as the old file. Sometimes additional padding in the form of comments is added in order to make sure the resulting file is big enough, and later the file gets truncated to remove the padding at the end.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-config-set",
    "command": "CONFIG SET",
    "description": "Sets configuration parameters in-flight.",
    "htmlContent": "<p>The <code>CONFIG SET</code> command is used in order to reconfigure the server at run time\nwithout the need to restart Valkey.\nYou can change both trivial parameters or switch from one to another persistence\noption using this command.</p>\n<p>The list of configuration parameters supported by <code>CONFIG SET</code> can be obtained\nissuing a <code>CONFIG GET *</code> command, that is the symmetrical command used to obtain\ninformation about the configuration of a running Valkey instance.</p>\n<p>All the configuration parameters set using <code>CONFIG SET</code> are immediately loaded\nby Valkey and will take effect starting with the next command executed.</p>\n<p>All the supported parameters have the same meaning of the equivalent\nconfiguration parameter used in the <a href=\"http://github.com/valkey-io/valkey/raw/unstable/valkey.conf\">valkey.conf</a> file.</p>\n<p>Note that you should look at the valkey.conf file relevant to the version you&#39;re\nworking with as configuration options might change between versions. The link\nabove is to the latest development version.</p>\n<p>It is possible to switch persistence from RDB snapshotting to append-only file\n(and the other way around) using the <code>CONFIG SET</code> command.\nFor more information about how to do that please check the <a href=\"../topics/persistence\">persistence\npage</a>.</p>\n<p>In general what you should know is that setting the <code>appendonly</code> parameter to\n<code>yes</code> will start a background process to save the initial append-only file\n(obtained from the in memory data set), and will append all the subsequent\ncommands on the append-only file, thus obtaining exactly the same effect of a\nValkey server that started with AOF turned on since the start.</p>\n<p>You can have both the AOF enabled with RDB snapshotting if you want, the two\noptions are not mutually exclusive.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-copy",
    "command": "COPY",
    "description": "Copies the value of a key to a new key.",
    "htmlContent": "<p>This command copies the value stored at the <code>source</code> key to the <code>destination</code>\nkey.</p>\n<p>By default, the <code>destination</code> key is created in the logical database used by the\nconnection. The <code>DB</code> option allows specifying an alternative logical database\nindex for the destination key.</p>\n<p>The command returns zero when the <code>destination</code> key already exists. The\n<code>REPLACE</code> option removes the <code>destination</code> key before copying the value to it.</p>\n<h2>Examples</h2>\n<pre><code>SET dolly &quot;sheep&quot;\nCOPY dolly clone\nGET clone\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-dbsize",
    "command": "DBSIZE",
    "description": "Returns the number of keys in the database.",
    "htmlContent": "<p>Return the number of keys in the currently-selected database.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-debug",
    "command": "DEBUG",
    "description": "A container for debugging commands.",
    "htmlContent": "<p>The <code>DEBUG</code> command is an internal command.\nIt is meant to be used for developing and testing Valkey.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-decr",
    "command": "DECR",
    "description": "Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.",
    "htmlContent": "<p>Decrements the number stored at <code>key</code> by one.\nIf the key does not exist, it is set to <code>0</code> before performing the operation.\nAn error is returned if the key contains a value of the wrong type or contains a\nstring that can not be represented as integer.\nThis operation is limited to <strong>64 bit signed integers</strong>.</p>\n<p>See <code>INCR</code> for extra information on increment/decrement operations.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;10&quot;\nOK\n127.0.0.1:6379&gt; DECR mykey\n(integer) 9\n127.0.0.1:6379&gt; SET mykey &quot;234293482390480948029348230948&quot;\nOK\n127.0.0.1:6379&gt; DECR mykey\n(error) ERR value is not an integer or out of range\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-decrby",
    "command": "DECRBY",
    "description": "Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.",
    "htmlContent": "<p>Decrements the number stored at <code>key</code> by <code>decrement</code>.\nIf the key does not exist, it is set to <code>0</code> before performing the operation.\nAn error is returned if the key contains a value of the wrong type or contains a\nstring that can not be represented as integer.\nThis operation is limited to 64 bit signed integers.</p>\n<p>See <code>INCR</code> for extra information on increment/decrement operations.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;10&quot;\nOK\n127.0.0.1:6379&gt; DECRBY mykey 3\n(integer) 7\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-del",
    "command": "DEL",
    "description": "Deletes one or more keys.",
    "htmlContent": "<p>Removes the specified keys.\nA key is ignored if it does not exist.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; SET key2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; DEL key1 key2 key3\n(integer) 2\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-discard",
    "command": "DISCARD",
    "description": "Discards a transaction.",
    "htmlContent": "<p>Flushes all previously queued commands in a <a href=\"../topics/transactions\">transaction</a> and restores the\nconnection state to normal.</p>\n<p>If <code>WATCH</code> was used, <code>DISCARD</code> unwatches all keys watched by the connection.</p>\n",
    "categories": [
      "transactions"
    ]
  },
  {
    "unid": "cmd-dump",
    "command": "DUMP",
    "description": "Returns a serialized representation of the value stored at a key.",
    "htmlContent": "<p>Serialize the value stored at key in a Valkey-specific format and return it to\nthe user.\nThe returned value can be synthesized back into a Valkey key using the <code>RESTORE</code>\ncommand.</p>\n<p>The serialization format is opaque and non-standard, however it has a few\nsemantic characteristics:</p>\n<ul>\n<li>It contains a 64-bit checksum that is used to make sure errors will be\ndetected.\nThe <code>RESTORE</code> command makes sure to check the checksum before synthesizing a\nkey using the serialized value.</li>\n<li>Values are encoded in the same format used by RDB.</li>\n<li>An RDB version is encoded inside the serialized value, so that different Valkey\nversions with incompatible RDB formats will refuse to process the serialized\nvalue.</li>\n</ul>\n<p>The serialized value does NOT contain expire information.\nIn order to capture the time to live of the current value the <code>PTTL</code> command\nshould be used.</p>\n<p>If <code>key</code> does not exist a nil bulk reply is returned.</p>\n<h2>Examples</h2>\n<pre><code>&gt; SET mykey 10\nOK\n&gt; DUMP mykey\n&quot;\\x00\\xc0\\n\\n\\x00n\\x9fWE\\x0e\\xaec\\xbb&quot;\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-echo",
    "command": "ECHO",
    "description": "Returns the given string.",
    "htmlContent": "<p>Returns <code>message</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ECHO &quot;Hello World!&quot;\n&quot;Hello World!&quot;\n</code></pre>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-eval",
    "command": "EVAL",
    "description": "Executes a server-side Lua script.",
    "htmlContent": "<p>Invoke the execution of a server-side Lua script.</p>\n<p>The first argument is the script&#39;s source code.\nScripts are written in <a href=\"https://lua.org\">Lua</a> and executed by the embedded <a href=\"../topics/lua-api\">Lua 5.1</a> interpreter in Valkey.</p>\n<p>The second argument is the number of input key name arguments, followed by all the keys accessed by the script.\nThese names of input keys are available to the script as the <a href=\"../topics/lua-api#the-keys-global-variable\"><em>KEYS</em> global runtime variable</a>\nAny additional input arguments <strong>should not</strong> represent names of keys.</p>\n<p><strong>Important:</strong>\nto ensure the correct execution of scripts, both in standalone and clustered deployments, all names of keys that a script accesses must be explicitly provided as input key arguments.\nThe script <strong>should only</strong> access keys whose names are given as input arguments.\nScripts <strong>should never</strong> access keys with programmatically-generated names or based on the contents of data structures stored in the database.</p>\n<p><strong>Note:</strong>\nin some cases, users will abuse Lua EVAL by embedding values in the script instead of providing them as argument, and thus generating a different script on each call to EVAL.\nThese are added to the Lua interpreter and cached to valkey-server, consuming a large amount of memory over time.\nStarting from Valkey 8.0, scripts loaded with <code>EVAL</code> or <code>EVAL_RO</code> will be deleted from Valkey after a certain number (least recently used order).\nThe number of evicted scripts can be viewed through <code>INFO</code>&#39;s <code>evicted_scripts</code>.</p>\n<p>Please refer to the <a href=\"../topics/programmability\">Valkey Programmability</a> and <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a> for more information about Lua scripts.</p>\n<h2>Examples</h2>\n<p>The following example will run a script that returns the first argument that it gets.</p>\n<pre><code>&gt; EVAL &quot;return ARGV[1]&quot; 0 hello\n&quot;hello&quot;\n</code></pre>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-evalsha",
    "command": "EVALSHA",
    "description": "Executes a server-side Lua script by SHA1 digest.",
    "htmlContent": "<p>Evaluate a script from the server&#39;s cache by its SHA1 digest.</p>\n<p>The server caches scripts by using the <code>SCRIPT LOAD</code> command.\nThe command is otherwise identical to <code>EVAL</code>.</p>\n<p>Please refer to the <a href=\"../topics/programmability\">Valkey Programmability</a> and <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a> for more information about Lua scripts.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-evalsha_ro",
    "command": "EVALSHA_RO",
    "description": "Executes a read-only server-side Lua script by SHA1 digest.",
    "htmlContent": "<p>This is a read-only variant of the <code>EVALSHA</code> command that cannot execute commands that modify data.</p>\n<p>For more information about when to use this command vs <code>EVALSHA</code>, please refer to <a href=\"../topics/programmability#read-only-scripts\">Read-only scripts</a>.</p>\n<p>For more information about <code>EVALSHA</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-eval_ro",
    "command": "EVAL_RO",
    "description": "Executes a read-only server-side Lua script.",
    "htmlContent": "<p>This is a read-only variant of the <code>EVAL</code> command that cannot execute commands that modify data.</p>\n<p>For more information about when to use this command vs <code>EVAL</code>, please refer to <a href=\"../topics/programmability#read-only-scripts\">Read-only scripts</a>.</p>\n<p>For more information about <code>EVAL</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n<h2>Examples</h2>\n<pre><code>&gt; SET mykey &quot;Hello&quot;\nOK\n\n&gt; EVAL_RO &quot;return server.call(&#39;GET&#39;, KEYS[1])&quot; 1 mykey\n&quot;Hello&quot;\n\n&gt; EVAL_RO &quot;return server.call(&#39;DEL&#39;, KEYS[1])&quot; 1 mykey\n(error) ERR Error running script (call to b0d697da25b13e49157b2c214a4033546aba2104): @user_script:1: @user_script: 1: Write commands are not allowed from read-only scripts.\n</code></pre>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-exec",
    "command": "EXEC",
    "description": "Executes all commands in a transaction.",
    "htmlContent": "<p>Executes all previously queued commands in a <a href=\"../topics/transactions\">transaction</a> and restores the\nconnection state to normal.</p>\n<p>When using <code>WATCH</code>, <code>EXEC</code> will execute commands only if the watched keys were\nnot modified, allowing for a <a href=\"../topics/transactions#cas\">check-and-set mechanism</a>.</p>\n",
    "categories": [
      "transactions"
    ]
  },
  {
    "unid": "cmd-exists",
    "command": "EXISTS",
    "description": "Determines whether one or more keys exist.",
    "htmlContent": "<p>Returns if <code>key</code> exists.</p>\n<p>The user should be aware that if the same existing key is mentioned in the arguments multiple times, it will be counted multiple times. So if <code>somekey</code> exists, <code>EXISTS somekey somekey</code> will return 2.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXISTS key1\n(integer) 1\n127.0.0.1:6379&gt; EXISTS nosuchkey\n(integer) 0\n127.0.0.1:6379&gt; SET key2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; EXISTS key1 key2 nosuchkey\n(integer) 2\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-expire",
    "command": "EXPIRE",
    "description": "Sets the expiration time of a key in seconds.",
    "htmlContent": "<p>Set a timeout on <code>key</code>.\nAfter the timeout has expired, the key will automatically be deleted.\nA key with an associated timeout is often said to be <em>volatile</em> in Valkey\nterminology.</p>\n<p>The timeout will only be cleared by commands that delete or overwrite the\ncontents of the key, including <code>DEL</code>, <code>SET</code>, <code>GETSET</code> and all the <code>*STORE</code>\ncommands.\nThis means that all the operations that conceptually <em>alter</em> the value stored at\nthe key without replacing it with a new one will leave the timeout untouched.\nFor instance, incrementing the value of a key with <code>INCR</code>, pushing a new value\ninto a list with <code>LPUSH</code>, or altering the field value of a hash with <code>HSET</code> are\nall operations that will leave the timeout untouched.</p>\n<p>The timeout can also be cleared, turning the key back into a persistent key,\nusing the <code>PERSIST</code> command.</p>\n<p>If a key is renamed with <code>RENAME</code>, the associated time to live is transferred to\nthe new key name.</p>\n<p>If a key is overwritten by <code>RENAME</code>, like in the case of an existing key <code>Key_A</code>\nthat is overwritten by a call like <code>RENAME Key_B Key_A</code>, it does not matter if\nthe original <code>Key_A</code> had a timeout associated or not, the new key <code>Key_A</code> will\ninherit all the characteristics of <code>Key_B</code>.</p>\n<p>Note that calling <code>EXPIRE</code>/<code>PEXPIRE</code> with a non-positive timeout or\n<code>EXPIREAT</code>/<code>PEXPIREAT</code> with a time in the past will result in the key being\n<a href=\"del\">deleted</a> rather than expired (accordingly, the emitted <a href=\"../topics/notifications\">key event</a>\nwill be <code>del</code>, not <code>expired</code>).</p>\n<h2>Options</h2>\n<p>The <code>EXPIRE</code> command supports a set of options:</p>\n<ul>\n<li><code>NX</code> -- Set expiry only when the key has no expiry</li>\n<li><code>XX</code> -- Set expiry only when the key has an existing expiry</li>\n<li><code>GT</code> -- Set expiry only when the new expiry is greater than current one</li>\n<li><code>LT</code> -- Set expiry only when the new expiry is less than current one</li>\n</ul>\n<p>A non-volatile key is treated as an infinite TTL for the purpose of <code>GT</code> and <code>LT</code>.\nThe <code>GT</code>, <code>LT</code> and <code>NX</code> options are mutually exclusive.</p>\n<h2>Refreshing expires</h2>\n<p>It is possible to call <code>EXPIRE</code> using as argument a key that already has an\nexisting expire set.\nIn this case the time to live of a key is <em>updated</em> to the new value.\nThere are many useful applications for this, an example is documented in the\n<em>Navigation session</em> pattern section below.</p>\n<p><code>EXPIRE</code> would return 0 and not alter the timeout for a key with a timeout set.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXPIRE mykey 10\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) 10\n127.0.0.1:6379&gt; SET mykey &quot;Hello World&quot;\nOK\n127.0.0.1:6379&gt; TTL mykey\n(integer) -1\n127.0.0.1:6379&gt; EXPIRE mykey 10 XX\n(integer) 0\n127.0.0.1:6379&gt; TTL mykey\n(integer) -1\n127.0.0.1:6379&gt; EXPIRE mykey 10 NX\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) 10\n</code></pre>\n<h2>Pattern: Navigation session</h2>\n<p>Imagine you have a web service and you are interested in the latest N pages\n<em>recently</em> visited by your users, such that each adjacent page view was not\nperformed more than 60 seconds after the previous.\nConceptually you may consider this set of page views as a <em>Navigation session</em>\nof your user, that may contain interesting information about what kind of\nproducts he or she is looking for currently, so that you can recommend related\nproducts.</p>\n<p>You can easily model this pattern in Valkey using the following strategy: every\ntime the user does a page view you call the following commands:</p>\n<pre><code>MULTI\nRPUSH pagewviews.user:&lt;userid&gt; http://.....\nEXPIRE pagewviews.user:&lt;userid&gt; 60\nEXEC\n</code></pre>\n<p>If the user will be idle more than 60 seconds, the key will be deleted and only\nsubsequent page views that have less than 60 seconds of difference will be\nrecorded.</p>\n<p>This pattern is easily modified to use counters using <code>INCR</code> instead of lists\nusing <code>RPUSH</code>.</p>\n<h1>Appendix: Valkey expires</h1>\n<h2>Keys with an expire</h2>\n<p>Normally Valkey keys are created without an associated time to live.\nThe key will simply live forever, unless it is removed by the user in an\nexplicit way, for instance using the <code>DEL</code> command.</p>\n<p>The <code>EXPIRE</code> family of commands is able to associate an expire to a given key,\nat the cost of some additional memory used by the key.\nWhen a key has an expire set, Valkey will make sure to remove the key when the\nspecified amount of time elapsed.</p>\n<p>The key time to live can be updated or entirely removed using the <code>EXPIRE</code> and\n<code>PERSIST</code> command (or other strictly related commands).</p>\n<h2>Expire accuracy</h2>\n<p>The expire error is from 0 to 1 milliseconds.</p>\n<h2>Expires and persistence</h2>\n<p>Keys expiring information is stored in milliseconds.\nThis means that the time is flowing even when the Valkey instance is not active.</p>\n<p>For expires to work well, the computer time must be taken stable.\nIf you move an RDB file from two computers with a big desync in their clocks,\nfunny things may happen (like all the keys loaded to be expired at loading\ntime).</p>\n<p>Even running instances will always check the computer clock, so for instance if\nyou set a key with a time to live of 1000 seconds, and then set your computer\ntime 2000 seconds in the future, the key will be expired immediately, instead of\nlasting for 1000 seconds.</p>\n<h2>How Valkey reclaims expired keys</h2>\n<p>Valkey reclaims expired keys in two ways: on access and in the background in what is called the &quot;active expire key&quot; cycles. On access expiration is when a client tries to access a key with the expiration time which is found to be timed out. Such a key is deleted on this access attempt.</p>\n<p>Relying solely on the on access expiration only is not enough because there are expired keys that may never be accessed again. To address this, Valkey uses the background expiration algorithm known as the &quot;active expire key&quot; effort. This  algorithm is adaptive: it tries to use less CPU if there are few expired keys to reclaim. Otherwise, it gets more aggressive trying to free more memory by reclaiming more keys in shorter runs but using more CPU. </p>\n<p>This is how it works:</p>\n<p>Valkey slowly scans the keyspace to identify and reclaim expired keys. This &quot;slow cycle&quot; is the main way to collect expired keys and operates with the server&#39;s hertz frequency (usually 10 hertz). During the slow cycle, Valkey tolerates having not more than 10% of the expired keys in the memory and tries to use a maximum of 25% CPU power. These default values are adjusted if the user changes the active expire key effort configuration. </p>\n<p>If the number of expired keys remains high after the slow cycle, the active expire key effort transitions into the &quot;fast cycle&quot;, trying to do less work but more often. The fast cycle runs no longer than 1000 microseconds and repeats at the same interval. During the fast cycle, the check of every database is interrupted once the number of already expired keys in the database is estimated to be lower than 10%. This is done to avoid doing too much work to gain too little memory. </p>\n<p>You can modify the active expire key effort with the <code>active-expire-effort</code> parameter in the configuration file up to the maximum value of <code>10</code>. The default <code>active-expire-effort</code> value is <code>1</code>, and it is described by the following base values:</p>\n<ul>\n<li><code>ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP</code> = 20 - The number of keys for each DB loop.    </li>\n<li><code>ACTIVE_EXPIRE_CYCLE_FAST_DURATION</code> = 1000 – The maximum duration of the fast cycle in microseconds. </li>\n<li><code>ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC</code> = 25 – The maximum % of CPU to use during the slow cycle.</li>\n<li><code>ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE</code> = 10 – The maximum % of expired keys to tolerate in memory.</li>\n</ul>\n<p>Changing the <code>active-expire-effort</code> value results in a lower percentage of expired keys tolerated in memory. However, it will lead to longer cycles and increased CPU usage, which may introduce latency.</p>\n<p>To calculate the new values, use the following formulas:</p>\n<ul>\n<li><code>ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP + (ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP / 4 * (effort - 1))</code></li>\n<li><code>ACTIVE_EXPIRE_CYCLE_FAST_DURATION + (ACTIVE_EXPIRE_CYCLE_FAST_DURATION / 4 * (effort - 1))</code></li>\n<li><code>ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC + (2 * (effort - 1))</code></li>\n<li><code>ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE - (effort - 1)</code></li>\n</ul>\n<p>where <code>ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP</code>, <code>ACTIVE_EXPIRE_CYCLE_FAST_DURATION</code>, <code>ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC</code>, and <code>ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE</code> are the base values, and <code>effort</code> is the specified <code>active-expire-effort</code>.</p>\n<h2>How expires are handled in the replication link and AOF file</h2>\n<p>In order to obtain a correct behavior without sacrificing consistency, when a\nkey expires, a <code>DEL</code> operation is synthesized in both the AOF file and gains all\nthe attached replicas nodes.\nThis way the expiration process is centralized in the primary instance, and there\nis no chance of consistency errors.</p>\n<p>However while the replicas connected to a primary will not expire keys\nindependently (but will wait for the <code>DEL</code> coming from the primary), they&#39;ll\nstill take the full state of the expires existing in the dataset, so when a\nreplica is elected to primary it will be able to expire the keys independently,\nfully acting as a primary.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-expireat",
    "command": "EXPIREAT",
    "description": "Sets the expiration time of a key to a Unix timestamp.",
    "htmlContent": "<p><code>EXPIREAT</code> has the same effect and semantic as <code>EXPIRE</code>, but instead of\nspecifying the number of seconds representing the TTL (time to live), it takes\nan absolute <a href=\"http://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a> (seconds since January 1, 1970). A\ntimestamp in the past will delete the key immediately.</p>\n<p>Please for the specific semantics of the command refer to the documentation of\n<code>EXPIRE</code>.</p>\n<h2>Background</h2>\n<p><code>EXPIREAT</code> was introduced in order to convert relative timeouts to absolute\ntimeouts for the AOF persistence mode.\nOf course, it can be used directly to specify that a given key should expire at\na given time in the future.</p>\n<h2>Options</h2>\n<p>The <code>EXPIREAT</code> command supports a set of options:</p>\n<ul>\n<li><code>NX</code> -- Set expiry only when the key has no expiry</li>\n<li><code>XX</code> -- Set expiry only when the key has an existing expiry</li>\n<li><code>GT</code> -- Set expiry only when the new expiry is greater than current one</li>\n<li><code>LT</code> -- Set expiry only when the new expiry is less than current one</li>\n</ul>\n<p>A non-volatile key is treated as an infinite TTL for the purpose of <code>GT</code> and <code>LT</code>.\nThe <code>GT</code>, <code>LT</code> and <code>NX</code> options are mutually exclusive.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXISTS mykey\n(integer) 1\n127.0.0.1:6379&gt; EXPIREAT mykey 1293840000\n(integer) 1\n127.0.0.1:6379&gt; EXISTS mykey\n(integer) 0\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-expiretime",
    "command": "EXPIRETIME",
    "description": "Returns the expiration time of a key as a Unix timestamp.",
    "htmlContent": "<p>Returns the absolute Unix timestamp (since January 1, 1970) in seconds at which the given key will expire.</p>\n<p>See also the <code>PEXPIRETIME</code> command which returns the same information with milliseconds resolution.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXPIREAT mykey 33177117420\n(integer) 1\n127.0.0.1:6379&gt; EXPIRETIME mykey\n(integer) 33177117420\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-failover",
    "command": "FAILOVER",
    "description": "Starts a coordinated failover from a server to one of its replicas.",
    "htmlContent": "<p>This command will start a coordinated failover between the currently-connected-to primary and one of its replicas.\nThe failover is not synchronous, instead a background task will handle coordinating the failover. \nIt is designed to limit data loss and unavailability of the cluster during the failover.\nThis command is analogous to the <code>CLUSTER FAILOVER</code> command for non-clustered Valkey and is similar to the failover support provided by sentinel.</p>\n<p>The specific details of the default failover flow are as follows:</p>\n<ol>\n<li>The primary will internally start a <code>CLIENT PAUSE WRITE</code>, which will pause incoming writes and prevent the accumulation of new data in the replication stream.</li>\n<li>The primary will monitor its replicas, waiting for a replica to indicate that it has fully consumed the replication stream. If the primary has multiple replicas, it will only wait for the first replica to catch up.</li>\n<li>The primary will then demote itself to a replica. This is done to prevent any dual primary scenarios. NOTE: The primary will not discard its data, so it will be able to rollback if the replica rejects the failover request in the next step.</li>\n<li>The previous primary will send a special PSYNC request to the target replica, <code>PSYNC FAILOVER</code>, instructing the target replica to become a primary.</li>\n<li>Once the previous primary receives acknowledgement the <code>PSYNC FAILOVER</code> was accepted it will unpause its clients. If the PSYNC request is rejected, the primary will abort the failover and return to normal.</li>\n</ol>\n<p>The field <code>master_failover_state</code> in <code>INFO replication</code> can be used to track the current state of the failover, which has the following values:</p>\n<ul>\n<li><code>no-failover</code>: There is no ongoing coordinated failover.</li>\n<li><code>waiting-for-sync</code>: The primary is waiting for the replica to catch up to its replication offset.</li>\n<li><code>failover-in-progress</code>: The primary has demoted itself, and is attempting to hand off ownership to a target replica.</li>\n</ul>\n<p>NOTE:\nDuring the <code>failover-in-progress</code> phase, the primary first demotes itself to a replica and then notifies the replica to promote itself to primary.\nThese two steps are an asynchronous process, which may result in the simultaneous existence of two nodes as replicas.\nIn this scenario, for clients that support REDIRECT (explicitly execute <a href=\"client-capa\">CLIENT CAPA REDIRECT</a>), the redirection result may bounce back and forth between the two replicas until the target replica completes the process of promoting itself to primary.\nTo avoid this situation, during the <code>failover-in-progress</code> phase, we temporarily suspend the clients that need to be redirected until the replica truly becomes the primary, and then resume the execution.</p>\n<p>If the previous primary had additional replicas attached to it, they will continue replicating from it as chained replicas. You will need to manually execute a <code>REPLICAOF</code> on these replicas to start replicating directly from the new primary.</p>\n<h2>Optional arguments</h2>\n<p>The following optional arguments exist to modify the behavior of the failover flow:</p>\n<ul>\n<li><p><code>TIMEOUT</code> <em>milliseconds</em> -- This option allows specifying a maximum time a primary will wait in the <code>waiting-for-sync</code> state before aborting the failover attempt and rolling back.\nThis is intended to set an upper bound on the write outage the Valkey cluster can experience.\nFailovers typically happen in less than a second, but could take longer if there is a large amount of write traffic or the replica is already behind in consuming the replication stream. \nIf this value is not specified, the timeout can be considered to be &quot;infinite&quot;.</p>\n</li>\n<li><p><code>TO</code> <em>HOST</em> <em>PORT</em> -- This option allows designating a specific replica, by its host and port, to failover to. The primary will wait specifically for this replica to catch up to its replication offset, and then failover to it.</p>\n</li>\n<li><p><code>FORCE</code> -- If both the <code>TIMEOUT</code> and <code>TO</code> options are set, the force flag can also be used to designate that that once the timeout has elapsed, the primary should failover to the target replica instead of rolling back.\nThis can be used for a best-effort attempt at a failover without data loss, but limiting write outage.</p>\n</li>\n</ul>\n<p>NOTE: The primary will always rollback if the <code>PSYNC FAILOVER</code> request is rejected by the target replica. </p>\n<h2>Failover abort</h2>\n<p>The failover command is intended to be safe from data loss and corruption, but can encounter some scenarios it can not automatically remediate from and may get stuck. \nFor this purpose, the <code>FAILOVER ABORT</code> command exists, which will abort an ongoing failover and return the primary to its normal state. \nThe command has no side effects if issued in the <code>waiting-for-sync</code> state but can introduce multi-primary scenarios in the <code>failover-in-progress</code> state. \nIf a multi-primary scenario is encountered, you will need to manually identify which primary has the latest data and designate it as the primary and have the other replicas.</p>\n<p>NOTE: <code>REPLICAOF</code> is disabled while a failover is in progress, this is to prevent unintended interactions with the failover that might cause data loss.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-fcall",
    "command": "FCALL",
    "description": "Invokes a function.",
    "htmlContent": "<p>Invoke a function.</p>\n<p>Functions are loaded to the server with the <code>FUNCTION LOAD</code> command.\nThe first argument is the name of a loaded function.</p>\n<p>The second argument is the number of input key name arguments, followed by all the keys accessed by the function.\nIn Lua, these names of input keys are available to the function as a table that is the callback&#39;s first argument.</p>\n<p><strong>Important:</strong>\nTo ensure the correct execution of functions, both in standalone and clustered deployments, all names of keys that a function accesses must be explicitly provided as input key arguments.\nThe function <strong>should only</strong> access keys whose names are given as input arguments.\nFunctions <strong>should never</strong> access keys with programmatically-generated names or based on the contents of data structures stored in the database.</p>\n<p>Any additional input argument <strong>should not</strong> represent names of keys.\nThese are regular arguments and are passed in a Lua table as the callback&#39;s second argument.</p>\n<p>For more information please refer to the <a href=\"../topics/programmability\">Valkey Programmability</a> and <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a> pages.</p>\n<h2>Examples</h2>\n<p>The following example will create a library named <code>mylib</code> with a single function, <code>myfunc</code>, that returns the first argument it gets.</p>\n<pre><code>127.0.0.1:6379&gt; FUNCTION LOAD &quot;#!lua name=mylib \\n server.register_function(&#39;myfunc&#39;, function(keys, args) return args[1] end)&quot;\n&quot;mylib&quot;\n127.0.0.1:6379&gt; FCALL myfunc 0 hello\n&quot;hello&quot;\n</code></pre>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-fcall_ro",
    "command": "FCALL_RO",
    "description": "Invokes a read-only function.",
    "htmlContent": "<p>This is a read-only variant of the <code>FCALL</code> command that cannot execute commands that modify data.</p>\n<p>For more information about when to use this command vs <code>FCALL</code>, please refer to <a href=\"../topics/programmability#read-only_scripts\">Read-only scripts</a>.</p>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-flushall",
    "command": "FLUSHALL",
    "description": "Removes all keys from all databases.",
    "htmlContent": "<p>Delete all the keys of all the existing databases, not just the currently selected one.\nThis command never fails.</p>\n<p>By default, <code>FLUSHALL</code> will synchronously flush all the databases.\nSetting the <strong>lazyfree-lazy-user-flush</strong> configuration directive to &quot;yes&quot; changes the default flush mode to asynchronous.</p>\n<p>It is possible to use one of the following modifiers to dictate the flushing mode explicitly:</p>\n<ul>\n<li><code>ASYNC</code>: flushes the databases asynchronously</li>\n<li><code>!SYNC</code>: flushes the databases synchronously</li>\n</ul>\n<p>Note: an asynchronous <code>FLUSHALL</code> command only deletes keys that were present at the time the command was invoked. Keys created during an asynchronous flush will be unaffected.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-flushdb",
    "command": "FLUSHDB",
    "description": "Remove all keys from the current database.",
    "htmlContent": "<p>Delete all the keys of the currently selected DB.\nThis command never fails.</p>\n<p>By default, <code>FLUSHDB</code> will synchronously flush all keys from the database.\nSetting the <strong>lazyfree-lazy-user-flush</strong> configuration directive to &quot;yes&quot; changes the default flush mode to asynchronous.</p>\n<p>It is possible to use one of the following modifiers to dictate the flushing mode explicitly:</p>\n<ul>\n<li><code>ASYNC</code>: flushes the database asynchronously</li>\n<li><code>!SYNC</code>: flushes the database synchronously</li>\n</ul>\n<p>Note: an asynchronous <code>FLUSHDB</code> command only deletes keys that were present at the time the command was invoked. Keys created during an asynchronous flush will be unaffected.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-function",
    "command": "FUNCTION",
    "description": "A container for function commands.",
    "htmlContent": "<p>This is a container command for function commands.</p>\n<p>To see the list of available commands you can call <code>FUNCTION HELP</code>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-delete",
    "command": "FUNCTION DELETE",
    "description": "Deletes a library and its functions.",
    "htmlContent": "<p>Delete a library and all its functions.</p>\n<p>This command deletes the library called <em>library-name</em> and all functions in it.\nIf the library doesn&#39;t exist, the server returns an error.</p>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; FUNCTION LOAD &quot;#!lua name=mylib \\n server.register_function(&#39;myfunc&#39;, function(keys, args) return &#39;hello&#39; end)&quot;\n&quot;mylib&quot;\n127.0.0.1:6379&gt; FCALL myfunc 0\n&quot;hello&quot;\n127.0.0.1:6379&gt; FUNCTION DELETE mylib\nOK\n127.0.0.1:6379&gt; FCALL myfunc 0\n(error) ERR Function not found\n</code></pre>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-dump",
    "command": "FUNCTION DUMP",
    "description": "Dumps all libraries into a serialized binary payload.",
    "htmlContent": "<p>Return the serialized payload of loaded libraries.\nYou can restore the serialized payload later with the <code>FUNCTION RESTORE</code> command.</p>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n<h2>Examples</h2>\n<p>The following example shows how to dump loaded libraries using <code>FUNCTION DUMP</code> and then it calls <code>FUNCTION FLUSH</code> deletes all the libraries.\nThen, it restores the original libraries from the serialized payload with <code>FUNCTION RESTORE</code>.</p>\n<pre><code>127.0.0.1:6379&gt; FUNCTION LOAD &quot;#!lua name=mylib \\n server.register_function(&#39;myfunc&#39;, function(keys, args) return args[1] end)&quot;\n&quot;mylib&quot;\n127.0.0.1:6379&gt; FUNCTION DUMP\n&quot;\\xf5\\xc3@X@]\\x1f#!lua name=mylib \\n server.registe\\rr_function(&#39;my@\\x0b\\x02&#39;, @\\x06`\\x12\\nkeys, args) 6\\x03turn`\\x0c\\a[1] end)\\x0c\\x00\\xba\\x98\\xc2\\xa2\\x13\\x0e$\\a&quot;\n127.0.0.1:6379&gt; FUNCTION FLUSH\nOK\n127.0.0.1:6379&gt; FUNCTION RESTORE &quot;\\xf5\\xc3@X@]\\x1f#!lua name=mylib \\n server.registe\\rr_function(&#39;my@\\x0b\\x02&#39;, @\\x06`\\x12\\nkeys, args) 6\\x03turn`\\x0c\\a[1] end)\\x0c\\x00\\xba\\x98\\xc2\\xa2\\x13\\x0e$\\a&quot;\nOK\n127.0.0.1:6379&gt; FUNCTION LIST\n1) 1) &quot;library_name&quot;\n   2) &quot;mylib&quot;\n   3) &quot;engine&quot;\n   4) &quot;LUA&quot;\n   5) &quot;functions&quot;\n   6) 1) 1) &quot;name&quot;\n         2) &quot;myfunc&quot;\n         3) &quot;description&quot;\n         4) (nil)\n         5) &quot;flags&quot;\n         6) (empty array)\n</code></pre>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-flush",
    "command": "FUNCTION FLUSH",
    "description": "Deletes all libraries and functions.",
    "htmlContent": "<p>Deletes all the libraries.</p>\n<p>Unless called with the optional mode argument, the <code>lazyfree-lazy-user-flush</code> configuration directive sets the effective behavior. Valid modes are:</p>\n<ul>\n<li><code>ASYNC</code>: Asynchronously flush the libraries.</li>\n<li><code>!SYNC</code>: Synchronously flush the libraries.</li>\n</ul>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-help",
    "command": "FUNCTION HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>FUNCTION HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-kill",
    "command": "FUNCTION KILL",
    "description": "Terminates a function during execution.",
    "htmlContent": "<p>Kill a function that is currently executing.</p>\n<p>The <code>FUNCTION KILL</code> command can be used only on functions that did not modify the dataset during their execution (since stopping a read-only function does not violate the scripting engine&#39;s guaranteed atomicity).</p>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-list",
    "command": "FUNCTION LIST",
    "description": "Returns information about all libraries.",
    "htmlContent": "<p>Return information about the functions and libraries.</p>\n<p>You can use the optional <code>LIBRARYNAME</code> argument to specify a pattern for matching library names.\nThe optional <code>WITHCODE</code> modifier will cause the server to include the libraries source implementation in the reply.</p>\n<p>The following information is provided for each of the libraries in the response:</p>\n<ul>\n<li><strong>library_name:</strong> the name of the library.</li>\n<li><strong>engine:</strong> the engine of the library.</li>\n<li><strong>functions:</strong> the list of functions in the library.\nEach function has the following fields:<ul>\n<li><strong>name:</strong> the name of the function.</li>\n<li><strong>description:</strong> the function&#39;s description.</li>\n<li><strong>flags:</strong> an array of <a href=\"../topics/functions-intro#function-flags\">function flags</a>.</li>\n</ul>\n</li>\n<li><strong>library_code:</strong> the library&#39;s source code (when given the <code>WITHCODE</code> modifier).</li>\n</ul>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-load",
    "command": "FUNCTION LOAD",
    "description": "Creates a library.",
    "htmlContent": "<p>Load a library to Valkey.</p>\n<p>The command&#39;s gets a single mandatory parameter which is the source code that implements the library.\nThe library payload must start with Shebang statement that provides a metadata about the library (like the engine to use and the library name).\nShebang format: <code>#!&lt;engine name&gt; name=&lt;library name&gt;</code>. Currently engine name must be <code>lua</code>.</p>\n<p>For the Lua engine, the implementation should declare one or more entry points to the library with the <a href=\"../topics/lua-api#server.register_function\"><code>server.register_function()</code> API</a>.\nOnce loaded, you can call the functions in the library with the <code>FCALL</code> (or <code>FCALL_RO</code> when applicable) command.</p>\n<p>When attempting to load a library with a name that already exists, the Valkey server returns an error.\nThe <code>REPLACE</code> modifier changes this behavior and overwrites the existing library with the new contents.</p>\n<p>The command will return an error in the following circumstances:</p>\n<ul>\n<li>An invalid <em>engine-name</em> was provided.</li>\n<li>The library&#39;s name already exists without the <code>REPLACE</code> modifier.</li>\n<li>A function in the library is created with a name that already exists in another library (even when <code>REPLACE</code> is specified).</li>\n<li>The engine failed in creating the library&#39;s functions (due to a compilation error, for example).</li>\n<li>No functions were declared by the library.</li>\n</ul>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n<h2>Examples</h2>\n<p>The following example will create a library named <code>mylib</code> with a single function, <code>myfunc</code>, that returns the first argument it gets.</p>\n<pre><code>127.0.0.1:6379&gt; FUNCTION LOAD &quot;#!lua name=mylib \\n server.register_function(&#39;myfunc&#39;, function(keys, args) return args[1] end)&quot;\nmylib\n127.0.0.1:6379&gt; FCALL myfunc 0 hello\n&quot;hello&quot;\n</code></pre>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-restore",
    "command": "FUNCTION RESTORE",
    "description": "Restores all libraries from a payload.",
    "htmlContent": "<p>Restore libraries from the serialized payload.</p>\n<p>You can use the optional <em>policy</em> argument to provide a policy for handling existing libraries.\nThe following policies are allowed:</p>\n<ul>\n<li><strong>APPEND:</strong> appends the restored libraries to the existing libraries and aborts on collision. \nThis is the default policy.</li>\n<li><strong>FLUSH:</strong> deletes all existing libraries before restoring the payload.</li>\n<li><strong>REPLACE:</strong> appends the restored libraries to the existing libraries, replacing any existing ones in case of name collisions. Note that this policy doesn&#39;t prevent function name collisions, only libraries.</li>\n</ul>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-function-stats",
    "command": "FUNCTION STATS",
    "description": "Returns information about a function during execution.",
    "htmlContent": "<p>Return information about the function that&#39;s currently running and information about the available execution engines.</p>\n<p>The reply is map with two keys:</p>\n<ol>\n<li><code>running_script</code>: information about the running script.\n  If there&#39;s no in-flight function, the server replies with a <em>nil</em>.\n  Otherwise, this is a map with the following keys:</li>\n</ol>\n<ul>\n<li><strong>name:</strong> the name of the function.</li>\n<li><strong>command:</strong> the command and arguments used for invoking the function.</li>\n<li><strong>duration_ms:</strong> the function&#39;s runtime duration in milliseconds.</li>\n</ul>\n<ol start=\"2\">\n<li><code>engines</code>: this is a map of maps. Each entry in the map represent a single engine.\nEngine map contains statistics about the engine like number of functions and number of libraries.</li>\n</ol>\n<p>You can use this command to inspect the invocation of a long-running function and decide whether kill it with the <code>FUNCTION KILL</code> command.</p>\n<p>For more information please refer to <a href=\"../topics/functions-intro\">Introduction to Valkey Functions</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-geoadd",
    "command": "GEOADD",
    "description": "Adds one or more members to a geospatial index. The key is created if it doesn't exist.",
    "htmlContent": "<p>Adds the specified geospatial items (longitude, latitude, name) to the specified key. Data is stored into the key as a sorted set, in a way that makes it possible to query the items with the <code>GEOSEARCH</code> command.</p>\n<p>The command takes arguments in the standard format x,y so the longitude must be specified before the latitude. There are limits to the coordinates that can be indexed: areas very near to the poles are not indexable.</p>\n<p>The exact limits, as specified by EPSG:900913 / EPSG:3785 / OSGEO:41001 are the following:</p>\n<ul>\n<li>Valid longitudes are from -180 to 180 degrees.</li>\n<li>Valid latitudes are from -85.05112878 to 85.05112878 degrees.</li>\n</ul>\n<p>The command will report an error when the user attempts to index coordinates outside the specified ranges.</p>\n<p><strong>Note:</strong> there is no <strong>GEODEL</strong> command because you can use <code>ZREM</code> to remove elements. The Geo index structure is just a sorted set.</p>\n<h2>GEOADD options</h2>\n<p><code>GEOADD</code> also provides the following options:</p>\n<ul>\n<li><strong>XX</strong>: Only update elements that already exist. Never add elements.</li>\n<li><strong>NX</strong>: Don&#39;t update already existing elements. Always add new elements.</li>\n<li><strong>CH</strong>: Modify the return value from the number of new elements added, to the total number of elements changed (CH is an abbreviation of <em>changed</em>). Changed elements are <strong>new elements added</strong> and elements already existing for which <strong>the coordinates was updated</strong>. So elements specified in the command line having the same score as they had in the past are not counted. Note: normally, the return value of <code>GEOADD</code> only counts the number of new elements added.</li>\n</ul>\n<p>Note: The <strong>XX</strong> and <strong>NX</strong> options are mutually exclusive.</p>\n<h2>How does it work?</h2>\n<p>The way the sorted set is populated is using a technique called\n<a href=\"https://en.wikipedia.org/wiki/Geohash\">Geohash</a>. Latitude and Longitude\nbits are interleaved to form a unique 52-bit integer. We know\nthat a sorted set double score can represent a 52-bit integer without losing\nprecision.</p>\n<p>This format allows for bounding box and radius querying by checking the 1+8 areas needed to cover the whole shape and discarding elements outside it. The areas are checked by calculating the range of the box covered, removing enough bits from the less significant part of the sorted set score, and computing the score range to query in the sorted set for each area.</p>\n<h2>What Earth model does it use?</h2>\n<p>The model assumes that the Earth is a sphere since it uses the Haversine formula to calculate distance. This formula is only an approximation when applied to the Earth, which is not a perfect sphere.\nThe introduced errors are not an issue when used, for example, by social networks and similar applications requiring this type of querying. \nHowever, in the worst case, the error may be up to 0.5%, so you may want to consider other systems for error-critical applications.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania\n&quot;166274.1516&quot;\n127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 100 km\n1) &quot;Catania&quot;\n127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km\n1) &quot;Palermo&quot;\n2) &quot;Catania&quot;\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-geodist",
    "command": "GEODIST",
    "description": "Returns the distance between two members of a geospatial index.",
    "htmlContent": "<p>Return the distance between two members in the geospatial index represented by the sorted set.</p>\n<p>Given a sorted set representing a geospatial index, populated using the <code>GEOADD</code> command, the command returns the distance between the two specified members in the specified unit.</p>\n<p>If one or both the members are missing, the command returns NULL.</p>\n<p>The unit must be one of the following, and defaults to meters:</p>\n<ul>\n<li><strong>m</strong> for meters.</li>\n<li><strong>km</strong> for kilometers.</li>\n<li><strong>mi</strong> for miles.</li>\n<li><strong>ft</strong> for feet.</li>\n</ul>\n<p>The distance is computed assuming that the Earth is a perfect sphere, so errors up to 0.5% are possible in edge cases.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania\n&quot;166274.1516&quot;\n127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania km\n&quot;166.2742&quot;\n127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania mi\n&quot;103.3182&quot;\n127.0.0.1:6379&gt; GEODIST Sicily Foo Bar\n(nil)\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-geohash",
    "command": "GEOHASH",
    "description": "Returns members from a geospatial index as geohash strings.",
    "htmlContent": "<p>Return valid <a href=\"https://en.wikipedia.org/wiki/Geohash\">Geohash</a> strings representing the position of one or more elements in a sorted set value representing a geospatial index (where elements were added using <code>GEOADD</code>).</p>\n<p>Normally Valkey represents positions of elements using a variation of the Geohash\ntechnique where positions are encoded using 52 bit integers. The encoding is\nalso different compared to the standard because the initial min and max\ncoordinates used during the encoding and decoding process are different. This\ncommand however <strong>returns a standard Geohash</strong> in the form of a string as\ndescribed in the <a href=\"https://en.wikipedia.org/wiki/Geohash\">Wikipedia article</a> and compatible with the <a href=\"http://geohash.org\">geohash.org</a> web site.</p>\n<h2>Geohash string properties</h2>\n<p>The command returns 11 characters Geohash strings, so no precision is lost\ncompared to the Valkey internal 52 bit representation. The returned Geohashes\nhave the following properties:</p>\n<ol>\n<li>They can be shortened removing characters from the right. It will lose precision but will still point to the same area.</li>\n<li>It is possible to use them in <code>geohash.org</code> URLs such as <code>http://geohash.org/&lt;geohash-string&gt;</code>. This is an <a href=\"http://geohash.org/sqdtr74hyu0\">example of such URL</a>.</li>\n<li>Strings with a similar prefix are nearby, but the contrary is not true, it is possible that strings with different prefixes are nearby too.</li>\n</ol>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEOHASH Sicily Palermo Catania\n1) &quot;sqc8b49rny0&quot;\n2) &quot;sqdtr74hyu0&quot;\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-geopos",
    "command": "GEOPOS",
    "description": "Returns the longitude and latitude of members from a geospatial index.",
    "htmlContent": "<p>Return the positions (longitude,latitude) of all the specified members of the geospatial index represented by the sorted set at <em>key</em>.</p>\n<p>Given a sorted set representing a geospatial index, populated using the <code>GEOADD</code> command, it is often useful to obtain back the coordinates of specified members. When the geospatial index is populated via <code>GEOADD</code> the coordinates are converted into a 52 bit geohash, so the coordinates returned may not be exactly the ones used in order to add the elements, but small errors may be introduced.</p>\n<p>The command can accept a variable number of arguments so it always returns an array of positions even when a single element is specified.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEOPOS Sicily Palermo Catania NonExisting\n1) 1) &quot;13.36138933897018433&quot;\n   2) &quot;38.11555639549629859&quot;\n2) 1) &quot;15.08726745843887329&quot;\n   2) &quot;37.50266842333162032&quot;\n3) (nil)\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-georadius",
    "command": "GEORADIUS",
    "description": "Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.",
    "htmlContent": "<p>Return the members of a sorted set populated with geospatial information using <code>GEOADD</code>, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).</p>\n<p>This manual page also covers the <code>GEORADIUS_RO</code> and <code>GEORADIUSBYMEMBER_RO</code> variants (see the section below for more information).</p>\n<p>The common use case for this command is to retrieve geospatial items near a specified point not farther than a given amount of meters (or other units). This allows, for example, to suggest mobile users of an application nearby places.</p>\n<p>The radius is specified in one of the following units:</p>\n<ul>\n<li><strong>m</strong> for meters.</li>\n<li><strong>km</strong> for kilometers.</li>\n<li><strong>mi</strong> for miles.</li>\n<li><strong>ft</strong> for feet.</li>\n</ul>\n<p>The command optionally returns additional information using the following options:</p>\n<ul>\n<li><code>WITHDIST</code>: Also return the distance of the returned items from the specified center. The distance is returned in the same unit as the unit specified as the radius argument of the command.</li>\n<li><code>WITHCOORD</code>: Also return the longitude,latitude coordinates of the matching items.</li>\n<li><code>WITHHASH</code>: Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user.</li>\n</ul>\n<p>The command default is to return unsorted items. Two different sorting methods can be invoked using the following two options:</p>\n<ul>\n<li><code>ASC</code>: Sort returned items from the nearest to the farthest, relative to the center.</li>\n<li><code>DESC</code>: Sort returned items from the farthest to the nearest, relative to the center.</li>\n</ul>\n<p>By default all the matching items are returned. It is possible to limit the results to the first N matching items by using the <strong>COUNT <code>&lt;count&gt;</code></strong> option.\nWhen <code>ANY</code> is provided the command will return as soon as enough matches are found,\nso the results may not be the ones closest to the specified point, but on the other hand, the effort invested by the server is significantly lower.\nWhen <code>ANY</code> is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them,\nso to query very large areas with a very small <code>COUNT</code> option may be slow even if just a few results are returned.</p>\n<p>By default the command returns the items to the client. It is possible to store the results with one of these options:</p>\n<ul>\n<li><code>!STORE</code>: Store the items in a sorted set populated with their geospatial information.</li>\n<li><code>!STOREDIST</code>: Store the items in a sorted set populated with their distance from the center as a floating point number, in the same unit specified in the radius.</li>\n</ul>\n<h2>Read-only variants</h2>\n<p>Since <code>GEORADIUS</code> and <code>GEORADIUSBYMEMBER</code> have a <code>STORE</code> and <code>STOREDIST</code> option they are technically flagged as writing commands in the Valkey command table. For this reason read-only replicas will flag them, and Valkey Cluster replicas will redirect them to the primary instance even if the connection is in read-only mode (see the <code>READONLY</code> command of Valkey Cluster).</p>\n<p>Two read-only variants of the commands were added. They are exactly like the original commands but refuse the <code>STORE</code> and <code>STOREDIST</code> options. The two variants are called <code>GEORADIUS_RO</code> and <code>GEORADIUSBYMEMBER_RO</code>, and can safely be used in replicas.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHDIST\n1) 1) &quot;Palermo&quot;\n   2) &quot;190.4424&quot;\n2) 1) &quot;Catania&quot;\n   2) &quot;56.4413&quot;\n127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHCOORD\n1) 1) &quot;Palermo&quot;\n   2) 1) &quot;13.36138933897018433&quot;\n      2) &quot;38.11555639549629859&quot;\n2) 1) &quot;Catania&quot;\n   2) 1) &quot;15.08726745843887329&quot;\n      2) &quot;37.50266842333162032&quot;\n127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD\n1) 1) &quot;Palermo&quot;\n   2) &quot;190.4424&quot;\n   3) 1) &quot;13.36138933897018433&quot;\n      2) &quot;38.11555639549629859&quot;\n2) 1) &quot;Catania&quot;\n   2) &quot;56.4413&quot;\n   3) 1) &quot;15.08726745843887329&quot;\n      2) &quot;37.50266842333162032&quot;\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-georadiusbymember",
    "command": "GEORADIUSBYMEMBER",
    "description": "Queries a geospatial index for members within a distance from a member, optionally stores the result.",
    "htmlContent": "<p>This command is exactly like <code>GEORADIUS</code> with the sole difference that instead\nof taking, as the center of the area to query, a longitude and latitude value, it takes the name of a member already existing inside the geospatial index represented by the sorted set.</p>\n<p>The position of the specified member is used as the center of the query.</p>\n<p>Please check the example below and the <code>GEORADIUS</code> documentation for more information about the command and its options.</p>\n<p>Note that <code>GEORADIUSBYMEMBER_RO</code> was added to provide a read-only command that can be used in replicas. See the <code>GEORADIUS</code> page for more information.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.583333 37.316667 &quot;Agrigento&quot;\n(integer) 1\n127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEORADIUSBYMEMBER Sicily Agrigento 100 km\n1) &quot;Agrigento&quot;\n2) &quot;Palermo&quot;\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-georadiusbymember_ro",
    "command": "GEORADIUSBYMEMBER_RO",
    "description": "Returns members from a geospatial index that are within a distance from a member.",
    "htmlContent": "<p>Read-only variant of the <code>GEORADIUSBYMEMBER</code> command.</p>\n<p>This command is identical to the <code>GEORADIUSBYMEMBER</code> command, except that it doesn&#39;t support the optional <code>STORE</code> and <code>STOREDIST</code> parameters.</p>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-georadius_ro",
    "command": "GEORADIUS_RO",
    "description": "Returns members from a geospatial index that are within a distance from a coordinate.",
    "htmlContent": "<p>Read-only variant of the <code>GEORADIUS</code> command.</p>\n<p>This command is identical to the <code>GEORADIUS</code> command, except that it doesn&#39;t support the optional <code>STORE</code> and <code>STOREDIST</code> parameters.</p>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-geosearch",
    "command": "GEOSEARCH",
    "description": "Queries a geospatial index for members inside an area of a box or a circle.",
    "htmlContent": "<p>Return the members of a sorted set populated with geospatial information using <code>GEOADD</code>, which are within the borders of the area specified by a given shape. This command extends the <code>GEORADIUS</code> command, so in addition to searching within circular areas, it supports searching within rectangular areas.</p>\n<p>This command should be used in place of the deprecated <code>GEORADIUS</code> and <code>GEORADIUSBYMEMBER</code> commands.</p>\n<p>The query&#39;s center point is provided by one of these mandatory options:</p>\n<ul>\n<li><code>FROMMEMBER</code>: Use the position of the given existing <code>&lt;member&gt;</code> in the sorted set.</li>\n<li><code>FROMLONLAT</code>: Use the given <code>&lt;longitude&gt;</code> and <code>&lt;latitude&gt;</code> position.</li>\n</ul>\n<p>The query&#39;s shape is provided by one of these mandatory options:</p>\n<ul>\n<li><code>BYRADIUS</code>: Similar to <code>GEORADIUS</code>, search inside circular area according to given <code>&lt;radius&gt;</code>.</li>\n<li><code>BYBOX</code>: Search inside an axis-aligned rectangle, determined by <code>&lt;height&gt;</code> and <code>&lt;width&gt;</code>.</li>\n</ul>\n<p>The command optionally returns additional information using the following options:</p>\n<ul>\n<li><code>WITHDIST</code>: Also return the distance of the returned items from the specified center point. The distance is returned in the same unit as specified for the radius or height and width arguments.</li>\n<li><code>WITHCOORD</code>: Also return the longitude and latitude of the matching items.</li>\n<li><code>WITHHASH</code>: Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user.</li>\n</ul>\n<p>Matching items are returned unsorted by default. To sort them, use one of the following two options:</p>\n<ul>\n<li><code>ASC</code>: Sort returned items from the nearest to the farthest, relative to the center point.</li>\n<li><code>DESC</code>: Sort returned items from the farthest to the nearest, relative to the center point.</li>\n</ul>\n<p>All matching items are returned by default. To limit the results to the first N matching items, use the <strong>COUNT <code>&lt;count&gt;</code></strong> option.\nWhen the <code>ANY</code> option is used, the command returns as soon as enough matches are found.  This means that the results returned may not be the ones closest to the specified point, but the effort invested by the server to generate them is significantly less.\nWhen <code>ANY</code> is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them,\nso to query very large areas with a very small <code>COUNT</code> option may be slow even if just a few results are returned.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEOADD Sicily 12.758489 38.788135 &quot;edge1&quot;   17.241510 38.788135 &quot;edge2&quot; \n(integer) 2\n127.0.0.1:6379&gt; GEOSEARCH Sicily FROMLONLAT 15 37 BYRADIUS 200 km ASC\n1) &quot;Catania&quot;\n2) &quot;Palermo&quot;\n127.0.0.1:6379&gt; GEOSEARCH Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST\n1) 1) &quot;Catania&quot;\n   2) &quot;56.4413&quot;\n   3) 1) &quot;15.08726745843887329&quot;\n      2) &quot;37.50266842333162032&quot;\n2) 1) &quot;Palermo&quot;\n   2) &quot;190.4424&quot;\n   3) 1) &quot;13.36138933897018433&quot;\n      2) &quot;38.11555639549629859&quot;\n3) 1) &quot;edge2&quot;\n   2) &quot;279.7403&quot;\n   3) 1) &quot;17.24151045083999634&quot;\n      2) &quot;38.78813451624225195&quot;\n4) 1) &quot;edge1&quot;\n   2) &quot;279.7405&quot;\n   3) 1) &quot;12.7584877610206604&quot;\n      2) &quot;38.78813451624225195&quot;\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-geosearchstore",
    "command": "GEOSEARCHSTORE",
    "description": "Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.",
    "htmlContent": "<p>This command is like <code>GEOSEARCH</code>, but stores the result in destination key.</p>\n<p>This command replaces the now deprecated <code>GEORADIUS</code> and <code>GEORADIUSBYMEMBER</code>.</p>\n<p>By default, it stores the results in the <code>destination</code> sorted set with their geospatial information.</p>\n<p>When using the <code>STOREDIST</code> option, the command stores the items in a sorted set populated with their distance from the center of the circle or box, as a floating-point number, in the same unit specified for that shape.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;\n(integer) 2\n127.0.0.1:6379&gt; GEOADD Sicily 12.758489 38.788135 &quot;edge1&quot;   17.241510 38.788135 &quot;edge2&quot; \n(integer) 2\n127.0.0.1:6379&gt; GEOSEARCHSTORE key1 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3\n(integer) 3\n127.0.0.1:6379&gt; GEOSEARCH key1 FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST WITHHASH\n1) 1) &quot;Catania&quot;\n   2) &quot;56.4413&quot;\n   3) (integer) 3479447370796909\n   4) 1) &quot;15.08726745843887329&quot;\n      2) &quot;37.50266842333162032&quot;\n2) 1) &quot;Palermo&quot;\n   2) &quot;190.4424&quot;\n   3) (integer) 3479099956230698\n   4) 1) &quot;13.36138933897018433&quot;\n      2) &quot;38.11555639549629859&quot;\n3) 1) &quot;edge2&quot;\n   2) &quot;279.7403&quot;\n   3) (integer) 3481342659049484\n   4) 1) &quot;17.24151045083999634&quot;\n      2) &quot;38.78813451624225195&quot;\n127.0.0.1:6379&gt; GEOSEARCHSTORE key2 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3 STOREDIST\n(integer) 3\n127.0.0.1:6379&gt; ZRANGE key2 0 -1 WITHSCORES\n1) &quot;Catania&quot;\n2) &quot;56.4412578701582&quot;\n3) &quot;Palermo&quot;\n4) &quot;190.44242984775784&quot;\n5) &quot;edge2&quot;\n6) &quot;279.7403417843143&quot;\n</code></pre>\n",
    "categories": [
      "geo"
    ]
  },
  {
    "unid": "cmd-get",
    "command": "GET",
    "description": "Returns the string value of a key.",
    "htmlContent": "<p>Get the value of <code>key</code>.\nIf the key does not exist the special value <code>nil</code> is returned.\nAn error is returned if the value stored at <code>key</code> is not a string, because <code>GET</code>\nonly handles string values.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; GET nonexisting\n(nil)\n127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; GET mykey\n&quot;Hello&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-getbit",
    "command": "GETBIT",
    "description": "Returns a bit value by offset.",
    "htmlContent": "<p>Returns the bit value at <em>offset</em> in the string value stored at <em>key</em>.</p>\n<p>When <em>offset</em> is beyond the string length, the string is assumed to be a\ncontiguous space with 0 bits.\nWhen <em>key</em> does not exist it is assumed to be an empty string, so <em>offset</em> is\nalways out of range and the value is also assumed to be a contiguous space with\n0 bits.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SETBIT mykey 7 1\n(integer) 0\n127.0.0.1:6379&gt; GETBIT mykey 0\n(integer) 0\n127.0.0.1:6379&gt; GETBIT mykey 7\n(integer) 1\n127.0.0.1:6379&gt; GETBIT mykey 100\n(integer) 0\n</code></pre>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-getdel",
    "command": "GETDEL",
    "description": "Returns the string value of a key after deleting the key.",
    "htmlContent": "<p>Get the value of <code>key</code> and delete the key.\nThis command is similar to <code>GET</code>, except for the fact that it also deletes the key on success (if and only if the key&#39;s value type is a string).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; GETDEL mykey\n&quot;Hello&quot;\n127.0.0.1:6379&gt; GET mykey\n(nil)\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-getex",
    "command": "GETEX",
    "description": "Returns the string value of a key after setting its expiration time.",
    "htmlContent": "<p>Get the value of <code>key</code> and optionally set its expiration.\n<code>GETEX</code> is similar to <code>GET</code>, but is a write command with additional options.</p>\n<h2>Options</h2>\n<p>The <code>GETEX</code> command supports a set of options that modify its behavior:</p>\n<ul>\n<li><code>EX</code> <em>seconds</em> -- Set the specified expire time, in seconds.</li>\n<li><code>PX</code> <em>milliseconds</em> -- Set the specified expire time, in milliseconds.</li>\n<li><code>EXAT</code> <em>timestamp-seconds</em> -- Set the specified Unix time at which the key will expire, in seconds.</li>\n<li><code>PXAT</code> <em>timestamp-milliseconds</em> -- Set the specified Unix time at which the key will expire, in milliseconds.</li>\n<li><code>PERSIST</code> -- Remove the time to live associated with the key.</li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; GETEX mykey\n&quot;Hello&quot;\n127.0.0.1:6379&gt; TTL mykey\n(integer) -1\n127.0.0.1:6379&gt; GETEX mykey EX 60\n&quot;Hello&quot;\n127.0.0.1:6379&gt; TTL mykey\n(integer) 60\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-getrange",
    "command": "GETRANGE",
    "description": "Returns a substring of the string stored at a key.",
    "htmlContent": "<p>Returns the substring of the string value stored at <code>key</code>, determined by the\noffsets <code>start</code> and <code>end</code> (both are inclusive).\nNegative offsets can be used in order to provide an offset starting from the end\nof the string.\nSo -1 means the last character, -2 the penultimate and so forth.</p>\n<p>The function handles out of range requests by limiting the resulting range to\nthe actual length of the string.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;This is a string&quot;\nOK\n127.0.0.1:6379&gt; GETRANGE mykey 0 3\n&quot;This&quot;\n127.0.0.1:6379&gt; GETRANGE mykey -3 -1\n&quot;ing&quot;\n127.0.0.1:6379&gt; GETRANGE mykey 0 -1\n&quot;This is a string&quot;\n127.0.0.1:6379&gt; GETRANGE mykey 10 100\n&quot;string&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-getset",
    "command": "GETSET",
    "description": "Returns the previous string value of a key after setting it to a new value.",
    "htmlContent": "<p>Atomically sets <code>key</code> to <code>value</code> and returns the old value stored at <code>key</code>.\nReturns an error when <code>key</code> exists but does not hold a string value.  Any \nprevious time to live associated with the key is discarded on successful \n<code>SET</code> operation.</p>\n<h2>Design pattern</h2>\n<p><code>GETSET</code> can be used together with <code>INCR</code> for counting with atomic reset.\nFor example: a process may call <code>INCR</code> against the key <code>mycounter</code> every time\nsome event occurs, but from time to time we need to get the value of the counter\nand reset it to zero atomically.\nThis can be done using <code>GETSET mycounter &quot;0&quot;</code>:</p>\n<pre><code>127.0.0.1:6379&gt; INCR mycounter\n(integer) 1\n127.0.0.1:6379&gt; GETSET mycounter &quot;0&quot;\n&quot;1&quot;\n127.0.0.1:6379&gt; GET mycounter\n&quot;0&quot;\n</code></pre>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; GETSET mykey &quot;World&quot;\n&quot;Hello&quot;\n127.0.0.1:6379&gt; GET mykey\n&quot;World&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-hdel",
    "command": "HDEL",
    "description": "Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.",
    "htmlContent": "<p>Removes the specified fields from the hash stored at <code>key</code>.\nSpecified fields that do not exist within this hash are ignored.\nIf <code>key</code> does not exist, it is treated as an empty hash and this command returns\n<code>0</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\n(integer) 1\n127.0.0.1:6379&gt; HDEL myhash field1\n(integer) 1\n127.0.0.1:6379&gt; HDEL myhash field2\n(integer) 0\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hello",
    "command": "HELLO",
    "description": "Handshakes with the Valkey server.",
    "htmlContent": "<p>Switch to a different protocol, optionally authenticating and setting the\nconnection&#39;s name, or provide a contextual client report.</p>\n<p>Valkey supports two protocols: RESP2 and RESP3. RESP3 has certain advantages since\nwhen the connection is in this mode, Valkey is able to reply with more semantical\nreplies: for instance, <code>HGETALL</code> will return a <em>map type</em>, so a client library\nimplementation no longer requires to know in advance to translate the array into\na hash before returning it to the caller. For a full coverage of RESP3, please\ncheck the <a href=\"https://github.com/redis/redis-specifications/blob/master/protocol/RESP3\">RESP3 specification</a>.</p>\n<p>Valkey connections start in RESP2 mode, so clients implementing RESP2 do\nnot need to updated or changed. There are no short term plans to drop support for\nRESP2, although future version may default to RESP3.</p>\n<p><code>HELLO</code> always replies with a list of current server and connection properties,\nsuch as: versions, modules loaded, client ID, replication role and so forth.\nThe <code>availability_zone</code> field only shows up when it is set in the configs,\nsee <code>availability-zone</code> config for more details, added in Valkey 8.1.</p>\n<p>When called without any arguments and its default use of RESP2\nprotocol, the reply looks like this:</p>\n<pre><code>&gt; HELLO\n 1) &quot;server&quot;\n 2) &quot;redis&quot;\n 3) &quot;version&quot;\n 4) &quot;255.255.255&quot;\n 5) &quot;proto&quot;\n 6) (integer) 2\n 7) &quot;id&quot;\n 8) (integer) 5\n 9) &quot;mode&quot;\n10) &quot;standalone&quot;\n11) &quot;role&quot;\n12) &quot;master&quot;\n13) &quot;modules&quot;\n14) (empty array)\n15) &quot;availability_zone&quot;\n16) &quot;us-east-1&quot;\n</code></pre>\n<p>Clients that want to handshake using the RESP3 mode need to call the <code>HELLO</code>\ncommand and specify the value &quot;3&quot; as the <code>protover</code> argument, like so:</p>\n<pre><code>&gt; HELLO 3\n1# &quot;server&quot; =&gt; &quot;redis&quot;\n2# &quot;version&quot; =&gt; &quot;7.2.4&quot;\n3# &quot;proto&quot; =&gt; (integer) 3\n4# &quot;id&quot; =&gt; (integer) 10\n5# &quot;mode&quot; =&gt; &quot;standalone&quot;\n6# &quot;role&quot; =&gt; &quot;master&quot;\n7# &quot;modules&quot; =&gt; (empty array)\n8# &quot;availability_zone&quot; =&gt; &quot;us-east-1&quot;\n</code></pre>\n<p>Because <code>HELLO</code> replies with useful information, and given that <code>protover</code> is\noptional or can be set to &quot;2&quot;, client library authors may consider using this\ncommand instead of the canonical <code>PING</code> when setting up the connection.</p>\n<p>When called with the optional <code>protover</code> argument, this command switches the\nprotocol to the specified version and also accepts the following options:</p>\n<ul>\n<li><code>AUTH &lt;username&gt; &lt;password&gt;</code>: directly authenticate the connection in addition to switching to the specified protocol version. This makes calling <code>AUTH</code> before <code>HELLO</code> unnecessary when setting up a new connection. Note that the <code>username</code> can be set to &quot;default&quot; to authenticate against a server that does not use ACLs, but rather the simpler <code>requirepass</code> mechanism.</li>\n<li><code>SETNAME &lt;clientname&gt;</code>: this is the equivalent of calling <code>CLIENT SETNAME</code>.</li>\n</ul>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-hexists",
    "command": "HEXISTS",
    "description": "Determines whether a field exists in a hash.",
    "htmlContent": "<p>Returns if <code>field</code> is an existing field in the hash stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\n(integer) 1\n127.0.0.1:6379&gt; HEXISTS myhash field1\n(integer) 1\n127.0.0.1:6379&gt; HEXISTS myhash field2\n(integer) 0\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hget",
    "command": "HGET",
    "description": "Returns the value of a field in a hash.",
    "htmlContent": "<p>Returns the value associated with <code>field</code> in the hash stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;\n(integer) 1\n127.0.0.1:6379&gt; HGET myhash field1\n&quot;foo&quot;\n127.0.0.1:6379&gt; HGET myhash field2\n(nil)\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hgetall",
    "command": "HGETALL",
    "description": "Returns all fields and values in a hash.",
    "htmlContent": "<p>Returns all fields and values of the hash stored at <code>key</code>.\nIn the returned value, every field name is followed by its value, so the length\nof the reply is twice the size of the hash.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; HGETALL myhash\n1) &quot;field1&quot;\n2) &quot;Hello&quot;\n3) &quot;field2&quot;\n4) &quot;World&quot;\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hincrby",
    "command": "HINCRBY",
    "description": "Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.",
    "htmlContent": "<p>Increments the number stored at <code>field</code> in the hash stored at <code>key</code> by\n<code>increment</code>.\nIf <code>key</code> does not exist, a new key holding a hash is created.\nIf <code>field</code> does not exist the value is set to <code>0</code> before the operation is\nperformed.</p>\n<p>The range of values supported by <code>HINCRBY</code> is limited to 64 bit signed integers.</p>\n<h2>Examples</h2>\n<p>Since the <code>increment</code> argument is signed, both increment and decrement\noperations can be performed:</p>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field 5\n(integer) 1\n127.0.0.1:6379&gt; HINCRBY myhash field 1\n(integer) 6\n127.0.0.1:6379&gt; HINCRBY myhash field -1\n(integer) 5\n127.0.0.1:6379&gt; HINCRBY myhash field -10\n(integer) -5\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hincrbyfloat",
    "command": "HINCRBYFLOAT",
    "description": "Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.",
    "htmlContent": "<p>Increment the specified <code>field</code> of a hash stored at <code>key</code>, and representing a\nfloating point number, by the specified <code>increment</code>. If the increment value\nis negative, the result is to have the hash field value <strong>decremented</strong> instead of incremented.\nIf the field does not exist, it is set to <code>0</code> before performing the operation.\nAn error is returned if one of the following conditions occur:</p>\n<ul>\n<li>The key contains a value of the wrong type (not a hash).</li>\n<li>The current field content or the specified increment are not parsable as a\ndouble precision floating point number.</li>\n</ul>\n<p>The exact behavior of this command is identical to the one of the <code>INCRBYFLOAT</code>\ncommand, please refer to the documentation of <code>INCRBYFLOAT</code> for further\ninformation.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET mykey field 10.50\n(integer) 1\n127.0.0.1:6379&gt; HINCRBYFLOAT mykey field 0.1\n&quot;10.6&quot;\n127.0.0.1:6379&gt; HINCRBYFLOAT mykey field -5\n&quot;5.6&quot;\n127.0.0.1:6379&gt; HSET mykey field 5.0e3\n(integer) 0\n127.0.0.1:6379&gt; HINCRBYFLOAT mykey field 2.0e2\n&quot;5200&quot;\n</code></pre>\n<h2>Implementation details</h2>\n<p>The command is always propagated in the replication link and the Append Only\nFile as a <code>HSET</code> operation, so that differences in the underlying floating point\nmath implementation will not be sources of inconsistency.</p>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hkeys",
    "command": "HKEYS",
    "description": "Returns all fields in a hash.",
    "htmlContent": "<p>Returns all field names in the hash stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; HKEYS myhash\n1) &quot;field1&quot;\n2) &quot;field2&quot;\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hlen",
    "command": "HLEN",
    "description": "Returns the number of fields in a hash.",
    "htmlContent": "<p>Returns the number of fields contained in the hash stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; HLEN myhash\n(integer) 2\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hmget",
    "command": "HMGET",
    "description": "Returns the values of all fields in a hash.",
    "htmlContent": "<p>Returns the values associated with the specified <code>fields</code> in the hash stored at\n<code>key</code>.</p>\n<p>For every <code>field</code> that does not exist in the hash, a <code>nil</code> value is returned.\nBecause non-existing keys are treated as empty hashes, running <code>HMGET</code> against\na non-existing <code>key</code> will return a list of <code>nil</code> values.</p>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; HMGET myhash field1 field2 nofield\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n3) (nil)\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hmset",
    "command": "HMSET",
    "description": "Sets the values of multiple fields.",
    "htmlContent": "<p>Sets the specified fields to their respective values in the hash stored at\n<code>key</code>.\nThis command overwrites any specified fields already existing in the hash.\nIf <code>key</code> does not exist, a new key holding a hash is created.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; HGET myhash field1\n&quot;Hello&quot;\n127.0.0.1:6379&gt; HGET myhash field2\n&quot;World&quot;\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hrandfield",
    "command": "HRANDFIELD",
    "description": "Returns one or more random fields from a hash.",
    "htmlContent": "<p>When called with just the <code>key</code> argument, return a random field from the hash value stored at <code>key</code>.</p>\n<p>If the provided <code>count</code> argument is positive, return an array of <strong>distinct fields</strong>.\nThe array&#39;s length is either <code>count</code> or the hash&#39;s number of fields (<code>HLEN</code>), whichever is lower.</p>\n<p>If called with a negative <code>count</code>, the behavior changes and the command is allowed to return the <strong>same field multiple times</strong>.\nIn this case, the number of returned fields is the absolute value of the specified <code>count</code>.</p>\n<p>The optional <code>WITHVALUES</code> modifier changes the reply so it includes the respective values of the randomly selected hash fields.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET coin heads obverse tails reverse edge null\n(integer) 3\n127.0.0.1:6379&gt; HRANDFIELD coin\n&quot;heads&quot;\n127.0.0.1:6379&gt; HRANDFIELD coin\n&quot;heads&quot;\n127.0.0.1:6379&gt; HRANDFIELD coin -5 WITHVALUES\n 1) &quot;heads&quot;\n 2) &quot;obverse&quot;\n 3) &quot;tails&quot;\n 4) &quot;reverse&quot;\n 5) &quot;edge&quot;\n 6) &quot;null&quot;\n 7) &quot;heads&quot;\n 8) &quot;obverse&quot;\n 9) &quot;edge&quot;\n10) &quot;null&quot;\n</code></pre>\n<h2>Specification of the behavior when count is passed</h2>\n<p>When the <code>count</code> argument is a positive value this command behaves as follows:</p>\n<ul>\n<li>No repeated fields are returned.</li>\n<li>If <code>count</code> is bigger than the number of fields in the hash, the command will only return the whole hash without additional fields.</li>\n<li>The order of fields in the reply is not truly random, so it is up to the client to shuffle them if needed.</li>\n</ul>\n<p>When the <code>count</code> is a negative value, the behavior changes as follows:</p>\n<ul>\n<li>Repeating fields are possible.</li>\n<li>Exactly <code>count</code> fields, or an empty array if the hash is empty (non-existing key), are always returned.</li>\n<li>The order of fields in the reply is truly random.</li>\n</ul>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hscan",
    "command": "HSCAN",
    "description": "Iterates over fields and values of a hash.",
    "htmlContent": "<p>See <code>SCAN</code> for <code>HSCAN</code> documentation.</p>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hset",
    "command": "HSET",
    "description": "Creates or modifies the value of a field in a hash.",
    "htmlContent": "<p>Sets the specified fields to their respective values in the hash stored at <code>key</code>.</p>\n<p>This command overwrites the values of specified fields that exist in the hash.\nIf <code>key</code> doesn&#39;t exist, a new key holding a hash is created.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HGET myhash field1\n&quot;Hello&quot;\n127.0.0.1:6379&gt; HSET myhash field2 &quot;Hi&quot; field3 &quot;World&quot;\n(integer) 2\n127.0.0.1:6379&gt; HGET myhash field2\n&quot;Hi&quot;\n127.0.0.1:6379&gt; HGET myhash field3\n&quot;World&quot;\n127.0.0.1:6379&gt; HGETALL myhash\n1) &quot;field1&quot;\n2) &quot;Hello&quot;\n3) &quot;field2&quot;\n4) &quot;Hi&quot;\n5) &quot;field3&quot;\n6) &quot;World&quot;\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hsetnx",
    "command": "HSETNX",
    "description": "Sets the value of a field in a hash only when the field doesn't exist.",
    "htmlContent": "<p>Sets <code>field</code> in the hash stored at <code>key</code> to <code>value</code>, only if <code>field</code> does not\nyet exist.\nIf <code>key</code> does not exist, a new key holding a hash is created.\nIf <code>field</code> already exists, this operation has no effect.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSETNX myhash field &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HSETNX myhash field &quot;World&quot;\n(integer) 0\n127.0.0.1:6379&gt; HGET myhash field\n&quot;Hello&quot;\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hstrlen",
    "command": "HSTRLEN",
    "description": "Returns the length of the value of a field.",
    "htmlContent": "<p>Returns the string length of the value associated with <code>field</code> in the hash stored at <code>key</code>. If the <code>key</code> or the <code>field</code> do not exist, 0 is returned.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash f1 HelloWorld f2 99 f3 -256\n(integer) 3\n127.0.0.1:6379&gt; HSTRLEN myhash f1\n(integer) 10\n127.0.0.1:6379&gt; HSTRLEN myhash f2\n(integer) 2\n127.0.0.1:6379&gt; HSTRLEN myhash f3\n(integer) 4\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-hvals",
    "command": "HVALS",
    "description": "Returns all values in a hash.",
    "htmlContent": "<p>Returns all values in the hash stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; HVALS myhash\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n</code></pre>\n",
    "categories": [
      "hash"
    ]
  },
  {
    "unid": "cmd-incr",
    "command": "INCR",
    "description": "Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.",
    "htmlContent": "<p>Increments the number stored at <code>key</code> by one.\nIf the key does not exist, it is set to <code>0</code> before performing the operation.\nAn error is returned if the key contains a value of the wrong type or contains a\nstring that can not be represented as integer.\nThis operation is limited to 64 bit signed integers.</p>\n<p><strong>Note</strong>: this is a string operation because Valkey does not have a dedicated\ninteger type.\nThe string stored at the key is interpreted as a base-10 <strong>64 bit signed\ninteger</strong> to execute the operation.</p>\n<p>Valkey stores integers in their integer representation, so for string values\nthat actually hold an integer, there is no overhead for storing the string\nrepresentation of the integer.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;10&quot;\nOK\n127.0.0.1:6379&gt; INCR mykey\n(integer) 11\n127.0.0.1:6379&gt; GET mykey\n&quot;11&quot;\n</code></pre>\n<h2>Pattern: Counter</h2>\n<p>The counter pattern is the most obvious thing you can do with Valkey atomic\nincrement operations.\nThe idea is simply send an <code>INCR</code> command to Valkey every time an operation\noccurs.\nFor instance in a web application we may want to know how many page views this\nuser did every day of the year.</p>\n<p>To do so the web application may simply increment a key every time the user\nperforms a page view, creating the key name concatenating the User ID and a\nstring representing the current date.</p>\n<p>This simple pattern can be extended in many ways:</p>\n<ul>\n<li>It is possible to use <code>INCR</code> and <code>EXPIRE</code> together at every page view to have\na counter counting only the latest N page views separated by less than the\nspecified amount of seconds.</li>\n<li>A client may use GETSET in order to atomically get the current counter value\nand reset it to zero.</li>\n<li>Using other atomic increment/decrement commands like <code>DECR</code> or <code>INCRBY</code> it\nis possible to handle values that may get bigger or smaller depending on the\noperations performed by the user.\nImagine for instance the score of different users in an online game.</li>\n</ul>\n<h2>Pattern: Rate limiter</h2>\n<p>The rate limiter pattern is a special counter that is used to limit the rate at\nwhich an operation can be performed.\nThe classical materialization of this pattern involves limiting the number of\nrequests that can be performed against a public API.</p>\n<p>We provide two implementations of this pattern using <code>INCR</code>, where we assume\nthat the problem to solve is limiting the number of API calls to a maximum of\n<em>ten requests per second per IP address</em>.</p>\n<h2>Pattern: Rate limiter 1</h2>\n<p>The more simple and direct implementation of this pattern is the following:</p>\n<pre><code>FUNCTION LIMIT_API_CALL(ip)\nts = CURRENT_UNIX_TIME()\nkeyname = ip+&quot;:&quot;+ts\nMULTI\n    INCR(keyname)\n    EXPIRE(keyname,10)\nEXEC\ncurrent = RESPONSE_OF_INCR_WITHIN_MULTI\nIF current &gt; 10 THEN\n    ERROR &quot;too many requests per second&quot;\nELSE\n    PERFORM_API_CALL()\nEND\n</code></pre>\n<p>Basically we have a counter for every IP, for every different second.\nBut these counters are always incremented setting an expire of 10 seconds so that\nthey&#39;ll be removed by Valkey automatically when the current second is a different\none.</p>\n<p>Note the used of <code>MULTI</code> and <code>EXEC</code> in order to make sure that we&#39;ll both\nincrement and set the expire at every API call.</p>\n<h2>Pattern: Rate limiter 2</h2>\n<p>An alternative implementation uses a single counter, but is a bit more complex\nto get it right without race conditions.\nWe&#39;ll examine different variants.</p>\n<pre><code>FUNCTION LIMIT_API_CALL(ip):\ncurrent = GET(ip)\nIF current != NULL AND current &gt; 10 THEN\n    ERROR &quot;too many requests per second&quot;\nELSE\n    value = INCR(ip)\n    IF value == 1 THEN\n        EXPIRE(ip,1)\n    END\n    PERFORM_API_CALL()\nEND\n</code></pre>\n<p>The counter is created in a way that it only will survive one second, starting\nfrom the first request performed in the current second.\nIf there are more than 10 requests in the same second the counter will reach a\nvalue greater than 10, otherwise it will expire and start again from 0.</p>\n<p><strong>In the above code there is a race condition</strong>.\nIf for some reason the client performs the <code>INCR</code> command but does not perform\nthe <code>EXPIRE</code> the key will be leaked until we&#39;ll see the same IP address again.</p>\n<p>This can be fixed easily turning the <code>INCR</code> with optional <code>EXPIRE</code> into a Lua\nscript that is send using the <code>EVAL</code> command (only available since Valkey version\n2.6).</p>\n<pre><code>local current\ncurrent = server.call(&quot;incr&quot;,KEYS[1])\nif current == 1 then\n    server.call(&quot;expire&quot;,KEYS[1],1)\nend\n</code></pre>\n<p>There is a different way to fix this issue without using scripting, by using\nLists instead of counters.\nThe implementation is more complex and uses more advanced features but has the\nadvantage of remembering the IP addresses of the clients currently performing an\nAPI call, that may be useful or not depending on the application.</p>\n<pre><code>FUNCTION LIMIT_API_CALL(ip)\ncurrent = LLEN(ip)\nIF current &gt; 10 THEN\n    ERROR &quot;too many requests per second&quot;\nELSE\n    IF EXISTS(ip) == FALSE\n        MULTI\n            RPUSH(ip,ip)\n            EXPIRE(ip,1)\n        EXEC\n    ELSE\n        RPUSHX(ip,ip)\n    END\n    PERFORM_API_CALL()\nEND\n</code></pre>\n<p>The <code>RPUSHX</code> command only pushes the element if the key already exists.</p>\n<p>Note that we have a race here, but it is not a problem: <code>EXISTS</code> may return\nfalse but the key may be created by another client before we create it inside\nthe <code>MULTI</code> / <code>EXEC</code> block.\nHowever this race will just miss an API call under rare conditions, so the rate\nlimiting will still work correctly.</p>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-incrby",
    "command": "INCRBY",
    "description": "Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.",
    "htmlContent": "<p>Increments the number stored at <code>key</code> by <code>increment</code>.\nIf the key does not exist, it is set to <code>0</code> before performing the operation.\nAn error is returned if the key contains a value of the wrong type or contains a\nstring that can not be represented as integer.\nThis operation is limited to 64 bit signed integers.</p>\n<p>See <code>INCR</code> for extra information on increment/decrement operations.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;10&quot;\nOK\n127.0.0.1:6379&gt; INCRBY mykey 5\n(integer) 15\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-incrbyfloat",
    "command": "INCRBYFLOAT",
    "description": "Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.",
    "htmlContent": "<p>Increment the string representing a floating point number stored at <code>key</code> by the\nspecified <code>increment</code>. By using a negative <code>increment</code> value, the result is\nthat the value stored at the key is decremented (by the obvious properties\nof addition).\nIf the key does not exist, it is set to <code>0</code> before performing the operation.\nAn error is returned if one of the following conditions occur:</p>\n<ul>\n<li>The key contains a value of the wrong type (not a string).</li>\n<li>The current key content or the specified increment are not parsable as a\ndouble precision floating point number.</li>\n</ul>\n<p>If the command is successful the new incremented value is stored as the new\nvalue of the key (replacing the old one), and returned to the caller as a\nstring.</p>\n<p>Both the value already contained in the string key and the increment argument\ncan be optionally provided in exponential notation, however the value computed\nafter the increment is stored consistently in the same format, that is, an\ninteger number followed (if needed) by a dot, and a variable number of digits\nrepresenting the decimal part of the number.\nTrailing zeroes are always removed.</p>\n<p>The precision of the output is fixed at 17 digits after the decimal point\nregardless of the actual internal precision of the computation.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey 10.50\nOK\n127.0.0.1:6379&gt; INCRBYFLOAT mykey 0.1\n&quot;10.6&quot;\n127.0.0.1:6379&gt; INCRBYFLOAT mykey -5\n&quot;5.6&quot;\n127.0.0.1:6379&gt; SET mykey 5.0e3\nOK\n127.0.0.1:6379&gt; INCRBYFLOAT mykey 2.0e2\n&quot;5200&quot;\n</code></pre>\n<h2>Implementation details</h2>\n<p>The command is always propagated in the replication link and the Append Only\nFile as a <code>SET</code> operation, so that differences in the underlying floating point\nmath implementation will not be sources of inconsistency.</p>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-info",
    "command": "INFO",
    "description": "Returns information and statistics about the server.",
    "htmlContent": "<p>The <code>INFO</code> command returns information and statistics about the server in a\nformat that is simple to parse by computers and easy to read by humans.</p>\n<p>The optional parameter can be used to select a specific section of information:</p>\n<ul>\n<li><code>server</code>: General information about the Valkey server</li>\n<li><code>clients</code>: Client connections section</li>\n<li><code>memory</code>: Memory consumption related information</li>\n<li><code>persistence</code>: RDB and AOF related information</li>\n<li><code>stats</code>: General statistics</li>\n<li><code>replication</code>: primary/replica replication information</li>\n<li><code>cpu</code>: CPU consumption statistics</li>\n<li><code>commandstats</code>: Valkey command statistics</li>\n<li><code>latencystats</code>: Valkey command latency percentile distribution statistics</li>\n<li><code>sentinel</code>: Valkey Sentinel section (only applicable to Sentinel instances)</li>\n<li><code>cluster</code>: Valkey Cluster section</li>\n<li><code>modules</code>: Modules section</li>\n<li><code>keyspace</code>: Database related statistics</li>\n<li><code>errorstats</code>: Valkey error statistics</li>\n</ul>\n<p>It can also take the following values:</p>\n<ul>\n<li><code>all</code>: Return all sections (excluding module generated ones)</li>\n<li><code>default</code>: Return only the default set of sections</li>\n<li><code>everything</code>: Includes <code>all</code> and <code>modules</code></li>\n</ul>\n<p>When no parameter is provided, the <code>default</code> option is assumed.</p>\n<pre><code>127.0.0.1:6379&gt; INFO\n# Server\nredis_version:7.2.4\nserver_name:valkey\nvalkey_version:255.255.255\nredis_git_sha1:b0d5a0f5\nredis_git_dirty:1\nredis_build_id:1cadaf78f6168f2d\nserver_mode:standalone\nos:Linux 6.1.0-18-amd64 x86_64\narch_bits:64\nmonotonic_clock:POSIX clock_gettime\nmultiplexing_api:epoll\natomicvar_api:c11-builtin\ngcc_version:12.2.0\nprocess_id:982599\nprocess_supervised:no\nrun_id:e0abe2248cad0c6d9cb2445d8e6b73448f567f74\ntcp_port:6379\nserver_time_usec:1714701488527373\nuptime_in_seconds:94798\nuptime_in_days:1\nhz:10\nconfigured_hz:10\nlru_clock:3425456\nexecutable:/home/viktor/repos/valkey/src/./valkey-server\nconfig_file:\nio_threads_active:0\navailability_zone:\nlistener0:name=tcp,bind=*,bind=-::*,port=6379\n\n# Clients\nconnected_clients:1\ncluster_connections:0\nmaxclients:10000\nclient_recent_max_input_buffer:20480\nclient_recent_max_output_buffer:0\nblocked_clients:0\ntracking_clients:0\npubsub_clients:0\nwatching_clients:0\nclients_in_timeout_table:0\ntotal_watched_keys:0\ntotal_blocking_keys:0\ntotal_blocking_keys_on_nokey:0\npaused_reason:none\npaused_actions:none\npaused_timeout_milliseconds:0\n\n# Memory\nused_memory:4757704\nused_memory_human:4.54M\nused_memory_rss:13221888\nused_memory_rss_human:12.61M\nused_memory_peak:4777616\nused_memory_peak_human:4.56M\nused_memory_peak_perc:99.58%\nused_memory_overhead:989344\nused_memory_startup:988648\nused_memory_dataset:3768360\nused_memory_dataset_perc:99.98%\nallocator_allocated:4789624\nallocator_active:5042176\nallocator_resident:9252864\nallocator_muzzy:0\ntotal_system_memory:33280372736\ntotal_system_memory_human:30.99G\nused_memory_lua:31744\nused_memory_vm_eval:31744\nused_memory_lua_human:31.00K\nused_memory_scripts_eval:0\nnumber_of_cached_scripts:0\nnumber_of_functions:0\nnumber_of_libraries:0\nused_memory_vm_functions:33792\nused_memory_vm_total:65536\nused_memory_vm_total_human:64.00K\nused_memory_functions:184\nused_memory_scripts:184\nused_memory_scripts_human:184B\nmaxmemory:0\nmaxmemory_human:0B\nmaxmemory_policy:noeviction\nallocator_frag_ratio:1.05\nallocator_frag_bytes:252552\nallocator_rss_ratio:1.84\nallocator_rss_bytes:4210688\nrss_overhead_ratio:1.43\nrss_overhead_bytes:3969024\nmem_fragmentation_ratio:2.80\nmem_fragmentation_bytes:8504448\nmem_not_counted_for_evict:0\nmem_replication_backlog:0\nmem_total_replication_buffers:0\nmem_clients_slaves:0\nmem_clients_normal:0\nmem_cluster_links:0\nmem_aof_buffer:0\nmem_allocator:jemalloc-5.3.0\nmem_overhead_db_hashtable_rehashing:0\nactive_defrag_running:0\nlazyfree_pending_objects:0\nlazyfreed_objects:0\n\n# Persistence\nloading:0\nasync_loading:0\ncurrent_cow_peak:0\ncurrent_cow_size:0\ncurrent_cow_size_age:0\ncurrent_fork_perc:0.00\ncurrent_save_keys_processed:0\ncurrent_save_keys_total:0\nrdb_changes_since_last_save:0\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1714701488\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:0\nrdb_current_bgsave_time_sec:-1\nrdb_saves:1\nrdb_last_cow_size:229376\nrdb_last_load_keys_expired:0\nrdb_last_load_keys_loaded:0\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\naof_last_bgrewrite_status:ok\naof_rewrites:0\naof_rewrites_consecutive_failures:0\naof_last_write_status:ok\naof_last_cow_size:0\nmodule_fork_in_progress:0\nmodule_fork_last_cow_size:0\n\n# Stats\ntotal_connections_received:3081\ntotal_commands_processed:3080\ninstantaneous_ops_per_sec:91\ntotal_net_input_bytes:134722\ntotal_net_output_bytes:686934\ntotal_net_repl_input_bytes:0\ntotal_net_repl_output_bytes:0\ninstantaneous_input_kbps:4.14\ninstantaneous_output_kbps:1.55\ninstantaneous_input_repl_kbps:0.00\ninstantaneous_output_repl_kbps:0.00\nrejected_connections:0\nsync_full:0\nsync_partial_ok:0\nsync_partial_err:0\nexpired_keys:0\nexpired_stale_perc:0.00\nexpired_time_cap_reached_count:0\nexpire_cycle_cpu_milliseconds:1829\nevicted_keys:0\nevicted_clients:0\nevicted_scripts:0\ntotal_eviction_exceeded_time:0\ncurrent_eviction_exceeded_time:0\nkeyspace_hits:877\nkeyspace_misses:98\npubsub_channels:0\npubsub_patterns:0\npubsubshard_channels:0\nlatest_fork_usec:832\ntotal_forks:5\nmigrate_cached_sockets:0\nslave_expires_tracked_keys:0\nactive_defrag_hits:0\nactive_defrag_misses:0\nactive_defrag_key_hits:0\nactive_defrag_key_misses:0\ntotal_active_defrag_time:0\ncurrent_active_defrag_time:0\ntracking_total_keys:0\ntracking_total_items:0\ntracking_total_prefixes:0\nunexpected_error_replies:0\ntotal_error_replies:55\ndump_payload_sanitizations:0\ntotal_reads_processed:6160\ntotal_writes_processed:3085\nio_threaded_reads_processed:0\nio_threaded_writes_processed:0\nclient_query_buffer_limit_disconnections:0\nclient_output_buffer_limit_disconnections:0\nreply_buffer_shrinks:3\nreply_buffer_expands:0\neventloop_cycles:710861\neventloop_duration_sum:261482066\neventloop_duration_cmd_sum:4662723\ninstantaneous_eventloop_cycles_per_sec:283\ninstantaneous_eventloop_duration_usec:595\nacl_access_denied_auth:0\nacl_access_denied_cmd:0\nacl_access_denied_key:0\nacl_access_denied_channel:0\n\n# Replication\nrole:master\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:488d931b7e08f8e091f674ea64480165971a25f1\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n# CPU\nused_cpu_sys:68.476389\nused_cpu_user:219.408941\nused_cpu_sys_children:0.003157\nused_cpu_user_children:0.008264\nused_cpu_sys_main_thread:68.478353\nused_cpu_user_main_thread:219.404508\n\n# Modules\n\n# Errorstats\nerrorstat_ERR:count=55\n\n# Cluster\ncluster_enabled:0\n\n# Keyspace\n</code></pre>\n<h2>Notes</h2>\n<p>Please note depending on the version of Valkey some of the fields have been\nadded or removed. A robust client application should therefore parse the\nresult of this command by skipping unknown properties, and gracefully handle\nmissing fields.</p>\n<p>Here is the description of fields.</p>\n<p>Here is the meaning of all fields in the <strong>server</strong> section:</p>\n<ul>\n<li><code>redis_version</code>: Redis OSS version this Valkey server is compatible with</li>\n<li><code>valkey_version</code>: Valkey version number (e.g. 7.2.5)</li>\n<li><code>valkey_release_stage</code>: The status of the Valkey version: &quot;ga&quot; for generally available versions; &quot;rc1&quot;, &quot;rc2&quot;, etc. for release candidates; &quot;dev&quot; for development versions. Added in 8.1.</li>\n<li><code>redis_git_sha1</code>:  Git SHA1</li>\n<li><code>redis_git_dirty</code>: Git dirty flag</li>\n<li><code>redis_build_id</code>: The build id</li>\n<li><code>redis_mode</code>: The server&#39;s mode (&quot;standalone&quot;, &quot;sentinel&quot; or &quot;cluster&quot;)</li>\n<li><code>os</code>: Operating system hosting the Valkey server</li>\n<li><code>arch_bits</code>: Architecture (32 or 64 bits)</li>\n<li><code>multiplexing_api</code>: Event loop mechanism used by Valkey</li>\n<li><code>atomicvar_api</code>: Atomicvar API used by Valkey</li>\n<li><code>gcc_version</code>: Version of the GCC compiler used to compile the Valkey server</li>\n<li><code>process_id</code>: PID of the server process</li>\n<li><code>process_supervised</code>: Supervised system (&quot;upstart&quot;, &quot;systemd&quot;, &quot;unknown&quot; or &quot;no&quot;)</li>\n<li><code>run_id</code>: Random value identifying the Valkey server (to be used by Sentinel\n and Cluster)</li>\n<li><code>tcp_port</code>: TCP/IP listen port</li>\n<li><code>server_time_usec</code>: Epoch-based system time with microsecond precision</li>\n<li><code>uptime_in_seconds</code>: Number of seconds since Valkey server start</li>\n<li><code>uptime_in_days</code>: Same value expressed in days</li>\n<li><code>hz</code>: The server&#39;s current frequency setting</li>\n<li><code>configured_hz</code>: The server&#39;s configured frequency setting</li>\n<li><code>clients_hz</code>: Current frequency for client maintenance</li>\n<li><code>lru_clock</code>: Clock incrementing every minute, for LRU management</li>\n<li><code>executable</code>: The path to the server&#39;s executable</li>\n<li><code>config_file</code>: The path to the config file</li>\n<li><code>io_threads_active</code>: Flag indicating if I/O threads are active</li>\n<li><code>availability_zone</code>: Inform Valkey of the Availability zone if running in a cloud environment, see <code>availability-zone</code> config for more details. Added in Valkey 8.0.</li>\n<li><code>shutdown_in_milliseconds</code>: The maximum time remaining for replicas to catch up the replication before completing the shutdown sequence.\nThis field is only present during shutdown.</li>\n</ul>\n<p>Here is the meaning of all fields in the <strong>clients</strong> section:</p>\n<ul>\n<li><code>connected_clients</code>: Number of client connections (excluding connections\n from replicas)</li>\n<li><code>cluster_connections</code>: An approximation of the number of sockets used by the\n cluster&#39;s bus</li>\n<li><code>maxclients</code>: The value of the <code>maxclients</code> configuration directive. This is\nthe upper limit for the sum of <code>connected_clients</code>, <code>connected_slaves</code> and\n<code>cluster_connections</code>.</li>\n<li><code>client_recent_max_input_buffer</code>: Biggest input buffer among current client connections</li>\n<li><code>client_recent_max_output_buffer</code>: Biggest output buffer among current client connections</li>\n<li><code>blocked_clients</code>: Number of clients pending on a blocking call (<code>BLPOP</code>,\n <code>BRPOP</code>, <code>BRPOPLPUSH</code>, <code>BLMOVE</code>, <code>BZPOPMIN</code>, <code>BZPOPMAX</code>)</li>\n<li><code>tracking_clients</code>: Number of clients being tracked (<code>CLIENT TRACKING</code>)</li>\n<li><code>pubsub_clients</code>: Number of clients in pubsub mode (<code>SUBSCRIBE</code>, <code>PSUBSCRIBE</code>, <code>SSUBSCRIBE</code>). Added in Valkey 8.0</li>\n<li><code>watching_clients</code>: Number of clients in watching mode (<code>WATCH</code>). Added in Valkey 8.0</li>\n<li><code>clients_in_timeout_table</code>: Number of clients in the clients timeout table</li>\n<li><code>total_watched_keys</code>: Number of watched keys. Added in Valkey 8.0.</li>\n<li><code>total_blocking_keys</code>: Number of blocking keys.</li>\n<li><code>total_blocking_keys_on_nokey</code>: Number of blocking keys that one or more clients that would like to be unblocked when the key is deleted.</li>\n<li><code>paused_reason</code>: The current paused reason of the instance: &quot;client_pause&quot; means trigger by <code>CLIENT PAUSE</code>,\n&quot;shutdown_in_progress&quot;, &quot;failover_in_progress&quot; and &quot;none&quot; means no clients are paused. Added in Valkey 8.1.</li>\n<li><code>paused_actions</code>: The current paused actions of the instance: &quot;all&quot; means all clients are paused,\n&quot;write&quot; means clients executing write commands are paused,\nand &quot;none&quot; means no clients are paused. Added in Valkey 8.1.</li>\n<li><code>paused_timeout_milliseconds</code>: The remaining time of the paused actions. Added in Valkey 8.1.</li>\n</ul>\n<p>Here is the meaning of all fields in the <strong>memory</strong> section:</p>\n<ul>\n<li><code>used_memory</code>: Total number of bytes allocated by Valkey using its\n allocator (either standard <strong>libc</strong>, <strong>jemalloc</strong>, or an alternative\n allocator such as <a href=\"http://code.google.com/p/google-perftools/\"><strong>tcmalloc</strong></a>)</li>\n<li><code>used_memory_human</code>: Human readable representation of previous value</li>\n<li><code>used_memory_rss</code>: Number of bytes that Valkey allocated as seen by the\n operating system (a.k.a resident set size). This is the number reported by\n tools such as <code>top(1)</code> and <code>ps(1)</code></li>\n<li><code>used_memory_rss_human</code>: Human readable representation of previous value</li>\n<li><code>used_memory_peak</code>: Peak memory consumed by Valkey (in bytes)</li>\n<li><code>used_memory_peak_human</code>: Human readable representation of previous value</li>\n<li><code>used_memory_peak_perc</code>: The percentage of <code>used_memory_peak</code> out of\n <code>used_memory</code></li>\n<li><code>used_memory_overhead</code>: The sum in bytes of all overheads that the server\n allocated for managing its internal data structures</li>\n<li><code>used_memory_startup</code>: Initial amount of memory consumed by Valkey at startup\n in bytes</li>\n<li><code>used_memory_dataset</code>: The size in bytes of the dataset\n (<code>used_memory_overhead</code> subtracted from <code>used_memory</code>)</li>\n<li><code>used_memory_dataset_perc</code>: The percentage of <code>used_memory_dataset</code> out of\n the net memory usage (<code>used_memory</code> minus <code>used_memory_startup</code>)</li>\n<li><code>total_system_memory</code>: The total amount of memory that the Valkey host has</li>\n<li><code>total_system_memory_human</code>: Human readable representation of previous value</li>\n<li><code>used_memory_lua</code>: Number of bytes used by the Lua engine for EVAL scripts. Deprecated, renamed to <code>used_memory_vm_eval</code></li>\n<li><code>used_memory_vm_eval</code>: Number of bytes used by the script VM engines for EVAL framework (not part of used_memory).</li>\n<li><code>used_memory_lua_human</code>: Human readable representation of previous value. Deprecated.</li>\n<li><code>used_memory_scripts_eval</code>: Number of bytes overhead by the EVAL scripts (part of used_memory).</li>\n<li><code>number_of_cached_scripts</code>: The number of EVAL scripts cached by the server.</li>\n<li><code>number_of_functions</code>: The number of functions.</li>\n<li><code>number_of_libraries</code>: The number of libraries.</li>\n<li><code>used_memory_vm_functions</code>: Number of bytes used by the script VM engines for Functions framework (not part of used_memory).</li>\n<li><code>used_memory_vm_total</code>: <code>used_memory_vm_eval</code> + <code>used_memory_vm_functions</code> (not part of used_memory).</li>\n<li><code>used_memory_vm_total_human</code>: Human readable representation of previous value.</li>\n<li><code>used_memory_functions</code>: Number of bytes overhead by Function scripts (part of used_memory).</li>\n<li><code>used_memory_scripts</code>: <code>used_memory_scripts_eval</code> + <code>used_memory_functions</code> (part of used_memory).</li>\n<li><code>used_memory_scripts_human</code>: Human readable representation of previous value</li>\n<li><code>maxmemory</code>: The value of the <code>maxmemory</code> configuration directive</li>\n<li><code>maxmemory_human</code>: Human readable representation of previous value</li>\n<li><code>maxmemory_policy</code>: The value of the <code>maxmemory-policy</code> configuration\n directive</li>\n<li><code>mem_fragmentation_ratio</code>: Ratio between <code>used_memory_rss</code> and <code>used_memory</code>.\nNote that this doesn&#39;t only includes fragmentation, but also other process overheads (see the <code>allocator_*</code> metrics), and also overheads like code, shared libraries, stack, etc.</li>\n<li><code>mem_fragmentation_bytes</code>: Delta between <code>used_memory_rss</code> and <code>used_memory</code>.\nNote that when the total fragmentation bytes is low (few megabytes), a high ratio (e.g. 1.5 and above) is not an indication of an issue.</li>\n<li><code>allocator_frag_ratio:</code>: Ratio between <code>allocator_active</code> and <code>allocator_allocated</code>. This is the true (external) fragmentation metric (not <code>mem_fragmentation_ratio</code>).</li>\n<li><code>allocator_frag_bytes</code> Delta between <code>allocator_active</code> and <code>allocator_allocated</code>. See note about <code>mem_fragmentation_bytes</code>.</li>\n<li><code>allocator_rss_ratio</code>: Ratio between <code>allocator_resident</code> and <code>allocator_active</code>. This usually indicates pages that the allocator can and probably will soon release back to the OS.</li>\n<li><code>allocator_rss_bytes</code>: Delta between <code>allocator_resident</code> and <code>allocator_active</code></li>\n<li><code>rss_overhead_ratio</code>: Ratio between <code>used_memory_rss</code> (the process RSS) and <code>allocator_resident</code>. This includes RSS overheads that are not allocator or heap related.</li>\n<li><code>rss_overhead_bytes</code>: Delta between <code>used_memory_rss</code> (the process RSS) and <code>allocator_resident</code></li>\n<li><code>allocator_allocated</code>: Total bytes allocated form the allocator, including internal-fragmentation. Normally the same as <code>used_memory</code>.</li>\n<li><code>allocator_active</code>: Total bytes in the allocator active pages, this includes external-fragmentation.</li>\n<li><code>allocator_resident</code>: Total bytes resident (RSS) in the allocator, this includes pages that can be released to the OS (by <code>MEMORY PURGE</code>, or just waiting).</li>\n<li><code>allocator_muzzy</code>: Total bytes of &#39;muzzy&#39; memory (RSS) in the allocator. Muzzy memory is memory that has been freed, but not yet fully returned to the operating system. It can be reused immediately when needed or reclaimed by the OS when system pressure increases.</li>\n<li><code>mem_not_counted_for_evict</code>: Used memory that&#39;s not counted for key eviction. This is basically transient replica and AOF buffers.</li>\n<li><code>mem_clients_slaves</code>: Memory used by replica clients - Replica buffers share memory with the replication backlog, so this field can show 0 when replicas don&#39;t trigger an increase of memory usage.</li>\n<li><code>mem_clients_normal</code>: Memory used by normal clients</li>\n<li><code>mem_cluster_links</code>: Memory used by links to peers on the cluster bus when cluster mode is enabled.</li>\n<li><code>mem_aof_buffer</code>: Transient memory used for AOF and AOF rewrite buffers</li>\n<li><code>mem_replication_backlog</code>: Memory used by replication backlog</li>\n<li><code>mem_total_replication_buffers</code>: Total memory consumed for replication buffers.</li>\n<li><code>mem_allocator</code>: Memory allocator, chosen at compile time.</li>\n<li><code>mem_overhead_db_hashtable_rehashing</code>: Temporary memory overhead of database dictionaries currently being rehashed - Added in 8.0.</li>\n<li><code>active_defrag_running</code>: When <code>activedefrag</code> is enabled, this indicates whether defragmentation is currently active, and the CPU percentage it intends to utilize.</li>\n<li><code>lazyfree_pending_objects</code>: The number of objects waiting to be freed (as a\n result of calling <code>UNLINK</code>, or <code>FLUSHDB</code> and <code>FLUSHALL</code> with the <strong>ASYNC</strong>\n option)</li>\n<li><code>lazyfreed_objects</code>: The number of objects that have been lazy freed.</li>\n</ul>\n<p>Ideally, the <code>used_memory_rss</code> value should be only slightly higher than\n<code>used_memory</code>.\nWhen rss &gt;&gt; used, a large difference may mean there is (external) memory fragmentation, which can be evaluated by checking\n<code>allocator_frag_ratio</code>, <code>allocator_frag_bytes</code>.\nWhen used &gt;&gt; rss, it means part of Valkey memory has been swapped off by the\noperating system: expect some significant latencies.</p>\n<p>Because Valkey does not have control over how its allocations are mapped to\nmemory pages, high <code>used_memory_rss</code> is often the result of a spike in memory\nusage.</p>\n<p>When Valkey frees memory, the memory is given back to the allocator, and the\nallocator may or may not give the memory back to the system. There may be\na discrepancy between the <code>used_memory</code> value and memory consumption as\nreported by the operating system. It may be due to the fact memory has been\nused and released by Valkey, but not given back to the system. The\n<code>used_memory_peak</code> value is generally useful to check this point.</p>\n<p>Additional introspective information about the server&#39;s memory can be obtained\nby referring to the <code>MEMORY STATS</code> command and the <code>MEMORY DOCTOR</code>.</p>\n<p>Here is the meaning of all fields in the <strong>persistence</strong> section:</p>\n<ul>\n<li><code>loading</code>: Flag indicating if the load of a dump file is on-going</li>\n<li><code>async_loading</code>: Currently loading replication data-set asynchronously while serving old data. This means <code>repl-diskless-load</code> is enabled and set to <code>swapdb</code>.</li>\n<li><code>current_cow_peak</code>: The peak size in bytes of copy-on-write memory\n while a child fork is running</li>\n<li><code>current_cow_size</code>: The size in bytes of copy-on-write memory\n while a child fork is running</li>\n<li><code>current_cow_size_age</code>: The age, in seconds, of the <code>current_cow_size</code> value.</li>\n<li><code>current_fork_perc</code>: The percentage of progress of the current fork process. For AOF and RDB forks it is the percentage of <code>current_save_keys_processed</code> out of <code>current_save_keys_total</code>.</li>\n<li><code>current_save_keys_processed</code>: Number of keys processed by the current save operation</li>\n<li><code>current_save_keys_total</code>: Number of keys at the beginning of the current save operation</li>\n<li><code>rdb_changes_since_last_save</code>: Number of changes since the last RDB file save</li>\n<li><code>rdb_bgsave_in_progress</code>: Flag indicating a RDB save is on-going, including a diskless replication RDB save</li>\n<li><code>rdb_last_save_time</code>: Epoch-based timestamp of last successful RDB file save</li>\n<li><code>rdb_last_bgsave_status</code>: Status of the last RDB file save operation</li>\n<li><code>rdb_last_bgsave_time_sec</code>: Duration of the last RDB save operation in seconds, including a diskless replication RDB save</li>\n<li><code>rdb_current_bgsave_time_sec</code>: Duration of the on-going RDB save operation if any, including a diskless replication RDB save</li>\n<li><code>rdb_last_cow_size</code>: The size in bytes of copy-on-write memory during\n the last RDB save operation</li>\n<li><code>rdb_last_load_keys_expired</code>: Number of volatile keys deleted during the last RDB loading.</li>\n<li><code>rdb_last_load_keys_loaded</code>: Number of keys loaded during the last RDB loading.</li>\n<li><code>aof_enabled</code>: Flag indicating AOF logging is activated</li>\n<li><code>aof_rewrite_in_progress</code>: Flag indicating a AOF rewrite operation is\n on-going</li>\n<li><code>aof_rewrite_scheduled</code>: Flag indicating an AOF rewrite operation\n will be scheduled once the on-going RDB save is complete.</li>\n<li><code>aof_last_rewrite_time_sec</code>: Duration of the last AOF rewrite operation in\n seconds</li>\n<li><code>aof_current_rewrite_time_sec</code>: Duration of the on-going AOF rewrite\n operation if any</li>\n<li><code>aof_last_bgrewrite_status</code>: Status of the last AOF rewrite operation</li>\n<li><code>aof_last_write_status</code>: Status of the last write operation to the AOF</li>\n<li><code>aof_last_cow_size</code>: The size in bytes of copy-on-write memory during\n the last AOF rewrite operation</li>\n<li><code>module_fork_in_progress</code>: Flag indicating a module fork is on-going</li>\n<li><code>module_fork_last_cow_size</code>: The size in bytes of copy-on-write memory\n during the last module fork operation</li>\n<li><code>aof_rewrites</code>: Number of AOF rewrites performed since startup</li>\n<li><code>rdb_saves</code>: Number of RDB snapshots performed since startup</li>\n</ul>\n<p><code>rdb_changes_since_last_save</code> refers to the number of operations that produced\nsome kind of changes in the dataset since the last time either <code>SAVE</code> or\n<code>BGSAVE</code> was called.</p>\n<p>If AOF is activated, these additional fields will be added:</p>\n<ul>\n<li><code>aof_current_size</code>: AOF current file size</li>\n<li><code>aof_base_size</code>: AOF file size on latest startup or rewrite</li>\n<li><code>aof_pending_rewrite</code>: Flag indicating an AOF rewrite operation\n will be scheduled once the on-going RDB save is complete.</li>\n<li><code>aof_buffer_length</code>: Size of the AOF buffer</li>\n<li><code>aof_pending_bio_fsync</code>: Number of fsync pending jobs in background I/O\n queue</li>\n<li><code>aof_delayed_fsync</code>: Delayed fsync counter</li>\n</ul>\n<p>If a load operation is on-going, these additional fields will be added:</p>\n<ul>\n<li><code>loading_start_time</code>: Epoch-based timestamp of the start of the load\n operation</li>\n<li><code>loading_total_bytes</code>: Total file size</li>\n<li><code>loading_rdb_used_mem</code>: The memory usage of the server that had generated\nthe RDB file at the time of the file&#39;s creation</li>\n<li><code>loading_loaded_bytes</code>: Number of bytes already loaded</li>\n<li><code>loading_loaded_perc</code>: Same value expressed as a percentage</li>\n<li><code>loading_eta_seconds</code>: ETA in seconds for the load to be complete</li>\n</ul>\n<p>Here is the meaning of all fields in the <strong>stats</strong> section:</p>\n<ul>\n<li><code>total_connections_received</code>: Total number of connections accepted by the\n server</li>\n<li><code>total_commands_processed</code>: Total number of commands processed by the server</li>\n<li><code>instantaneous_ops_per_sec</code>: Number of commands processed per second</li>\n<li><code>total_net_input_bytes</code>: The total number of bytes read from the network</li>\n<li><code>total_net_output_bytes</code>: The total number of bytes written to the network</li>\n<li><code>total_net_repl_input_bytes</code>: The total number of bytes read from the network for replication purposes</li>\n<li><code>total_net_repl_output_bytes</code>: The total number of bytes written to the network for replication purposes</li>\n<li><code>instantaneous_input_kbps</code>: The network&#39;s read rate per second in KB/sec</li>\n<li><code>instantaneous_output_kbps</code>: The network&#39;s write rate per second in KB/sec</li>\n<li><code>instantaneous_input_repl_kbps</code>: The network&#39;s read rate per second in KB/sec for replication purposes</li>\n<li><code>instantaneous_output_repl_kbps</code>: The network&#39;s write rate per second in KB/sec for replication purposes</li>\n<li><code>rejected_connections</code>: Number of connections rejected because of\n <code>maxclients</code> limit</li>\n<li><code>sync_full</code>: The number of full resyncs with replicas</li>\n<li><code>sync_partial_ok</code>: The number of accepted partial resync requests</li>\n<li><code>sync_partial_err</code>: The number of denied partial resync requests</li>\n<li><code>expired_keys</code>: Total number of key expiration events</li>\n<li><code>expired_stale_perc</code>: The percentage of keys probably expired</li>\n<li><code>expired_time_cap_reached_count</code>: The count of times that active expiry cycles have stopped early</li>\n<li><code>expire_cycle_cpu_milliseconds</code>: The cumulative amount of time spent on active expiry cycles</li>\n<li><code>evicted_keys</code>: Number of evicted keys due to <code>maxmemory</code> limit</li>\n<li><code>evicted_clients</code>: Number of evicted clients due to <code>maxmemory-clients</code> limit.</li>\n<li><code>evicted_scripts</code>: Number of evicted EVAL scripts due to LRU policy, see <code>EVAL</code> for more details. Added in Valkey 8.0.</li>\n<li><code>total_eviction_exceeded_time</code>:  Total time <code>used_memory</code> was greater than <code>maxmemory</code> since server startup, in milliseconds</li>\n<li><code>current_eviction_exceeded_time</code>: The time passed since <code>used_memory</code> last rose above <code>maxmemory</code>, in milliseconds</li>\n<li><code>keyspace_hits</code>: Number of successful lookup of keys in the main dictionary</li>\n<li><code>keyspace_misses</code>: Number of failed lookup of keys in the main dictionary</li>\n<li><code>pubsub_channels</code>: Global number of pub/sub channels with client\n subscriptions</li>\n<li><code>pubsub_patterns</code>: Global number of pub/sub pattern with client\n subscriptions</li>\n<li><code>pubsubshard_channels</code>: Global number of pub/sub shard channels with client subscriptions.</li>\n<li><code>latest_fork_usec</code>: Duration of the latest fork operation in microseconds</li>\n<li><code>total_forks</code>: Total number of fork operations since the server start</li>\n<li><code>migrate_cached_sockets</code>: The number of sockets open for <code>MIGRATE</code> purposes</li>\n<li><code>slave_expires_tracked_keys</code>: The number of keys tracked for expiry purposes\n (applicable only to writable replicas)</li>\n<li><code>active_defrag_hits</code>: Number of value reallocations performed by active the\n defragmentation process</li>\n<li><code>active_defrag_misses</code>: Number of aborted value reallocations started by the\n active defragmentation process</li>\n<li><code>active_defrag_key_hits</code>: Number of keys that were actively defragmented</li>\n<li><code>active_defrag_key_misses</code>: Number of keys that were skipped by the active\n defragmentation process</li>\n<li><code>total_active_defrag_time</code>: Total time memory fragmentation was over the limit, in milliseconds</li>\n<li><code>current_active_defrag_time</code>: The time passed since memory fragmentation last was over the limit, in milliseconds</li>\n<li><code>tracking_total_keys</code>: Number of keys being tracked by the server</li>\n<li><code>tracking_total_items</code>: Number of items, that is the sum of clients number for\n each key, that are being tracked</li>\n<li><code>tracking_total_prefixes</code>: Number of tracked prefixes in server&#39;s prefix table\n(only applicable for broadcast mode)</li>\n<li><code>unexpected_error_replies</code>: Number of unexpected error replies, that are types\nof errors from an AOF load or replication</li>\n<li><code>total_error_replies</code>: Total number of issued error replies, that is the sum of\nrejected commands (errors prior command execution) and\nfailed commands (errors within the command execution)</li>\n<li><code>dump_payload_sanitizations</code>: Total number of dump payload deep integrity validations (see <code>sanitize-dump-payload</code> config).</li>\n<li><code>total_reads_processed</code>: Total number of read events processed</li>\n<li><code>total_writes_processed</code>: Total number of write events processed</li>\n<li><code>io_threaded_reads_processed</code>: Number of read events processed by the I/O threads.</li>\n<li><code>io_threaded_writes_processed</code>: Number of write events processed by the I/O threads.</li>\n<li><code>io_threaded_total_prefetch_batches</code>: Indicate how many prefetch batches were executed in order to prefetch keys before executing commands.</li>\n<li><code>io_threaded_total_prefetch_entries</code>: The total number of dict entries that were prefetched. Each batch can contain multiple entries, the ratio entries/batches indicates how many entries were prefetched per batch on average.</li>\n<li><code>io_threaded_poll_processed</code>: Total poll system calls performed by the I/O threads.</li>\n<li><code>io_threaded_freed_objects</code>: The total number of objects freed by the I/O threads.</li>\n<li><code>client_query_buffer_limit_disconnections</code>: Total number of disconnections due to client reaching query buffer limit</li>\n<li><code>client_output_buffer_limit_disconnections</code>: Total number of disconnections due to client reaching output buffer limit</li>\n<li><code>reply_buffer_shrinks</code>: Total number of output buffer shrinks</li>\n<li><code>reply_buffer_expands</code>: Total number of output buffer expands</li>\n<li><code>eventloop_cycles</code>: Total number of eventloop cycles</li>\n<li><code>eventloop_duration_sum</code>: Total time spent in the eventloop in microseconds (including I/O and command processing)</li>\n<li><code>eventloop_duration_cmd_sum</code>: Total time spent on executing commands in microseconds</li>\n<li><code>instantaneous_eventloop_cycles_per_sec</code>: Number of eventloop cycles per second</li>\n<li><code>instantaneous_eventloop_duration_usec</code>: Average time spent in a single eventloop cycle in microseconds</li>\n<li><code>acl_access_denied_auth</code>: Number of authentication failures</li>\n<li><code>acl_access_denied_cmd</code>: Number of commands rejected because of access denied to the command</li>\n<li><code>acl_access_denied_key</code>: Number of commands rejected because of access denied to a key</li>\n<li><code>acl_access_denied_channel</code>: Number of commands rejected because of access denied to a channel</li>\n</ul>\n<p>Here is the meaning of all fields in the <strong>replication</strong> section:</p>\n<ul>\n<li><code>role</code>: Value is &quot;master&quot; if the instance is replica of no one, or &quot;slave&quot; if the instance is a replica of some primary instance.\n Note that a replica can be primary of another replica (chained replication).</li>\n<li><code>master_failover_state</code>: The state of an ongoing failover, if any.</li>\n<li><code>master_replid</code>: The replication ID of the Valkey server.</li>\n<li><code>master_replid2</code>: The secondary replication ID, used for PSYNC after a failover.</li>\n<li><code>master_repl_offset</code>: The server&#39;s current replication offset</li>\n<li><code>second_repl_offset</code>: The offset up to which replication IDs are accepted</li>\n<li><code>repl_backlog_active</code>: Flag indicating replication backlog is active</li>\n<li><code>repl_backlog_size</code>: Total size in bytes of the replication backlog buffer</li>\n<li><code>repl_backlog_first_byte_offset</code>: The primary offset of the replication\n backlog buffer</li>\n<li><code>repl_backlog_histlen</code>: Size in bytes of the data in the replication backlog\n buffer</li>\n</ul>\n<p>If the instance is a replica, these additional fields are provided:</p>\n<ul>\n<li><code>master_host</code>: Host or IP address of the primary</li>\n<li><code>master_port</code>: Primary listening TCP port</li>\n<li><code>master_link_status</code>: Status of the link (up/down)</li>\n<li><code>master_last_io_seconds_ago</code>: Number of seconds since the last interaction\n with primary</li>\n<li><code>master_sync_in_progress</code>: Indicate the primary is syncing to the replica</li>\n<li><code>slave_read_repl_offset</code>: The read replication offset of the replica instance.</li>\n<li><code>slave_repl_offset</code>: The replication offset of the replica instance</li>\n<li><code>slave_priority</code>: The priority of the instance as a candidate for failover</li>\n<li><code>slave_read_only</code>: Flag indicating if the replica is read-only</li>\n<li><code>replica_announced</code>: Flag indicating if the replica is announced by Sentinel.</li>\n</ul>\n<p>If a SYNC operation is on-going, these additional fields are provided:</p>\n<ul>\n<li><code>master_sync_total_bytes</code>: Total number of bytes that need to be\ntransferred. this may be 0 when the size is unknown (for example, when\nthe <code>repl-diskless-sync</code> configuration directive is used)</li>\n<li><code>master_sync_read_bytes</code>: Number of bytes already transferred</li>\n<li><code>master_sync_left_bytes</code>: Number of bytes left before syncing is complete\n(may be negative when <code>master_sync_total_bytes</code> is 0)</li>\n<li><code>master_sync_perc</code>: The percentage <code>master_sync_read_bytes</code> from\n<code>master_sync_total_bytes</code>, or an approximation that uses\n<code>loading_rdb_used_mem</code> when <code>master_sync_total_bytes</code> is 0</li>\n<li><code>master_sync_last_io_seconds_ago</code>: Number of seconds since last transfer I/O\n during a SYNC operation</li>\n</ul>\n<p>If the link between primary and replica is down, an additional field is provided:</p>\n<ul>\n<li><code>master_link_down_since_seconds</code>: Number of seconds since the link is down</li>\n</ul>\n<p>The following field is always provided:</p>\n<ul>\n<li><code>connected_slaves</code>: Number of connected replicas</li>\n</ul>\n<p>If the server is configured with the <code>min-replicas-to-write</code> directive, an additional field is provided:</p>\n<ul>\n<li><code>min_slaves_good_slaves</code>: Number of replicas currently considered good</li>\n</ul>\n<p>For each replica, the following line is added:</p>\n<ul>\n<li><code>slaveXXX</code>: id, IP address, port, state, offset, lag</li>\n</ul>\n<p>Here is the meaning of all fields in the <strong>cpu</strong> section:</p>\n<ul>\n<li><code>used_cpu_sys</code>: System CPU consumed by the Valkey server, which is the sum of system CPU consumed by all threads of the server process (main thread and background threads)</li>\n<li><code>used_cpu_user</code>: User CPU consumed by the Valkey server, which is the sum of user CPU consumed by all threads of the server process (main thread and background threads)</li>\n<li><code>used_cpu_sys_children</code>: System CPU consumed by the background processes</li>\n<li><code>used_cpu_user_children</code>: User CPU consumed by the background processes</li>\n<li><code>used_cpu_sys_main_thread</code>: System CPU consumed by the Valkey server main thread</li>\n<li><code>used_cpu_user_main_thread</code>: User CPU consumed by the Valkey server main thread</li>\n</ul>\n<p>The <strong>commandstats</strong> section provides statistics based on the command type,\n including the number of calls that reached command execution (not rejected),\n the total CPU time consumed by these commands, the average CPU consumed\n per command execution, the number of rejected calls\n (errors prior command execution), and the number of failed calls\n (errors within the command execution).</p>\n<p>For each command type, the following line is added:</p>\n<ul>\n<li><code>cmdstat_XXX</code>: <code>calls=XXX,usec=XXX,usec_per_call=XXX,rejected_calls=XXX,failed_calls=XXX</code></li>\n</ul>\n<p>The <strong>latencystats</strong> section provides latency percentile distribution statistics based on the command type.</p>\n<p> By default, the exported latency percentiles are the p50, p99, and p999.\n If you need to change the exported percentiles, use <code>CONFIG SET latency-tracking-info-percentiles &quot;50.0 99.0 99.9&quot;</code>.</p>\n<p> This section requires the extended latency monitoring feature to be enabled (by default it&#39;s enabled).\n If you need to enable it, use <code>CONFIG SET latency-tracking yes</code>.</p>\n<p>For each command type, the following line is added:</p>\n<ul>\n<li><code>latency_percentiles_usec_XXX: p&lt;percentile 1&gt;=&lt;percentile 1 value&gt;,p&lt;percentile 2&gt;=&lt;percentile 2 value&gt;,...</code></li>\n</ul>\n<p>The <strong>errorstats</strong> section enables keeping track of the different errors that occurred within Valkey,\n based upon the reply error prefix ( The first word after the &quot;-&quot;, up to the first space. Example: <code>ERR</code> ).</p>\n<p>For each error type, the following line is added:</p>\n<ul>\n<li><code>errorstat_XXX</code>: <code>count=XXX</code></li>\n</ul>\n<p>The <strong>sentinel</strong> section is only available in Valkey Sentinel instances. It consists of the following fields:</p>\n<ul>\n<li><code>sentinel_masters</code>: Number of Valkey primaries monitored by this Sentinel instance</li>\n<li><code>sentinel_tilt</code>: A value of 1 means this sentinel is in TILT mode</li>\n<li><code>sentinel_tilt_since_seconds</code>: Duration in seconds of current TILT, or -1 if not TILTed.</li>\n<li><code>sentinel_running_scripts</code>: The number of scripts this Sentinel is currently executing</li>\n<li><code>sentinel_scripts_queue_length</code>: The length of the queue of user scripts that are pending execution</li>\n<li><code>sentinel_simulate_failure_flags</code>: Flags for the <code>SENTINEL SIMULATE-FAILURE</code> command</li>\n</ul>\n<p>The <strong>cluster</strong> section currently only contains a unique field:</p>\n<ul>\n<li><code>cluster_enabled</code>: Indicate Valkey cluster is enabled</li>\n</ul>\n<p>The <strong>modules</strong> section contains additional information about loaded modules if the modules provide it. The field part of properties lines in this section is always prefixed with the module&#39;s name.</p>\n<p>The <strong>keyspace</strong> section provides statistics on the main dictionary of each\ndatabase.\nThe statistics are the number of keys, and the number of keys with an expiration.</p>\n<p>For each database, the following line is added:</p>\n<ul>\n<li><code>dbXXX</code>: <code>keys=XXX,expires=XXX</code></li>\n</ul>\n<p>The <strong>debug</strong> section contains experimental metrics, which might change or get removed in future versions.\nIt won&#39;t be included when <code>INFO</code> or <code>INFO ALL</code> are called, and it is returned only when <code>INFO DEBUG</code> is used.</p>\n<ul>\n<li><code>eventloop_duration_aof_sum</code>: Total time spent on flushing AOF in eventloop in microseconds</li>\n<li><code>eventloop_duration_cron_sum</code>: Total time consumption of cron in microseconds (including serverCron and beforeSleep, but excluding IO and AOF flushing)</li>\n<li><code>eventloop_duration_max</code>: The maximal time spent in a single eventloop cycle in microseconds</li>\n<li><code>eventloop_cmd_per_cycle_max</code>: The maximal number of commands processed in a single eventloop cycle</li>\n</ul>\n<p><strong>A note about the word slave used in this man page</strong>: If not for backward compatibility, the Valkey project no longer uses the words &quot;master&quot; and &quot;slave&quot;. Unfortunately in the given commands these words are part of the protocol, so we&#39;ll be able to remove such occurrences only when this API will be naturally deprecated.</p>\n<p><strong>Modules generated sections</strong>: Starting with Valkey 6, modules can inject their info into the <code>INFO</code> command, these are excluded by default even when the <code>all</code> argument is provided (it will include a list of loaded modules but not their generated info fields). To get these you must use either the <code>modules</code> argument or <code>everything</code>.,</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-keys",
    "command": "KEYS",
    "description": "Returns all key names that match a pattern.",
    "htmlContent": "<p>Returns all keys matching <code>pattern</code>.</p>\n<p>While the time complexity for this operation is O(N), the constant times are\nfairly low.\nFor example, Valkey running on an entry level laptop can scan a 1 million key\ndatabase in 40 milliseconds.</p>\n<p><strong>Warning</strong>: consider <code>KEYS</code> as a command that should only be used in production\nenvironments with extreme care.\nIt may ruin performance when it is executed against large databases.\nThis command is intended for debugging and special operations, such as changing\nyour keyspace layout.\nDon&#39;t use <code>KEYS</code> in your regular application code.\nIf you&#39;re looking for a way to find keys in a subset of your keyspace, consider\nusing <code>SCAN</code> or <a href=\"../topics/data-types#sets\">sets</a>.</p>\n<p>Supported glob-style patterns:</p>\n<ul>\n<li><code>h?llo</code> matches <code>hello</code>, <code>hallo</code> and <code>hxllo</code></li>\n<li><code>h*llo</code> matches <code>hllo</code> and <code>heeeello</code></li>\n<li><code>h[ae]llo</code> matches <code>hello</code> and <code>hallo,</code> but not <code>hillo</code></li>\n<li><code>h[^e]llo</code> matches <code>hallo</code>, <code>hbllo</code>, ... but not <code>hello</code></li>\n<li><code>h[a-b]llo</code> matches <code>hallo</code> and <code>hbllo</code></li>\n</ul>\n<p>Use <code>\\</code> to escape special characters if you want to match them verbatim.</p>\n<p>When using <a href=\"../topics/cluster-tutorial\">Valkey Cluster</a>, the search is optimized for patterns that imply a single slot.\nIf a pattern can only match keys of one slot,\nValkey only iterates over keys in that slot, rather than the whole database,\nwhen searching for keys matching the pattern.\nFor example, with the pattern <code>{a}h*llo</code>, Valkey would only try to match it with the keys in slot 15495, which hash tag <code>{a}</code> implies.\nTo use pattern with hash tag, see <a href=\"../topics/cluster-spec#hash-tags\">Hash tags</a> in the Cluster specification for more information.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; MSET firstname Jack lastname Stuntman age 35\nOK\n127.0.0.1:6379&gt; KEYS *name*\n1) &quot;lastname&quot;\n2) &quot;firstname&quot;\n127.0.0.1:6379&gt; KEYS a??\n1) &quot;age&quot;\n127.0.0.1:6379&gt; KEYS *\n1) &quot;age&quot;\n2) &quot;lastname&quot;\n3) &quot;firstname&quot;\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-lastsave",
    "command": "LASTSAVE",
    "description": "Returns the Unix timestamp of the last successful save to disk.",
    "htmlContent": "<p>Return the UNIX TIME of the last DB save executed with success.\nA client may check if a <code>BGSAVE</code> command succeeded reading the <code>LASTSAVE</code> value,\nthen issuing a <code>BGSAVE</code> command and checking at regular intervals every N\nseconds if <code>LASTSAVE</code> changed. Valkey considers the database saved successfully at startup.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency",
    "command": "LATENCY",
    "description": "A container for latency diagnostics commands.",
    "htmlContent": "<p>This is a container command for latency diagnostics commands.</p>\n<p>To see the list of available commands you can call <code>LATENCY HELP</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-doctor",
    "command": "LATENCY DOCTOR",
    "description": "Returns a human-readable latency analysis report.",
    "htmlContent": "<p>The <code>LATENCY DOCTOR</code> command reports about different latency-related issues and advises about possible remedies.</p>\n<p>This command is the most powerful analysis tool in the latency monitoring\nframework, and is able to provide additional statistical data like the average\nperiod between latency spikes, the median deviation, and a human-readable\nanalysis of the event. For certain events, like <code>fork</code>, additional information\nis provided, like the rate at which the system forks processes.</p>\n<p>This is the output you should provide if you are looking for help about Latency related issues.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; latency doctor\n\nDave, I have observed latency spikes in this Valkey instance.\nYou don&#39;t mind talking about it, do you Dave?\n\n1. command: 5 latency spikes (average 300ms, mean deviation 120ms,\n    period 73.40 sec). Worst all time event 500ms.\n\nI have a few advices for you:\n\n- Your current Slow Log configuration only logs events that are\n    slower than your configured latency monitor threshold. Please\n    use &#39;CONFIG SET slowlog-log-slower-than 1000&#39;.\n- Check your Slow Log to understand what are the commands you are\n    running which are too slow to execute. Please check\n    [SLOWLOG](slowlog.md) for more information.\n- Deleting, expiring or evicting (because of maxmemory policy)\n    large objects is a blocking operation. If you have very large\n    objects that are often deleted, expired, or evicted, try to\n    fragment those objects into multiple smaller objects.\n</code></pre>\n<p><strong>Note:</strong> the doctor has erratic psychological behaviors, so we recommend interacting with it carefully.</p>\n<p>For more information refer to the <a href=\"../topics/latency-monitor\">Latency Monitoring Framework page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-graph",
    "command": "LATENCY GRAPH",
    "description": "Returns a latency graph for an event.",
    "htmlContent": "<p>Produces an ASCII-art style graph for the specified event.</p>\n<p><code>LATENCY GRAPH</code> lets you intuitively understand the latency trend of an <code>event</code> via state-of-the-art visualization. It can be used for quickly grasping the situation before resorting to means such parsing the raw data from <code>LATENCY HISTORY</code> or external tooling.</p>\n<p>Valid values for <code>event</code> are:</p>\n<ul>\n<li><code>active-defrag-cycle</code></li>\n<li><code>aof-fsync-always</code></li>\n<li><code>aof-stat</code></li>\n<li><code>aof-rewrite-diff-write</code></li>\n<li><code>aof-rename</code></li>\n<li><code>aof-write</code></li>\n<li><code>aof-write-active-child</code></li>\n<li><code>aof-write-alone</code></li>\n<li><code>aof-write-pending-fsync</code></li>\n<li><code>command</code></li>\n<li><code>expire-cycle</code></li>\n<li><code>eviction-cycle</code></li>\n<li><code>eviction-del</code></li>\n<li><code>fast-command</code></li>\n<li><code>fork</code></li>\n<li><code>rdb-unlink-temp-file</code></li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; latency reset command\n(integer) 0\n127.0.0.1:6379&gt; debug sleep .1\nOK\n127.0.0.1:6379&gt; debug sleep .2\nOK\n127.0.0.1:6379&gt; debug sleep .3\nOK\n127.0.0.1:6379&gt; debug sleep .5\nOK\n127.0.0.1:6379&gt; debug sleep .4\nOK\n127.0.0.1:6379&gt; latency graph command\ncommand - high 500 ms, low 101 ms (all time high 500 ms)\n--------------------------------------------------------------------------------\n   #_\n  _||\n _|||\n_||||\n\n11186\n542ss\nsss\n</code></pre>\n<p>The vertical labels under each graph column represent the amount of seconds,\nminutes, hours or days ago the event happened. For example &quot;15s&quot; means that the\nfirst graphed event happened 15 seconds ago.</p>\n<p>The graph is normalized in the min-max scale so that the zero (the underscore\nin the lower row) is the minimum, and a # in the higher row is the maximum.</p>\n<p>For more information refer to the <a href=\"../topics/latency-monitor\">Latency Monitoring Framework page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-help",
    "command": "LATENCY HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>LATENCY HELP</code> command returns a helpful text describing the different\nsubcommands.</p>\n<p>For more information refer to the <a href=\"../topics/latency-monitor\">Latency Monitoring Framework page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-histogram",
    "command": "LATENCY HISTOGRAM",
    "description": "Returns the cumulative distribution of latencies of a subset or all commands.",
    "htmlContent": "<p><code>LATENCY HISTOGRAM</code> returns a cumulative distribution of commands&#39; latencies in histogram format.</p>\n<p>By default, all available latency histograms are returned.\nYou can filter the reply by providing specific command names.</p>\n<p>Each histogram consists of the following fields:</p>\n<ul>\n<li>Command name</li>\n<li>The total calls for that command</li>\n<li>A map of time buckets:<ul>\n<li>Each bucket represents a latency range</li>\n<li>Each bucket covers twice the previous bucket&#39;s range</li>\n<li>Empty buckets are excluded from the reply</li>\n<li>The tracked latencies are between 1 microsecond and roughly 1 second</li>\n<li>Everything above 1 second is considered +Inf</li>\n<li>At max, there will be log2(1,000,000,000)=30 buckets</li>\n</ul>\n</li>\n</ul>\n<p>This command requires the extended latency monitoring feature to be enabled, which is the default.\nIf you need to enable it, call <code>CONFIG SET latency-tracking yes</code>.</p>\n<p>To delete the latency histograms&#39; data use the <code>CONFIG RESETSTAT</code> command.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; LATENCY HISTOGRAM set\n1# &quot;set&quot; =&gt;\n   1# &quot;calls&quot; =&gt; (integer) 100000\n   2# &quot;histogram_usec&quot; =&gt;\n      1# (integer) 1 =&gt; (integer) 99583\n      2# (integer) 2 =&gt; (integer) 99852\n      3# (integer) 4 =&gt; (integer) 99914\n      4# (integer) 8 =&gt; (integer) 99940\n      5# (integer) 16 =&gt; (integer) 99968\n      6# (integer) 33 =&gt; (integer) 100000\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-history",
    "command": "LATENCY HISTORY",
    "description": "Returns timestamp-latency samples for an event.",
    "htmlContent": "<p>The <code>LATENCY HISTORY</code> command returns the raw data of the <code>event</code>&#39;s latency spikes time series.</p>\n<p>This is useful to an application that wants to fetch raw data in order to perform monitoring, display graphs, and so forth.</p>\n<p>The command will return up to 160 timestamp-latency pairs for the <code>event</code>.</p>\n<p>Valid values for <code>event</code> are:</p>\n<ul>\n<li><code>active-defrag-cycle</code></li>\n<li><code>aof-fsync-always</code></li>\n<li><code>aof-stat</code></li>\n<li><code>aof-rewrite-diff-write</code></li>\n<li><code>aof-rename</code></li>\n<li><code>aof-write</code></li>\n<li><code>aof-write-active-child</code></li>\n<li><code>aof-write-alone</code></li>\n<li><code>aof-write-pending-fsync</code></li>\n<li><code>command</code></li>\n<li><code>expire-cycle</code></li>\n<li><code>eviction-cycle</code></li>\n<li><code>eviction-del</code></li>\n<li><code>fast-command</code></li>\n<li><code>fork</code></li>\n<li><code>rdb-unlink-temp-file</code></li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; latency history command\n1) 1) (integer) 1405067822\n   2) (integer) 251\n2) 1) (integer) 1405067941\n   2) (integer) 1001\n</code></pre>\n<p>For more information refer to the <a href=\"../topics/latency-monitor\">Latency Monitoring Framework page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-latest",
    "command": "LATENCY LATEST",
    "description": "Returns the latest latency samples for all events.",
    "htmlContent": "<p>The <code>LATENCY LATEST</code> command reports the latest latency events logged.</p>\n<p>Each reported event has the following fields:</p>\n<ul>\n<li>Event name.</li>\n<li>Unix timestamp of the latest latency spike for the event.</li>\n<li>Latest event latency in millisecond.</li>\n<li>All-time maximum latency for this event.</li>\n<li>Sum of the latencies recorded in the time series for this event, added in 8.1.</li>\n<li>The number of latency spikes recorded in the time series for this event, added in 8.1.</li>\n</ul>\n<p>&quot;All-time&quot; means the maximum latency since the Valkey instance was\nstarted, or the time that events were reset <code>LATENCY RESET</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; debug sleep 1\nOK\n(1.00s)\n127.0.0.1:6379&gt; debug sleep .25\nOK\n127.0.0.1:6379&gt; latency latest\n1) 1) &quot;command&quot;\n   2) (integer) 1738651470\n   3) (integer) 254\n   4) (integer) 1005\n   5) (integer) 1259\n   6) (integer) 2\n</code></pre>\n<p>For more information refer to the <a href=\"../topics/latency-monitor\">Latency Monitoring Framework page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-latency-reset",
    "command": "LATENCY RESET",
    "description": "Resets the latency data for one or more events.",
    "htmlContent": "<p>The <code>LATENCY RESET</code> command resets the latency spikes time series of all, or only some, events.</p>\n<p>When the command is called without arguments, it resets all the\nevents, discarding the currently logged latency spike events, and resetting\nthe maximum event time register.</p>\n<p>It is possible to reset only specific events by providing the <code>event</code> names\nas arguments.</p>\n<p>Valid values for <code>event</code> are:</p>\n<ul>\n<li><code>active-defrag-cycle</code></li>\n<li><code>aof-fsync-always</code></li>\n<li><code>aof-stat</code></li>\n<li><code>aof-rewrite-diff-write</code></li>\n<li><code>aof-rename</code></li>\n<li><code>aof-write</code></li>\n<li><code>aof-write-active-child</code></li>\n<li><code>aof-write-alone</code></li>\n<li><code>aof-write-pending-fsync</code></li>\n<li><code>command</code></li>\n<li><code>expire-cycle</code></li>\n<li><code>eviction-cycle</code></li>\n<li><code>eviction-del</code></li>\n<li><code>fast-command</code></li>\n<li><code>fork</code></li>\n<li><code>rdb-unlink-temp-file</code></li>\n</ul>\n<p>For more information refer to the <a href=\"../topics/latency-monitor\">Latency Monitoring Framework page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-lcs",
    "command": "LCS",
    "description": "Finds the longest common substring.",
    "htmlContent": "<p>The LCS command implements the longest common subsequence algorithm. Note that this is different than the longest common string algorithm, since matching characters in the string does not need to be contiguous.</p>\n<p>For instance the LCS between &quot;foo&quot; and &quot;fao&quot; is &quot;fo&quot;, since scanning the two strings from left to right, the longest common set of characters is composed of the first &quot;f&quot; and then the &quot;o&quot;.</p>\n<p>LCS is very useful in order to evaluate how similar two strings are. Strings can represent many things. For instance if two strings are DNA sequences, the LCS will provide a measure of similarity between the two DNA sequences. If the strings represent some text edited by some user, the LCS could represent how different the new text is compared to the old one, and so forth.</p>\n<p>Note that this algorithm runs in <code>O(N*M)</code> time, where N is the length of the first string and M is the length of the second string. So either spin a different Valkey instance in order to run this algorithm, or make sure to run it against very small strings.</p>\n<pre><code>&gt; MSET key1 ohmytext key2 mynewtext\nOK\n&gt; LCS key1 key2\n&quot;mytext&quot;\n</code></pre>\n<p>Sometimes we need just the length of the match:</p>\n<pre><code>&gt; LCS key1 key2 LEN\n(integer) 6\n</code></pre>\n<p>However what is often very useful, is to know the match position in each strings:</p>\n<pre><code>&gt; LCS key1 key2 IDX\n1) &quot;matches&quot;\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n   2) 1) 1) (integer) 2\n         2) (integer) 3\n      2) 1) (integer) 0\n         2) (integer) 1\n3) &quot;len&quot;\n4) (integer) 6\n</code></pre>\n<p>Matches are produced from the last one to the first one, since this is how\nthe algorithm works, and it more efficient to emit things in the same order.\nThe above array means that the first match (second element of the array)\nis between positions 2-3 of the first string and 0-1 of the second.\nThen there is another match between 4-7 and 5-8.</p>\n<p>To restrict the list of matches to the ones of a given minimal length:</p>\n<pre><code>&gt; LCS key1 key2 IDX MINMATCHLEN 4\n1) &quot;matches&quot;\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n3) &quot;len&quot;\n4) (integer) 6\n</code></pre>\n<p>Finally to also have the match len:</p>\n<pre><code>&gt; LCS key1 key2 IDX MINMATCHLEN 4 WITHMATCHLEN\n1) &quot;matches&quot;\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n      3) (integer) 4\n3) &quot;len&quot;\n4) (integer) 6\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-lindex",
    "command": "LINDEX",
    "description": "Returns an element from a list by its index.",
    "htmlContent": "<p>Returns the element at index <code>index</code> in the list stored at <code>key</code>.\nThe index is zero-based, so <code>0</code> means the first element, <code>1</code> the second element\nand so on.\nNegative indices can be used to designate elements starting at the tail of the\nlist.\nHere, <code>-1</code> means the last element, <code>-2</code> means the penultimate and so forth.</p>\n<p>When the value at <code>key</code> is not a list, an error is returned.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;\n(integer) 2\n127.0.0.1:6379&gt; LINDEX mylist 0\n&quot;Hello&quot;\n127.0.0.1:6379&gt; LINDEX mylist -1\n&quot;World&quot;\n127.0.0.1:6379&gt; LINDEX mylist 3\n(nil)\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-linsert",
    "command": "LINSERT",
    "description": "Inserts an element before or after another element in a list.",
    "htmlContent": "<p>Inserts <code>element</code> in the list stored at <code>key</code> either before or after the reference\nvalue <code>pivot</code>.</p>\n<p>When <code>key</code> does not exist, it is considered an empty list and no operation is\nperformed.</p>\n<p>An error is returned when <code>key</code> exists but does not hold a list value.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;World&quot;\n(integer) 2\n127.0.0.1:6379&gt; LINSERT mylist BEFORE &quot;World&quot; &quot;There&quot;\n(integer) 3\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;Hello&quot;\n2) &quot;There&quot;\n3) &quot;World&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-llen",
    "command": "LLEN",
    "description": "Returns the length of a list.",
    "htmlContent": "<p>Returns the length of the list stored at <code>key</code>.\nIf <code>key</code> does not exist, it is interpreted as an empty list and <code>0</code> is returned.\nAn error is returned when the value stored at <code>key</code> is not a list.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;\n(integer) 2\n127.0.0.1:6379&gt; LLEN mylist\n(integer) 2\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lmove",
    "command": "LMOVE",
    "description": "Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.",
    "htmlContent": "<p>Atomically returns and removes the first/last element (head/tail depending on\nthe <code>wherefrom</code> argument) of the list stored at <code>source</code>, and pushes the\nelement at the first/last element (head/tail depending on the <code>whereto</code>\nargument) of the list stored at <code>destination</code>.</p>\n<p>For example: consider <code>source</code> holding the list <code>a,b,c</code>, and <code>destination</code>\nholding the list <code>x,y,z</code>.\nExecuting <code>LMOVE source destination RIGHT LEFT</code> results in <code>source</code> holding\n<code>a,b</code> and <code>destination</code> holding <code>c,x,y,z</code>.</p>\n<p>If <code>source</code> does not exist, the value <code>nil</code> is returned and no operation is\nperformed.\nIf <code>source</code> and <code>destination</code> are the same, the operation is equivalent to\nremoving the first/last element from the list and pushing it as first/last\nelement of the list, so it can be considered as a list rotation command (or a\nno-op if <code>wherefrom</code> is the same as <code>whereto</code>).</p>\n<p>This command comes in place of the now deprecated <code>RPOPLPUSH</code>. Doing\n<code>LMOVE RIGHT LEFT</code> is equivalent.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; LMOVE mylist myotherlist RIGHT LEFT\n&quot;three&quot;\n127.0.0.1:6379&gt; LMOVE mylist myotherlist LEFT RIGHT\n&quot;one&quot;\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;two&quot;\n127.0.0.1:6379&gt; LRANGE myotherlist 0 -1\n1) &quot;three&quot;\n2) &quot;one&quot;\n</code></pre>\n<h2>Pattern: Reliable queue</h2>\n<p>Valkey is often used as a messaging server to implement processing of background\njobs or other kinds of messaging tasks.\nA simple form of queue is often obtained pushing values into a list in the\nproducer side, and waiting for this values in the consumer side using <code>RPOP</code>\n(using polling), or <code>BRPOP</code> if the client is better served by a blocking\noperation.</p>\n<p>However in this context the obtained queue is not <em>reliable</em> as messages can\nbe lost, for example in the case there is a network problem or if the consumer\ncrashes just after the message is received but it is still to process.</p>\n<p><code>LMOVE</code> (or <code>BLMOVE</code> for the blocking variant) offers a way to avoid\nthis problem: the consumer fetches the message and at the same time pushes it\ninto a <em>processing</em> list.\nIt will use the <code>LREM</code> command in order to remove the message from the\n<em>processing</em> list once the message has been processed.</p>\n<p>An additional client may monitor the <em>processing</em> list for items that remain\nthere for too much time, and will push those timed out items into the queue\nagain if needed.</p>\n<h2>Pattern: Circular list</h2>\n<p>Using <code>LMOVE</code> with the same source and destination key, a client can visit\nall the elements of an N-elements list, one after the other, in O(N) without\ntransferring the full list from the server to the client using a single <code>LRANGE</code>\noperation.</p>\n<p>The above pattern works even in the following conditions:</p>\n<ul>\n<li>There are multiple clients rotating the list: they&#39;ll fetch different\nelements, until all the elements of the list are visited, and the process\nrestarts.</li>\n<li>Even if other clients are actively pushing new items at the end of the list.</li>\n</ul>\n<p>The above makes it very simple to implement a system where a set of items must\nbe processed by N workers continuously as fast as possible.\nAn example is a monitoring system that must check that a set of web sites are\nreachable, with the smallest delay possible, using a number of parallel workers.</p>\n<p>Note that this implementation of workers is trivially scalable and reliable,\nbecause even if a message is lost the item is still in the queue and will be\nprocessed at the next iteration.</p>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lmpop",
    "command": "LMPOP",
    "description": "Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.",
    "htmlContent": "<p>Pops one or more elements from the first non-empty list key from the list of provided key names.</p>\n<p><code>LMPOP</code> and <code>BLMPOP</code> are similar to the following, more limited, commands:</p>\n<ul>\n<li><code>LPOP</code> or <code>RPOP</code> which take only one key, and can return multiple elements.</li>\n<li><code>BLPOP</code> or <code>BRPOP</code> which take multiple keys, but return only one element from just one key.</li>\n</ul>\n<p>See <code>BLMPOP</code> for the blocking variant of this command.</p>\n<p>Elements are popped from either the left or right of the first non-empty list based on the passed argument.\nThe number of returned elements is limited to the lower between the non-empty list&#39;s length, and the count argument (which defaults to 1).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; LMPOP 2 non1 non2 LEFT COUNT 10\n(nil)\n127.0.0.1:6379&gt; LPUSH mylist &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;five&quot;\n(integer) 5\n127.0.0.1:6379&gt; LMPOP 1 mylist LEFT\n1) &quot;mylist&quot;\n2) 1) &quot;five&quot;\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;four&quot;\n2) &quot;three&quot;\n3) &quot;two&quot;\n4) &quot;one&quot;\n127.0.0.1:6379&gt; LMPOP 1 mylist RIGHT COUNT 10\n1) &quot;mylist&quot;\n2) 1) &quot;one&quot;\n   2) &quot;two&quot;\n   3) &quot;three&quot;\n   4) &quot;four&quot;\n127.0.0.1:6379&gt; LPUSH mylist &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;five&quot;\n(integer) 5\n127.0.0.1:6379&gt; LPUSH mylist2 &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot;\n(integer) 5\n127.0.0.1:6379&gt; LMPOP 2 mylist mylist2 right count 3\n1) &quot;mylist&quot;\n2) 1) &quot;one&quot;\n   2) &quot;two&quot;\n   3) &quot;three&quot;\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;five&quot;\n2) &quot;four&quot;\n127.0.0.1:6379&gt; LMPOP 2 mylist mylist2 right count 5\n1) &quot;mylist&quot;\n2) 1) &quot;four&quot;\n   2) &quot;five&quot;\n127.0.0.1:6379&gt; LMPOP 2 mylist mylist2 right count 10\n1) &quot;mylist2&quot;\n2) 1) &quot;a&quot;\n   2) &quot;b&quot;\n   3) &quot;c&quot;\n   4) &quot;d&quot;\n   5) &quot;e&quot;\n127.0.0.1:6379&gt; EXISTS mylist mylist2\n(integer) 0\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lolwut",
    "command": "LOLWUT",
    "description": "Displays computer art and the Valkey version",
    "htmlContent": "<p>The LOLWUT command displays the Valkey version: however as a side effect of doing so,\nit also creates a piece of generative computer art that is different with each version of Valkey.</p>\n<p>By default the <code>LOLWUT</code> command will display the piece corresponding to the current Valkey version,\nhowever it is possible to display a specific version using the following form:</p>\n<pre><code>LOLWUT VERSION 7 ... other optional arguments ...\n</code></pre>\n<p>Of course the &quot;7&quot; above is an example. Each LOLWUT version takes a different\nset of arguments in order to change the output. The user is encouraged to\nplay with it to discover how the output changes adding more numerical\narguments.</p>\n<p>LOLWUT wants to be a reminder that there is more in programming than just\nputting some code together in order to create something useful. Every\nLOLWUT version should have the following properties:</p>\n<ol>\n<li>It should display some computer art. There are no limits as long as the output works well in a normal terminal display. However the output should not be limited to graphics (like LOLWUT 7 and 8 actually do), but can be generative poetry and other non graphical things.</li>\n<li>LOLWUT output should be completely useless. Displaying some useful Valkey internal metrics does not count as a valid LOLWUT.</li>\n<li>LOLWUT output should be fast to generate so that the command can be called in production instances without issues. It should remain fast even when the user experiments with odd parameters.</li>\n<li>LOLWUT implementations should be safe and carefully checked for security, and resist to untrusted inputs if they take arguments.</li>\n<li>LOLWUT must always display the Valkey version at the end.</li>\n</ol>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-lpop",
    "command": "LPOP",
    "description": "Returns the first elements in a list after removing it. Deletes the list if the last element was popped.",
    "htmlContent": "<p>Removes and returns the first elements of the list stored at <code>key</code>.</p>\n<p>By default, the command pops a single element from the beginning of the list.\nWhen provided with the optional <code>count</code> argument, the reply will consist of up\nto <code>count</code> elements, depending on the list&#39;s length.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;five&quot;\n(integer) 5\n127.0.0.1:6379&gt; LPOP mylist\n&quot;one&quot;\n127.0.0.1:6379&gt; LPOP mylist 2\n1) &quot;two&quot;\n2) &quot;three&quot;\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;four&quot;\n2) &quot;five&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lpos",
    "command": "LPOS",
    "description": "Returns the index of matching elements in a list.",
    "htmlContent": "<p>The command returns the index of matching elements inside a List.\nBy default, when no options are given, it will scan the list from head to tail,\nlooking for the first match of &quot;element&quot;. If the element is found, its index (the zero-based position in the list) is returned. Otherwise, if no match is found, <code>nil</code> is returned.</p>\n<pre><code>&gt; RPUSH mylist a b c 1 2 3 c c\n&gt; LPOS mylist c\n2\n</code></pre>\n<p>The optional arguments and options can modify the command&#39;s behavior.\nThe <code>RANK</code> option specifies the &quot;rank&quot; of the first element to return, in case there are multiple matches. A rank of 1 means to return the first match, 2 to return the second match, and so forth.</p>\n<p>For instance, in the above example the element &quot;c&quot; is present multiple times, if I want the index of the second match, I&#39;ll write:</p>\n<pre><code>&gt; LPOS mylist c RANK 2\n6\n</code></pre>\n<p>That is, the second occurrence of &quot;c&quot; is at position 6.\nA negative &quot;rank&quot; as the <code>RANK</code> argument tells <code>LPOS</code> to invert the search direction, starting from the tail to the head.</p>\n<p>So, we want to say, give me the first element starting from the tail of the list:</p>\n<pre><code>&gt; LPOS mylist c RANK -1\n7\n</code></pre>\n<p>Note that the indexes are still reported in the &quot;natural&quot; way, that is, considering the first element starting from the head of the list at index 0, the next element at index 1, and so forth. This basically means that the returned indexes are stable whatever the rank is positive or negative.</p>\n<p>Sometimes we want to return not just the Nth matching element, but the position of all the first N matching elements. This can be achieved using the <code>COUNT</code> option.</p>\n<pre><code>&gt; LPOS mylist c COUNT 2\n[2,6]\n</code></pre>\n<p>We can combine <code>COUNT</code> and <code>RANK</code>, so that <code>COUNT</code> will try to return up to the specified number of matches, but starting from the Nth match, as specified by the <code>RANK</code> option.</p>\n<pre><code>&gt; LPOS mylist c RANK -1 COUNT 2\n[7,6]\n</code></pre>\n<p>When <code>COUNT</code> is used, it is possible to specify 0 as the number of matches, as a way to tell the command we want all the matches found returned as an array of indexes. This is better than giving a very large <code>COUNT</code> option because it is more general.</p>\n<pre><code>&gt; LPOS mylist c COUNT 0\n[2,6,7]\n</code></pre>\n<p>When <code>COUNT</code> is used and no match is found, an empty array is returned. However when <code>COUNT</code> is not used and there are no matches, the command returns <code>nil</code>.</p>\n<p>Finally, the <code>MAXLEN</code> option tells the command to compare the provided element only with a given maximum number of list items. So for instance specifying <code>MAXLEN 1000</code> will make sure that the command performs only 1000 comparisons, effectively running the algorithm on a subset of the list (the first part or the last part depending on the fact we use a positive or negative rank). This is useful to limit the maximum complexity of the command. It is also useful when we expect the match to be found very early, but want to be sure that in case this is not true, the command does not take too much time to run.</p>\n<p>When <code>MAXLEN</code> is used, it is possible to specify 0 as the maximum number of comparisons, as a way to tell the command we want unlimited comparisons. This is better than giving a very large <code>MAXLEN</code> option because it is more general.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist a b c d 1 2 3 4 3 3 3\n(integer) 11\n127.0.0.1:6379&gt; LPOS mylist 3\n(integer) 6\n127.0.0.1:6379&gt; LPOS mylist 3 COUNT 0 RANK 2\n1) (integer) 8\n2) (integer) 9\n3) (integer) 10\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lpush",
    "command": "LPUSH",
    "description": "Prepends one or more elements to a list. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Insert all the specified values at the head of the list stored at <code>key</code>.\nIf <code>key</code> does not exist, it is created as empty list before performing the push\noperations.\nWhen <code>key</code> holds a value that is not a list, an error is returned.</p>\n<p>It is possible to push multiple elements using a single command call just\nspecifying multiple arguments at the end of the command.\nElements are inserted one after the other to the head of the list, from the\nleftmost element to the rightmost element.\nSo for instance the command <code>LPUSH mylist a b c</code> will result into a list\ncontaining <code>c</code> as first element, <code>b</code> as second element and <code>a</code> as third element.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; LPUSH mylist &quot;world&quot;\n(integer) 1\n127.0.0.1:6379&gt; LPUSH mylist &quot;hello&quot;\n(integer) 2\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;hello&quot;\n2) &quot;world&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lpushx",
    "command": "LPUSHX",
    "description": "Prepends one or more elements to a list only when the list exists.",
    "htmlContent": "<p>Inserts specified values at the head of the list stored at <code>key</code>, only if <code>key</code>\nalready exists and holds a list.\nIn contrary to <code>LPUSH</code>, no operation will be performed when <code>key</code> does not yet\nexist.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; LPUSHX mylist &quot;Hello&quot;\n(integer) 2\n127.0.0.1:6379&gt; LPUSHX myotherlist &quot;Hello&quot;\n(integer) 0\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n127.0.0.1:6379&gt; LRANGE myotherlist 0 -1\n(empty array)\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lrange",
    "command": "LRANGE",
    "description": "Returns a range of elements from a list.",
    "htmlContent": "<p>Returns the specified elements of the list stored at <code>key</code>.\nThe offsets <code>start</code> and <code>stop</code> are zero-based indexes, with <code>0</code> being the first\nelement of the list (the head of the list), <code>1</code> being the next element and so\non.</p>\n<p>These offsets can also be negative numbers indicating offsets starting at the\nend of the list.\nFor example, <code>-1</code> is the last element of the list, <code>-2</code> the penultimate, and so\non.</p>\n<h2>Consistency with range functions in various programming languages</h2>\n<p>Note that if you have a list of numbers from 0 to 100, <code>LRANGE list 0 10</code> will\nreturn 11 elements, that is, the rightmost item is included.\nThis <strong>may or may not</strong> be consistent with behavior of range-related functions\nin your programming language of choice (think Ruby&#39;s <code>Range.new</code>, <code>Array#slice</code>\nor Python&#39;s <code>range()</code> function).</p>\n<h2>Out-of-range indexes</h2>\n<p>Out of range indexes will not produce an error.\nIf <code>start</code> is larger than the end of the list, an empty list is returned.\nIf <code>stop</code> is larger than the actual end of the list, Valkey will treat it like\nthe last element of the list.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; LRANGE mylist 0 0\n1) &quot;one&quot;\n127.0.0.1:6379&gt; LRANGE mylist -3 2\n1) &quot;one&quot;\n2) &quot;two&quot;\n3) &quot;three&quot;\n127.0.0.1:6379&gt; LRANGE mylist -100 100\n1) &quot;one&quot;\n2) &quot;two&quot;\n3) &quot;three&quot;\n127.0.0.1:6379&gt; LRANGE mylist 5 10\n(empty array)\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lrem",
    "command": "LREM",
    "description": "Removes elements from a list. Deletes the list if the last element was removed.",
    "htmlContent": "<p>Removes the first <code>count</code> occurrences of elements equal to <code>element</code> from the list\nstored at <code>key</code>.\nThe <code>count</code> argument influences the operation in the following ways:</p>\n<ul>\n<li><code>count &gt; 0</code>: Remove elements equal to <code>element</code> moving from head to tail.</li>\n<li><code>count &lt; 0</code>: Remove elements equal to <code>element</code> moving from tail to head.</li>\n<li><code>count = 0</code>: Remove all elements equal to <code>element</code>.</li>\n</ul>\n<p>For example, <code>LREM list -2 &quot;hello&quot;</code> will remove the last two occurrences of\n<code>&quot;hello&quot;</code> in the list stored at <code>list</code>.</p>\n<p>Note that non-existing keys are treated like empty lists, so when <code>key</code> does not\nexist, the command will always return <code>0</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;\n(integer) 3\n127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\n(integer) 4\n127.0.0.1:6379&gt; LREM mylist -2 &quot;hello&quot;\n(integer) 2\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;hello&quot;\n2) &quot;foo&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-lset",
    "command": "LSET",
    "description": "Sets the value of an element in a list by its index.",
    "htmlContent": "<p>Sets the list element at <code>index</code> to <code>element</code>.\nFor more information on the <code>index</code> argument, see <code>LINDEX</code>.</p>\n<p>An error is returned for out of range indexes.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; LSET mylist 0 &quot;four&quot;\nOK\n127.0.0.1:6379&gt; LSET mylist -2 &quot;five&quot;\nOK\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;four&quot;\n2) &quot;five&quot;\n3) &quot;three&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-ltrim",
    "command": "LTRIM",
    "description": "Removes elements from both ends a list. Deletes the list if all elements were trimmed.",
    "htmlContent": "<p>Trim an existing list so that it will contain only the specified range of\nelements specified.\nBoth <code>start</code> and <code>stop</code> are zero-based indexes, where <code>0</code> is the first element\nof the list (the head), <code>1</code> the next element and so on.</p>\n<p>For example: <code>LTRIM foobar 0 2</code> will modify the list stored at <code>foobar</code> so that\nonly the first three elements of the list will remain.</p>\n<p><code>start</code> and <code>end</code> can also be negative numbers indicating offsets from the end\nof the list, where <code>-1</code> is the last element of the list, <code>-2</code> the penultimate\nelement and so on.</p>\n<p>Out of range indexes will not produce an error: if <code>start</code> is larger than the\nend of the list, or <code>start &gt; end</code>, the result will be an empty list (which\ncauses <code>key</code> to be removed).\nIf <code>end</code> is larger than the end of the list, Valkey will treat it like the last\nelement of the list.</p>\n<p>A common use of <code>LTRIM</code> is together with <code>LPUSH</code> / <code>RPUSH</code>.\nFor example:</p>\n<pre><code>LPUSH mylist someelement\nLTRIM mylist 0 99\n</code></pre>\n<p>This pair of commands will push a new element on the list, while making sure\nthat the list will not grow larger than 100 elements.\nThis is very useful when using Valkey to store logs for example.\nIt is important to note that when used in this way <code>LTRIM</code> is an O(1) operation\nbecause in the average case just one element is removed from the tail of the\nlist.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; LTRIM mylist 1 -1\nOK\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;two&quot;\n2) &quot;three&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-memory",
    "command": "MEMORY",
    "description": "A container for memory diagnostics commands.",
    "htmlContent": "<p>This is a container command for memory introspection and management commands.</p>\n<p>To see the list of available commands you can call <code>MEMORY HELP</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-memory-doctor",
    "command": "MEMORY DOCTOR",
    "description": "Outputs a memory problems report.",
    "htmlContent": "<p>The <code>MEMORY DOCTOR</code> command reports about different memory-related issues that\nthe Valkey server experiences, and advises about possible remedies.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-memory-help",
    "command": "MEMORY HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>MEMORY HELP</code> command returns a helpful text describing the different\nsubcommands.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-memory-malloc-stats",
    "command": "MEMORY MALLOC-STATS",
    "description": "Returns the allocator statistics.",
    "htmlContent": "<p>The <code>MEMORY MALLOC-STATS</code> command provides an internal statistics report from\nthe memory allocator.</p>\n<p>This command is currently implemented only when using <strong>jemalloc</strong> as an\nallocator, and evaluates to a benign NOOP for all others.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-memory-purge",
    "command": "MEMORY PURGE",
    "description": "Asks the allocator to release memory.",
    "htmlContent": "<p>The <code>MEMORY PURGE</code> command attempts to purge dirty pages so these can be\nreclaimed by the allocator.</p>\n<p>This command is currently implemented only when using <strong>jemalloc</strong> as an\nallocator, and evaluates to a benign NOOP for all others.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-memory-stats",
    "command": "MEMORY STATS",
    "description": "Returns details about memory usage.",
    "htmlContent": "<p>The <code>MEMORY STATS</code> command returns an @array-reply about the memory usage of the\nserver.</p>\n<p>The information about memory usage is provided as metrics and their respective\nvalues. The following metrics are reported:</p>\n<ul>\n<li><code>peak.allocated</code>: Peak memory consumed by Valkey in bytes (see <code>INFO</code>&#39;s\n <code>used_memory_peak</code>)</li>\n<li><code>total.allocated</code>: Total number of bytes allocated by Valkey using its\n allocator (see <code>INFO</code>&#39;s <code>used_memory</code>)</li>\n<li><code>startup.allocated</code>: Initial amount of memory consumed by Valkey at startup\n in bytes (see <code>INFO</code>&#39;s <code>used_memory_startup</code>)</li>\n<li><code>replication.backlog</code>: Size in bytes of the replication backlog (see\n <code>INFO</code>&#39;s <code>repl_backlog_active</code>)</li>\n<li><code>clients.slaves</code>: The total size in bytes of all replicas overheads (output\n and query buffers, connection contexts)</li>\n<li><code>clients.normal</code>: The total size in bytes of all clients overheads (output\n and query buffers, connection contexts)</li>\n<li><code>cluster.links</code>: Memory usage by cluster links (see <code>INFO</code>&#39;s <code>mem_cluster_links</code>).</li>\n<li><code>aof.buffer</code>: The summed size in bytes of AOF related buffers.</li>\n<li><code>lua.caches</code>: the summed size in bytes of the overheads of the Lua scripts&#39;\n caches</li>\n<li><code>functions.caches</code>: the summed size in bytes of the overheads of the Function scripts&#39;\n caches</li>\n<li><code>dbXXX</code>: For each of the server&#39;s databases, the overheads of the main and\n expiry dictionaries (<code>overhead.hashtable.main</code> and\n<code>overhead.hashtable.expires</code>, respectively) are reported in bytes</li>\n<li><code>overhead.db.hashtable.lut</code>: Total overhead of dictionary buckets in databases (Added in Valkey 8.0)</li>\n<li><code>overhead.db.hashtable.rehashing</code>: Temporary memory overhead of database dictionaries currently being rehashed (Added in Valkey 8.0) </li>\n<li><code>overhead.total</code>: The sum of all overheads, i.e. <code>startup.allocated</code>,\n <code>replication.backlog</code>, <code>clients.slaves</code>, <code>clients.normal</code>, <code>aof.buffer</code> and\n those of the internal data structures that are used in managing the\n Valkey keyspace (see <code>INFO</code>&#39;s <code>used_memory_overhead</code>)</li>\n<li><code>db.dict.rehashing.count</code>: Number of DB dictionaries currently being rehashed (Added in Valkey 8.0)</li>\n<li><code>keys.count</code>: The total number of keys stored across all databases in the\n server</li>\n<li><code>keys.bytes-per-key</code>: The ratio between <code>dataset.bytes</code> and <code>keys.count</code></li>\n<li><code>dataset.bytes</code>: The size in bytes of the dataset, i.e. <code>overhead.total</code>\n subtracted from <code>total.allocated</code> (see <code>INFO</code>&#39;s <code>used_memory_dataset</code>)</li>\n<li><code>dataset.percentage</code>: The percentage of <code>dataset.bytes</code> out of the total\n memory usage</li>\n<li><code>peak.percentage</code>: The percentage of <code>total.allocated</code> out of\n <code>peak.allocated</code></li>\n<li><code>allocator.allocated</code>: See <code>INFO</code>&#39;s <code>allocator_allocated</code></li>\n<li><code>allocator.active</code>: See <code>INFO</code>&#39;s <code>allocator_active</code></li>\n<li><code>allocator.resident</code>: See <code>INFO</code>&#39;s <code>allocator_resident</code></li>\n<li><code>allocator.muzzy</code>: See <code>INFO</code>&#39;s <code>allocator_muzzy</code></li>\n<li><code>allocator-fragmentation.ratio</code>: See <code>INFO</code>&#39;s <code>allocator_frag_ratio</code></li>\n<li><code>allocator-fragmentation.bytes</code>: See <code>INFO</code>&#39;s <code>allocator_frag_bytes</code></li>\n<li><code>allocator-rss.ratio</code>: See <code>INFO</code>&#39;s <code>allocator_rss_ratio</code></li>\n<li><code>allocator-rss.bytes</code>: See <code>INFO</code>&#39;s <code>allocator_rss_bytes</code></li>\n<li><code>rss-overhead.ratio</code>: See <code>INFO</code>&#39;s <code>rss_overhead_ratio</code></li>\n<li><code>rss-overhead.bytes</code>: See <code>INFO</code>&#39;s <code>rss_overhead_bytes</code></li>\n<li><code>fragmentation</code>: See <code>INFO</code>&#39;s <code>mem_fragmentation_ratio</code></li>\n<li><code>fragmentation.bytes</code>: See <code>INFO</code>&#39;s <code>mem_fragmentation_bytes</code></li>\n</ul>\n<p><strong>A note about the word slave used in this man page</strong>: If not for backward compatibility, the Valkey project no longer uses the words &quot;master&quot; and &quot;slave&quot;. Unfortunately in the given commands these words are part of the protocol, so we&#39;ll be able to remove such occurrences only when this API will be naturally deprecated.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-memory-usage",
    "command": "MEMORY USAGE",
    "description": "Estimates the memory usage of a key.",
    "htmlContent": "<p>The <code>MEMORY USAGE</code> command reports the number of bytes that a key and its value\nrequire to be stored in RAM.</p>\n<p>The reported usage is the total of memory allocations for data and\nadministrative overheads that a key and its value require.</p>\n<p>For nested data types, the optional <code>SAMPLES</code> option can be provided, where\n<code>count</code> is the number of sampled nested values. The samples are averaged to estimate the total size.\nBy default, this option is set to <code>5</code>. To sample the all of the nested values, use <code>SAMPLES 0</code>.</p>\n<h2>Examples</h2>\n<p>With Valkey v7.2.4 64-bit and <strong>jemalloc</strong>, the empty string measures as follows:</p>\n<pre><code>&gt; SET &quot;&quot; &quot;&quot;\nOK\n&gt; MEMORY USAGE &quot;&quot;\n(integer) 56\n</code></pre>\n<p>These bytes are pure overhead at the moment as no actual data is stored, and are\nused for maintaining the internal data structures of the server (include internal allocator fragmentation). Longer keys and\nvalues show asymptotically linear usage.</p>\n<pre><code>&gt; SET foo bar\nOK\n&gt; MEMORY USAGE foo\n(integer) 56\n&gt; SET foo2 mybar\nOK\n&gt; MEMORY USAGE foo2\n(integer) 64\n&gt; SET foo3 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\nOK\n&gt; MEMORY USAGE foo3\n(integer) 160\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-mget",
    "command": "MGET",
    "description": "Atomically returns the string values of one or more keys.",
    "htmlContent": "<p>Returns the values of all specified keys.\nFor every key that does not hold a string value or does not exist, the special\nvalue <code>nil</code> is returned.\nBecause of this, the operation never fails.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; SET key2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; MGET key1 key2 nonexisting\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n3) (nil)\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-migrate",
    "command": "MIGRATE",
    "description": "Atomically transfers a key from one Valkey instance to another.",
    "htmlContent": "<p>Atomically transfer a key from a source Valkey instance to a destination Valkey\ninstance.\nOn success the key is deleted from the original instance and is guaranteed to\nexist in the target instance.</p>\n<p>The command is atomic and blocks the two instances for the time required to\ntransfer the key, at any given time the key will appear to exist in a given\ninstance or in the other instance, unless a timeout error occurs. In 3.2 and\nabove, multiple keys can be pipelined in a single call to <code>MIGRATE</code> by passing\nthe empty string (&quot;&quot;) as key and adding the <code>!KEYS</code> clause.</p>\n<p>The command internally uses <code>DUMP</code> to generate the serialized version of the key\nvalue, and <code>RESTORE</code> in order to synthesize the key in the target instance.\nThe source instance acts as a client for the target instance.\nIf the target instance returns OK to the <code>RESTORE</code> command, the source instance\ndeletes the key using <code>DEL</code>.</p>\n<p>The timeout specifies the maximum idle time in any moment of the communication\nwith the destination instance in milliseconds.\nThis means that the operation does not need to be completed within the specified\namount of milliseconds, but that the transfer should make progresses without\nblocking for more than the specified amount of milliseconds.</p>\n<p><code>MIGRATE</code> needs to perform I/O operations and to honor the specified timeout.\nWhen there is an I/O error during the transfer or if the timeout is reached the\noperation is aborted and the special error - <code>IOERR</code> returned.\nWhen this happens the following two cases are possible:</p>\n<ul>\n<li>The key may be on both the instances.</li>\n<li>The key may be only in the source instance.</li>\n</ul>\n<p>It is not possible for the key to get lost in the event of a timeout, but the\nclient calling <code>MIGRATE</code>, in the event of a timeout error, should check if the\nkey is <em>also</em> present in the target instance and act accordingly.</p>\n<p>When any other error is returned (starting with <code>ERR</code>) <code>MIGRATE</code> guarantees that\nthe key is still only present in the originating instance (unless a key with the\nsame name was also <em>already</em> present on the target instance).</p>\n<p>If there are no keys to migrate in the source instance <code>NOKEY</code> is returned.\nBecause missing keys are possible in normal conditions, from expiry for example,\n<code>NOKEY</code> isn&#39;t an error.</p>\n<h2>Migrating multiple keys with a single command call</h2>\n<p><code>MIGRATE</code> supports a bulk-migration mode that\nuses pipelining in order to migrate multiple keys between instances without\nincurring in the round trip time latency and other overheads that there are\nwhen moving each key with a single <code>MIGRATE</code> call.</p>\n<p>In order to enable this form, the <code>!KEYS</code> option is used, and the normal <em>key</em>\nargument is set to an empty string. The actual key names will be provided\nafter the <code>!KEYS</code> argument itself, like in the following example:</p>\n<pre><code>MIGRATE 192.168.1.34 6379 &quot;&quot; 0 5000 KEYS key1 key2 key3\n</code></pre>\n<p>When this form is used the <code>NOKEY</code> status code is only returned when none\nof the keys is present in the instance, otherwise the command is executed, even if\njust a single key exists.</p>\n<h2>Options</h2>\n<ul>\n<li><code>!COPY</code> -- Do not remove the key from the local instance.</li>\n<li><code>REPLACE</code> -- Replace existing key on the remote instance.</li>\n<li><code>!KEYS</code> -- If the key argument is an empty string, the command will instead migrate all the keys that follow the <code>!KEYS</code> option (see the above section for more info).</li>\n<li><code>!AUTH</code> -- Authenticate with the given password to the remote instance.</li>\n<li><code>AUTH2</code> -- Authenticate with the given username and password pair.</li>\n</ul>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-module",
    "command": "MODULE",
    "description": "A container for module commands.",
    "htmlContent": "<p>This is a container command for module management commands.</p>\n<p>To see the list of available commands you can call <code>MODULE HELP</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-module-help",
    "command": "MODULE HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>MODULE HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-module-list",
    "command": "MODULE LIST",
    "description": "Returns all loaded modules.",
    "htmlContent": "<p>Returns information about the modules loaded to the server.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-module-load",
    "command": "MODULE LOAD",
    "description": "Loads a module.",
    "htmlContent": "<p>Loads a module from a dynamic library at runtime.</p>\n<p>This command loads and initializes the Valkey module from the dynamic library\nspecified by the <code>path</code> argument. The <code>path</code> should be the absolute path of the\nlibrary, including the full filename. Any additional arguments are passed\nunmodified to the module.</p>\n<p><strong>Note</strong>: modules can also be loaded at server startup with <code>loadmodule</code>\nconfiguration directive in <code>valkey.conf</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-module-loadex",
    "command": "MODULE LOADEX",
    "description": "Loads a module using extended parameters.",
    "htmlContent": "<p>Loads a module from a dynamic library at runtime with configuration directives.</p>\n<p>This is an extended version of the <code>MODULE LOAD</code> command.</p>\n<p>It loads and initializes the Valkey module from the dynamic library specified by the <code>path</code> argument. The <code>path</code> should be the absolute path of the library, including the full filename.</p>\n<p>You can use the optional <code>!CONFIG</code> argument to provide the module with configuration directives.\nAny additional arguments that follow the <code>ARGS</code> keyword are passed unmodified to the module.</p>\n<p><strong>Note</strong>: modules can also be loaded at server startup with <code>loadmodule</code>\nconfiguration directive in <code>valkey.conf</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-module-unload",
    "command": "MODULE UNLOAD",
    "description": "Unloads a module.",
    "htmlContent": "<p>Unloads a module.</p>\n<p>This command unloads the module specified by <code>name</code>. Note that the module&#39;s name\nis reported by the <code>MODULE LIST</code> command, and may differ from the dynamic\nlibrary&#39;s filename.</p>\n<p>Known limitations:</p>\n<ul>\n<li>Modules that register custom data types can not be unloaded.</li>\n</ul>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-monitor",
    "command": "MONITOR",
    "description": "Listens for all requests received by the server in real-time.",
    "htmlContent": "<p><code>MONITOR</code> is a debugging command that streams back every command processed by\nthe Valkey server.\nIt can help in understanding what is happening to the database.\nThis command can both be used via <code>valkey-cli</code> and via <code>telnet</code>.</p>\n<p>The ability to see all the requests processed by the server is useful in order\nto spot bugs in an application both when using Valkey as a database and as a\ndistributed caching system.</p>\n<pre><code>$ valkey-cli monitor\n1339518083.107412 [0 127.0.0.1:60866] &quot;keys&quot; &quot;*&quot;\n1339518087.877697 [0 127.0.0.1:60866] &quot;dbsize&quot;\n1339518090.420270 [0 127.0.0.1:60866] &quot;set&quot; &quot;x&quot; &quot;6&quot;\n1339518096.506257 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;\n1339518099.363765 [0 127.0.0.1:60866] &quot;eval&quot; &quot;return server.call(&#39;set&#39;,&#39;x&#39;,&#39;7&#39;)&quot; &quot;0&quot;\n1339518100.363799 [0 lua] &quot;set&quot; &quot;x&quot; &quot;7&quot;\n1339518100.544926 [0 127.0.0.1:60866] &quot;del&quot; &quot;x&quot;\n</code></pre>\n<p>Use <code>SIGINT</code> (Ctrl-C) to stop a <code>MONITOR</code> stream running via <code>valkey-cli</code>.</p>\n<pre><code>$ telnet localhost 6379\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is &#39;^]&#39;.\nMONITOR\n+OK\n+1339518083.107412 [0 127.0.0.1:60866] &quot;keys&quot; &quot;*&quot;\n+1339518087.877697 [0 127.0.0.1:60866] &quot;dbsize&quot;\n+1339518090.420270 [0 127.0.0.1:60866] &quot;set&quot; &quot;x&quot; &quot;6&quot;\n+1339518096.506257 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;\n+1339518099.363765 [0 127.0.0.1:60866] &quot;del&quot; &quot;x&quot;\n+1339518100.544926 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;\nQUIT\n+OK\nConnection closed by foreign host.\n</code></pre>\n<p>Manually issue the <code>QUIT</code> or <code>RESET</code> commands to stop a <code>MONITOR</code> stream running\nvia <code>telnet</code>.</p>\n<h2>Commands not logged by MONITOR</h2>\n<p>Because of security concerns, no administrative commands are logged\nby <code>MONITOR</code>&#39;s output and sensitive data is redacted in the command <code>AUTH</code>.</p>\n<p>Furthermore, the command <code>QUIT</code> is also not logged.</p>\n<h2>Cost of running MONITOR</h2>\n<p>Because <code>MONITOR</code> streams back <strong>all</strong> commands, its use comes at a cost.\nThe following (totally unscientific) benchmark numbers illustrate what the cost\nof running <code>MONITOR</code> can be.</p>\n<p>Benchmark result <strong>without</strong> <code>MONITOR</code> running:</p>\n<pre><code>$ src/valkey-benchmark -c 10 -n 100000 -q\nPING_INLINE: 101936.80 requests per second\nPING_BULK: 102880.66 requests per second\nSET: 95419.85 requests per second\nGET: 104275.29 requests per second\nINCR: 93283.58 requests per second\n</code></pre>\n<p>Benchmark result <strong>with</strong> <code>MONITOR</code> running (<code>valkey-cli monitor &gt; /dev/null</code>):</p>\n<pre><code>$ src/valkey-benchmark -c 10 -n 100000 -q\nPING_INLINE: 58479.53 requests per second\nPING_BULK: 59136.61 requests per second\nSET: 41823.50 requests per second\nGET: 45330.91 requests per second\nINCR: 41771.09 requests per second\n</code></pre>\n<p>In this particular case, running a single <code>MONITOR</code> client can reduce the\nthroughput by more than 50%.\nRunning more <code>MONITOR</code> clients will reduce throughput even more.</p>\n<p>Note that, </p>\n<ul>\n<li><code>AUTH</code> is excluded from the command&#39;s output.</li>\n<li><code>RESET</code> can be called to exit monitor mode.</li>\n<li><code>AUTH</code>, <code>HELLO</code>, <code>EVAL</code>, <code>EVAL_RO</code>, <code>EVALSHA</code> and <code>EVALSHA_RO</code> are included in the command&#39;s output.</li>\n</ul>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-move",
    "command": "MOVE",
    "description": "Moves a key to another database.",
    "htmlContent": "<p>Move <code>key</code> from the currently selected database (see <code>SELECT</code>) to the specified\ndestination database.\nWhen <code>key</code> already exists in the destination database, or it does not exist in\nthe source database, it does nothing.\nIt is possible to use <code>MOVE</code> as a locking primitive because of this.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-mset",
    "command": "MSET",
    "description": "Atomically creates or modifies the string values of one or more keys.",
    "htmlContent": "<p>Sets the given keys to their respective values.\n<code>MSET</code> replaces existing values with new values, just as regular <code>SET</code>.\nSee <code>MSETNX</code> if you don&#39;t want to overwrite existing values.</p>\n<p><code>MSET</code> is atomic, so all given keys are set at once.\nIt is not possible for clients to see that some of the keys were updated while\nothers are unchanged.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; MSET key1 &quot;Hello&quot; key2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; GET key1\n&quot;Hello&quot;\n127.0.0.1:6379&gt; GET key2\n&quot;World&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-msetnx",
    "command": "MSETNX",
    "description": "Atomically modifies the string values of one or more keys only when all keys don't exist.",
    "htmlContent": "<p>Sets the given keys to their respective values.\n<code>MSETNX</code> will not perform any operation at all even if just a single key already\nexists.</p>\n<p>Because of this semantic <code>MSETNX</code> can be used in order to set different keys\nrepresenting different fields of a unique logic object in a way that ensures\nthat either all the fields or none at all are set.</p>\n<p><code>MSETNX</code> is atomic, so all given keys are set at once.\nIt is not possible for clients to see that some of the keys were updated while\nothers are unchanged.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; MSETNX key1 &quot;Hello&quot; key2 &quot;there&quot;\n(integer) 1\n127.0.0.1:6379&gt; MSETNX key2 &quot;new&quot; key3 &quot;world&quot;\n(integer) 0\n127.0.0.1:6379&gt; MGET key1 key2 key3\n1) &quot;Hello&quot;\n2) &quot;there&quot;\n3) (nil)\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-multi",
    "command": "MULTI",
    "description": "Starts a transaction.",
    "htmlContent": "<p>Marks the start of a <a href=\"../topics/transactions\">transaction</a> block.\nSubsequent commands will be queued for atomic execution using <code>EXEC</code>.</p>\n",
    "categories": [
      "transactions"
    ]
  },
  {
    "unid": "cmd-object",
    "command": "OBJECT",
    "description": "A container for object introspection commands.",
    "htmlContent": "<p>This is a container command for object introspection commands.</p>\n<p>To see the list of available commands you can call <code>OBJECT HELP</code>.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-object-encoding",
    "command": "OBJECT ENCODING",
    "description": "Returns the internal encoding of a Valkey object.",
    "htmlContent": "<p>Returns the internal encoding for the Valkey object stored at <code>&lt;key&gt;</code></p>\n<p>Valkey objects can be encoded in different ways:</p>\n<ul>\n<li><p>Strings can be encoded as: </p>\n<ul>\n<li><code>raw</code>, normal string encoding.</li>\n<li><code>int</code>, strings representing integers in a 64-bit signed interval, encoded in this way to save space.</li>\n<li><code>embstr</code>, an embedded string, which is an object where the internal simple dynamic string, <code>sds</code>, is an unmodifiable string allocated in the same chuck as the object itself.\n<code>embstr</code> can be strings with lengths up to the hardcoded limit of <code>OBJ_ENCODING_EMBSTR_SIZE_LIMIT</code> or 44 bytes.</li>\n</ul>\n</li>\n<li><p>Lists can be encoded as:</p>\n<ul>\n<li><code>linkedlist</code>, simple list encoding. No longer used, an old list encoding.</li>\n<li><code>listpack</code>, a space-efficient encoding used for small lists.</li>\n<li><code>quicklist</code>, encoded as linked list of ziplists or listpacks.</li>\n</ul>\n</li>\n<li><p>Sets can be encoded as:</p>\n<ul>\n<li><code>hashtable</code>, normal set encoding.</li>\n<li><code>intset</code>, a special encoding used for small sets composed solely of integers.</li>\n<li><code>listpack</code>, a space-efficient encoding used for small sets.</li>\n</ul>\n</li>\n<li><p>Hashes can be encoded as:</p>\n<ul>\n<li><code>zipmap</code>, no longer used, an old hash encoding.</li>\n<li><code>hashtable</code>, normal hash encoding.</li>\n<li><code>listpack</code>, a space-efficient encoding used for small hashes.</li>\n</ul>\n</li>\n<li><p>Sorted Sets can be encoded as:</p>\n<ul>\n<li><code>skiplist</code>, normal sorted set encoding.</li>\n<li><code>listpack</code>, a space-efficient encoding used for small sorted sets.</li>\n</ul>\n</li>\n<li><p>Streams can be encoded as:</p>\n<ul>\n<li><code>stream</code>, encoded as a radix tree of listpacks.</li>\n</ul>\n</li>\n</ul>\n<p>All the specially encoded types are automatically converted to the general type once you perform an operation that makes it impossible for Valkey to retain the space saving encoding.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-object-freq",
    "command": "OBJECT FREQ",
    "description": "Returns the logarithmic access frequency counter of a Valkey object.",
    "htmlContent": "<p>This command returns the logarithmic access frequency counter of a Valkey object stored at <code>&lt;key&gt;</code>.</p>\n<p>The command is only available when the <code>maxmemory-policy</code> configuration directive is set to one of the LFU policies.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-object-help",
    "command": "OBJECT HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>OBJECT HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-object-idletime",
    "command": "OBJECT IDLETIME",
    "description": "Returns the time since the last access to a Valkey object.",
    "htmlContent": "<p>This command returns the time in seconds since the last access to the value stored at <code>&lt;key&gt;</code>.</p>\n<p>The command is only available when the <code>maxmemory-policy</code> configuration directive is not set to one of the LFU policies.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-object-refcount",
    "command": "OBJECT REFCOUNT",
    "description": "Returns the reference count of a value of a key.",
    "htmlContent": "<p>This command returns the reference count of the stored at <code>&lt;key&gt;</code>.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-persist",
    "command": "PERSIST",
    "description": "Removes the expiration time of a key.",
    "htmlContent": "<p>Remove the existing timeout on <code>key</code>, turning the key from <em>volatile</em> (a key\nwith an expire set) to <em>persistent</em> (a key that will never expire as no timeout\nis associated).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXPIRE mykey 10\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) 10\n127.0.0.1:6379&gt; PERSIST mykey\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) -1\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-pexpire",
    "command": "PEXPIRE",
    "description": "Sets the expiration time of a key in milliseconds.",
    "htmlContent": "<p>This command works exactly like <code>EXPIRE</code> but the time to live of the key is\nspecified in milliseconds instead of seconds.</p>\n<h2>Options</h2>\n<p>The <code>PEXPIRE</code> command supports a set of options</p>\n<ul>\n<li><code>NX</code> -- Set expiry only when the key has no expiry</li>\n<li><code>XX</code> -- Set expiry only when the key has an existing expiry</li>\n<li><code>GT</code> -- Set expiry only when the new expiry is greater than current one</li>\n<li><code>LT</code> -- Set expiry only when the new expiry is less than current one</li>\n</ul>\n<p>A non-volatile key is treated as an infinite TTL for the purpose of <code>GT</code> and <code>LT</code>.\nThe <code>GT</code>, <code>LT</code> and <code>NX</code> options are mutually exclusive.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; PEXPIRE mykey 1500\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) 1\n127.0.0.1:6379&gt; PTTL mykey\n(integer) 1480\n127.0.0.1:6379&gt; PEXPIRE mykey 1000 XX\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) 1\n127.0.0.1:6379&gt; PEXPIRE mykey 1000 NX\n(integer) 0\n127.0.0.1:6379&gt; TTL mykey\n(integer) 1\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-pexpireat",
    "command": "PEXPIREAT",
    "description": "Sets the expiration time of a key to a Unix milliseconds timestamp.",
    "htmlContent": "<p><code>PEXPIREAT</code> has the same effect and semantic as <code>EXPIREAT</code>, but the Unix time at\nwhich the key will expire is specified in milliseconds instead of seconds.</p>\n<h2>Options</h2>\n<p>The <code>PEXPIREAT</code> command supports a set of options since Redis OSS 7.0:</p>\n<ul>\n<li><code>NX</code> -- Set expiry only when the key has no expiry</li>\n<li><code>XX</code> -- Set expiry only when the key has an existing expiry</li>\n<li><code>GT</code> -- Set expiry only when the new expiry is greater than current one</li>\n<li><code>LT</code> -- Set expiry only when the new expiry is less than current one</li>\n</ul>\n<p>A non-volatile key is treated as an infinite TTL for the purpose of <code>GT</code> and <code>LT</code>.\nThe <code>GT</code>, <code>LT</code> and <code>NX</code> options are mutually exclusive.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; PEXPIREAT mykey 1555555555005\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) -2\n127.0.0.1:6379&gt; PTTL mykey\n(integer) -2\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-pexpiretime",
    "command": "PEXPIRETIME",
    "description": "Returns the expiration time of a key as a Unix milliseconds timestamp.",
    "htmlContent": "<p><code>PEXPIRETIME</code> has the same semantic as <code>EXPIRETIME</code>, but returns the absolute Unix expiration timestamp in milliseconds instead of seconds.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; PEXPIREAT mykey 33177117420000\n(integer) 1\n127.0.0.1:6379&gt; PEXPIRETIME mykey\n(integer) 33177117420000\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-pfadd",
    "command": "PFADD",
    "description": "Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Adds all the element arguments to the HyperLogLog data structure stored at the variable name specified as first argument.</p>\n<p>As a side effect of this command the HyperLogLog internals may be updated to reflect a different estimation of the number of unique items added so far (the cardinality of the set).</p>\n<p>If the approximated cardinality estimated by the HyperLogLog changed after executing the command, <code>PFADD</code> returns 1, otherwise 0 is returned. The command automatically creates an empty HyperLogLog structure (that is, a String of a specified length and with a given encoding) if the specified key does not exist.</p>\n<p>To call the command without elements but just the variable name is valid, this will result into no operation performed if the variable already exists, or just the creation of the data structure if the key does not exist (in the latter case 1 is returned).</p>\n<p>For an introduction to HyperLogLog data structure check the <code>PFCOUNT</code> command page.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; PFADD hll a b c d e f g\n(integer) 1\n127.0.0.1:6379&gt; PFCOUNT hll\n(integer) 7\n</code></pre>\n",
    "categories": [
      "hyperloglog"
    ]
  },
  {
    "unid": "cmd-pfcount",
    "command": "PFCOUNT",
    "description": "Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).",
    "htmlContent": "<p>When called with a single key, returns the approximated cardinality computed by the HyperLogLog data structure stored at the specified variable, which is 0 if the variable does not exist.</p>\n<p>When called with multiple keys, returns the approximated cardinality of the union of the HyperLogLogs passed, by internally merging the HyperLogLogs stored at the provided keys into a temporary HyperLogLog.</p>\n<p>The HyperLogLog data structure can be used in order to count <strong>unique</strong> elements in a set using just a small constant amount of memory, specifically 12k bytes for every HyperLogLog (plus a few bytes for the key itself).</p>\n<p>The returned cardinality of the observed set is not exact, but approximated with a standard error of 0.81%.</p>\n<p>For example in order to take the count of all the unique search queries performed in a day, a program needs to call <code>PFADD</code> every time a query is processed. The estimated number of unique queries can be retrieved with <code>PFCOUNT</code> at any time.</p>\n<p>Note: as a side effect of calling this function, it is possible that the HyperLogLog is modified, since the last 8 bytes encode the latest computed cardinality\nfor caching purposes. So <code>PFCOUNT</code> is technically a write command.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; PFADD hll foo bar zap\n(integer) 1\n127.0.0.1:6379&gt; PFADD hll zap zap zap\n(integer) 0\n127.0.0.1:6379&gt; PFADD hll foo bar\n(integer) 0\n127.0.0.1:6379&gt; PFCOUNT hll\n(integer) 3\n127.0.0.1:6379&gt; PFADD some-other-hll 1 2 3\n(integer) 1\n127.0.0.1:6379&gt; PFCOUNT hll some-other-hll\n(integer) 6\n</code></pre>\n<h2>Performances</h2>\n<p>When <code>PFCOUNT</code> is called with a single key, performances are excellent even if\nin theory constant times to process a dense HyperLogLog are high. This is\npossible because the <code>PFCOUNT</code> uses caching in order to remember the cardinality\npreviously computed, that rarely changes because most <code>PFADD</code> operations will\nnot update any register. Hundreds of operations per second are possible.</p>\n<p>When <code>PFCOUNT</code> is called with multiple keys, an on-the-fly merge of the\nHyperLogLogs is performed, which is slow, moreover the cardinality of the union\ncan&#39;t be cached, so when used with multiple keys <code>PFCOUNT</code> may take a time in\nthe order of magnitude of the millisecond, and should be not abused.</p>\n<p>The user should take in mind that single-key and multiple-keys executions of\nthis command are semantically different and have different performances.</p>\n<h2>HyperLogLog representation</h2>\n<p>HyperLogLogs are represented using a double representation: the <em>sparse</em> representation suitable for HLLs counting a small number of elements (resulting in a small number of registers set to non-zero value), and a <em>dense</em> representation suitable for higher cardinalities. Valkey automatically switches from the sparse to the dense representation when needed.</p>\n<p>The sparse representation uses a run-length encoding optimized to store efficiently a big number of registers set to zero. The dense representation is a String of 12288 bytes in order to store 16384 6-bit counters. The need for the double representation comes from the fact that using 12k (which is the dense representation memory requirement) to encode just a few registers for smaller cardinalities is extremely suboptimal.</p>\n<p>Both representations are prefixed with a 16 bytes header, that includes a magic, an encoding / version field, and the cached cardinality estimation computed, stored in little endian format (the most significant bit is 1 if the estimation is invalid since the HyperLogLog was updated since the cardinality was computed).</p>\n<p>The HyperLogLog, being a String, can be retrieved with <code>GET</code> and restored with <code>SET</code>. Calling <code>PFADD</code>, <code>PFCOUNT</code> or <code>PFMERGE</code> commands with a corrupted HyperLogLog is never a problem, it may return random values but does not affect the stability of the server. Most of the times when corrupting a sparse representation, the server recognizes the corruption and returns an error.</p>\n<p>The representation is neutral from the point of view of the processor word size and endianness, so the same representation is used by 32 bit and 64 bit processor, big endian or little endian.</p>\n<p>More details about the HyperLogLog implementation can be found in <a href=\"https://web.archive.org/web/20241019222035/http://antirez.com/news/75\">this blog post</a>. The source code of the implementation in the <code>hyperloglog.c</code> file is also easy to read and understand, and includes a full specification for the exact encoding used for the sparse and dense representations.</p>\n",
    "categories": [
      "hyperloglog"
    ]
  },
  {
    "unid": "cmd-pfdebug",
    "command": "PFDEBUG",
    "description": "Internal commands for debugging HyperLogLog values.",
    "htmlContent": "<p>The <code>PFDEBUG</code> command is an internal command.\nIt is meant to be used for developing and testing Valkey.</p>\n",
    "categories": [
      "hyperloglog"
    ]
  },
  {
    "unid": "cmd-pfmerge",
    "command": "PFMERGE",
    "description": "Merges one or more HyperLogLog values into a single key.",
    "htmlContent": "<p>Merge multiple HyperLogLog values into a unique value that will approximate\nthe cardinality of the union of the observed Sets of the source HyperLogLog\nstructures.</p>\n<p>The computed merged HyperLogLog is set to the destination variable, which is\ncreated if does not exist (defaulting to an empty HyperLogLog).</p>\n<p>If the destination variable exists, it is treated as one of the source sets \nand its cardinality will be included in the cardinality of the computed\nHyperLogLog.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; PFADD hll1 foo bar zap a\n(integer) 1\n127.0.0.1:6379&gt; PFADD hll2 a b c foo\n(integer) 1\n127.0.0.1:6379&gt; PFMERGE hll3 hll1 hll2\nOK\n127.0.0.1:6379&gt; PFCOUNT hll3\n(integer) 6\n</code></pre>\n",
    "categories": [
      "hyperloglog"
    ]
  },
  {
    "unid": "cmd-pfselftest",
    "command": "PFSELFTEST",
    "description": "An internal command for testing HyperLogLog values.",
    "htmlContent": "<p>The <code>PFSELFTEST</code> command is an internal command.\nIt is meant to be used for developing and testing Valkey.</p>\n",
    "categories": [
      "hyperloglog"
    ]
  },
  {
    "unid": "cmd-ping",
    "command": "PING",
    "description": "Returns the server's liveliness response.",
    "htmlContent": "<p>Returns <code>PONG</code> if no argument is provided, otherwise return a copy of the\nargument as a bulk.\nThis command is useful for:</p>\n<ol>\n<li>Testing whether a connection is still alive.</li>\n<li>Verifying the server&#39;s ability to serve data - an error is returned when this isn&#39;t the case (e.g., during load from persistence or accessing a stale replica).</li>\n<li>Measuring latency.</li>\n</ol>\n<p>If the client is in RESP2 and is subscribed to a channel or a pattern, it will instead return a\nmulti-bulk with a &quot;pong&quot; in the first position and an empty bulk in the second\nposition, unless an argument is provided in which case it returns a copy\nof the argument.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; PING\nPONG\n127.0.0.1:6379&gt; \n127.0.0.1:6379&gt; PING &quot;hello world&quot;\n&quot;hello world&quot;\n</code></pre>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-psetex",
    "command": "PSETEX",
    "description": "Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.",
    "htmlContent": "<p><code>PSETEX</code> works exactly like <code>SETEX</code> with the sole difference that the expire\ntime is specified in milliseconds instead of seconds.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; PSETEX mykey 1000 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; PTTL mykey\n(integer) 990\n127.0.0.1:6379&gt; GET mykey\n&quot;Hello&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-psubscribe",
    "command": "PSUBSCRIBE",
    "description": "Listens for messages published to channels that match one or more patterns.",
    "htmlContent": "<p>Subscribes the client to the given patterns.</p>\n<p>Supported glob-style patterns:</p>\n<ul>\n<li><code>h?llo</code> subscribes to <code>hello</code>, <code>hallo</code> and <code>hxllo</code></li>\n<li><code>h*llo</code> subscribes to <code>hllo</code> and <code>heeeello</code></li>\n<li><code>h[ae]llo</code> subscribes to <code>hello</code> and <code>hallo,</code> but not <code>hillo</code></li>\n</ul>\n<p>Use <code>\\</code> to escape special characters if you want to match them verbatim.</p>\n<p>Once the client enters the subscribed state it is not supposed to issue any other commands, except for additional <code>SUBSCRIBE</code>, <code>SSUBSCRIBE</code>, <code>PSUBSCRIBE</code>, <code>UNSUBSCRIBE</code>, <code>SUNSUBSCRIBE</code>, <code>PUNSUBSCRIBE</code>, <code>PING</code>, <code>RESET</code> and <code>QUIT</code> commands.\nHowever, if RESP3 is used (see <code>HELLO</code>) it is possible for a client to issue any commands while in subscribed state.</p>\n<p>Note that <code>RESET</code> can be called to exit subscribed state.</p>\n<p>For more information, see <a href=\"../topics/pubsub\">Pub/sub</a>.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-psync",
    "command": "PSYNC",
    "description": "An internal command used in replication.",
    "htmlContent": "<p>Initiates a replication stream from the primary.</p>\n<p>The <code>PSYNC</code> command is called by Valkey replicas for initiating a replication\nstream from the primary.</p>\n<p>For more information about replication in Valkey please check the\n<a href=\"../topics/replication\">replication page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-pttl",
    "command": "PTTL",
    "description": "Returns the expiration time in milliseconds of a key.",
    "htmlContent": "<p>Like <code>TTL</code> this command returns the remaining time to live of a key that has an\nexpire set, with the sole difference that <code>TTL</code> returns the amount of remaining\ntime in seconds while <code>PTTL</code> returns it in milliseconds.</p>\n<p>The command returns the following values in case of errors:</p>\n<ul>\n<li>The command returns <code>-2</code> if the key does not exist.</li>\n<li>The command returns <code>-1</code> if the key exists but has no associated expire.</li>\n</ul>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXPIRE mykey 1\n(integer) 1\n127.0.0.1:6379&gt; PTTL mykey\n(integer) 989\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-publish",
    "command": "PUBLISH",
    "description": "Posts a message to a channel.",
    "htmlContent": "<p>Posts a message to the given channel.</p>\n<p>In a Valkey Cluster clients can publish to every node. The cluster makes sure\nthat published messages are forwarded as needed, so clients can subscribe to any\nchannel by connecting to any one of the nodes.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub",
    "command": "PUBSUB",
    "description": "A container for Pub/Sub commands.",
    "htmlContent": "<p>This is a container command for Pub/Sub introspection commands.</p>\n<p>To see the list of available commands you can call <code>PUBSUB HELP</code>.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub-channels",
    "command": "PUBSUB CHANNELS",
    "description": "Returns the active channels.",
    "htmlContent": "<p>Lists the currently <em>active channels</em>.</p>\n<p>An active channel is a Pub/Sub channel with one or more subscribers (excluding clients subscribed to patterns).</p>\n<p>If no <code>pattern</code> is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.</p>\n<p>Cluster note: in a Valkey Cluster clients can subscribe to every node, and can also publish to every other node. The cluster will make sure that published messages are forwarded as needed. That said, <code>PUBSUB</code>&#39;s replies in a cluster only report information from the node&#39;s Pub/Sub context, rather than the entire cluster.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub-help",
    "command": "PUBSUB HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>PUBSUB HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub-numpat",
    "command": "PUBSUB NUMPAT",
    "description": "Returns a count of unique pattern subscriptions.",
    "htmlContent": "<p>Returns the number of unique patterns that are subscribed to by clients (that are performed using the <code>PSUBSCRIBE</code> command).</p>\n<p>Note that this isn&#39;t the count of clients subscribed to patterns, but the total number of unique patterns all the clients are subscribed to.</p>\n<p>Cluster note: in a Valkey Cluster clients can subscribe to every node, and can also publish to every other node. The cluster will make sure that published messages are forwarded as needed. That said, <code>PUBSUB</code>&#39;s replies in a cluster only report information from the node&#39;s Pub/Sub context, rather than the entire cluster.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub-numsub",
    "command": "PUBSUB NUMSUB",
    "description": "Returns a count of subscribers to channels.",
    "htmlContent": "<p>Returns the number of subscribers (exclusive of clients subscribed to patterns) for the specified channels.</p>\n<p>Note that it is valid to call this command without channels. In this case it will just return an empty list.</p>\n<p>Cluster note: in a Valkey Cluster clients can subscribe to every node, and can also publish to every other node. The cluster will make sure that published messages are forwarded as needed. That said, <code>PUBSUB</code>&#39;s replies in a cluster only report information from the node&#39;s Pub/Sub context, rather than the entire cluster.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub-shardchannels",
    "command": "PUBSUB SHARDCHANNELS",
    "description": "Returns the active shard channels.",
    "htmlContent": "<p>Lists the currently <em>active shard channels</em>.</p>\n<p>An active shard channel is a Pub/Sub shard channel with one or more subscribers.</p>\n<p>If no <code>pattern</code> is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.</p>\n<p>The information returned about the active shard channels are at the shard level and not at the cluster level.</p>\n<h2>Examples</h2>\n<pre><code>&gt; PUBSUB SHARDCHANNELS\n1) &quot;orders&quot;\n&gt; PUBSUB SHARDCHANNELS o*\n1) &quot;orders&quot;\n</code></pre>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-pubsub-shardnumsub",
    "command": "PUBSUB SHARDNUMSUB",
    "description": "Returns the count of subscribers of shard channels.",
    "htmlContent": "<p>Returns the number of subscribers for the specified shard channels.</p>\n<p>Note that it is valid to call this command without channels, in this case it will just return an empty list.</p>\n<p>Cluster note: in a Valkey Cluster, <code>PUBSUB</code>&#39;s replies in a cluster only report information from the node&#39;s Pub/Sub context, rather than the entire cluster.</p>\n<h2>Examples</h2>\n<pre><code>&gt; PUBSUB SHARDNUMSUB orders\n1) &quot;orders&quot;\n2) (integer) 1\n</code></pre>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-punsubscribe",
    "command": "PUNSUBSCRIBE",
    "description": "Stops listening to messages published to channels that match one or more patterns.",
    "htmlContent": "<p>Unsubscribes the client from the given patterns, or from all of them if none is\ngiven.</p>\n<p>When no patterns are specified, the client is unsubscribed from all the\npreviously subscribed patterns.\nIn this case, a message for every unsubscribed pattern will be sent to the\nclient.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-quit",
    "command": "QUIT",
    "description": "Closes the connection.",
    "htmlContent": "<p>Ask the server to close the connection.\nThe connection is closed as soon as all pending replies have been written to the\nclient.</p>\n<p><strong>Note:</strong> Clients should not use this command.\nInstead, clients should simply close the connection when they&#39;re not used anymore.\nTerminating a connection on the client side is preferable, as it eliminates <code>TIME_WAIT</code> lingering sockets on the server side.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-randomkey",
    "command": "RANDOMKEY",
    "description": "Returns a random key name from the database.",
    "htmlContent": "<p>Return a random key from the currently selected database.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-readonly",
    "command": "READONLY",
    "description": "Enables read-only queries for a connection to a Valkey Cluster replica node.",
    "htmlContent": "<p>Enables read queries for a connection to a Valkey replica node.</p>\n<p>In cluster mode, replica nodes will redirect clients to the authoritative primary for\nthe hash slot involved in a given command, however clients can use replicas\nin order to scale reads using the <code>READONLY</code> command.</p>\n<p><code>READONLY</code> tells a Valkey Cluster replica node that the client is willing to\nread possibly stale data and is not interested in running write queries.</p>\n<p>When the connection is in readonly mode, the cluster will send a redirection\nto the client only if the operation involves keys not served by the replica&#39;s\nprimary node. This may happen because:</p>\n<ol>\n<li>The client sent a command about hash slots never served by the primary of this replica.</li>\n<li>The cluster was reconfigured (for example resharded) and the replica is no longer able to serve commands for a given hash slot.</li>\n<li>Since Valkey 8.0, if a slot migration is ongoing.\nIn this case the replica can return an ASK redirect or a TRYAGAIN error reply.\nIn earlier versions, replicas are not aware of ongoing slot migrations.</li>\n</ol>\n<p>In standalone mode, by default, clients accessing a replica node can execute read queries, (which might read stale data) without entering readonly mode.</p>\n<p>Since Valkey 8.0, if a client in standalone mode uses the <code>CLIENT CAPA redirect</code> command to declare its capability to handle redirections, then the replica node will send redirection messages to the client when executing both read and write commands. The client must issue the <code>READONLY</code> command to enter readonly mode before it can execute read commands.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-readwrite",
    "command": "READWRITE",
    "description": "Enables read-write queries for a connection to a Reids Cluster replica node.",
    "htmlContent": "<p>Disables read queries for a connection to a Valkey replica node.</p>\n<p>Read queries against a Valkey Cluster replica node are disabled by default.</p>\n<p>For standalone replica nodes, since Valkey 8.0, read queries are also disabled\nfor clients that have executed the <code>CLIENT CAPA redirect</code> command.</p>\n<p>But you can use the <code>READONLY</code> command to change this behavior on a per-\nconnection basis. The <code>READWRITE</code> command resets the readonly mode flag\nof a connection back to readwrite.</p>\n",
    "categories": [
      "cluster"
    ]
  },
  {
    "unid": "cmd-rename",
    "command": "RENAME",
    "description": "Renames a key and overwrites the destination.",
    "htmlContent": "<p>Renames <code>key</code> to <code>newkey</code>.\nIt returns an error when <code>key</code> does not exist.\nIf <code>newkey</code> already exists it is overwritten, when this happens <code>RENAME</code> executes an implicit <code>DEL</code> operation, so if the deleted key contains a very big value it may cause high latency even if <code>RENAME</code> itself is usually a constant-time operation.</p>\n<p>In Cluster mode, both <code>key</code> and <code>newkey</code> must be in the same <strong>hash slot</strong>, meaning that in practice only keys that have the same hash tag can be reliably renamed in cluster.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; RENAME mykey myotherkey\nOK\n127.0.0.1:6379&gt; GET myotherkey\n&quot;Hello&quot;\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-renamenx",
    "command": "RENAMENX",
    "description": "Renames a key only when the target key name doesn't exist.",
    "htmlContent": "<p>Renames <code>key</code> to <code>newkey</code> if <code>newkey</code> does not yet exist.\nIt returns an error when <code>key</code> does not exist.</p>\n<p>In Cluster mode, both <code>key</code> and <code>newkey</code> must be in the same <strong>hash slot</strong>, meaning that in practice only keys that have the same hash tag can be reliably renamed in cluster.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; SET myotherkey &quot;World&quot;\nOK\n127.0.0.1:6379&gt; RENAMENX mykey myotherkey\n(integer) 0\n127.0.0.1:6379&gt; GET myotherkey\n&quot;World&quot;\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-replconf",
    "command": "REPLCONF",
    "description": "An internal command for configuring the replication stream.",
    "htmlContent": "<p>The <code>REPLCONF</code> command is an internal command.\nIt is used by a Valkey primary to configure a connected replica.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-replicaof",
    "command": "REPLICAOF",
    "description": "Configures a server as replica of another, or promotes it to a master.",
    "htmlContent": "<p>The <code>REPLICAOF</code> command can change the replication settings of a replica on the fly.</p>\n<p>If a Valkey server is already acting as replica, the command <code>REPLICAOF</code> NO ONE will turn off the replication, turning the Valkey server into a PRIMARY.  In the proper form <code>REPLICAOF</code> hostname port will make the server a replica of another server listening at the specified hostname and port.</p>\n<p>If a server is already a replica of some primary, <code>REPLICAOF</code> hostname port will stop the replication against the old server and start the synchronization against the new one, discarding the old dataset.</p>\n<p>The form <code>REPLICAOF</code> NO ONE will stop replication, turning the server into a MASTER, but will not discard the replication. So, if the old primary stops working, it is possible to turn the replica into a primary and set the application to use this new primary in read/write. Later when the other Valkey server is fixed, it can be reconfigured to work as a replica.</p>\n<h2>Examples</h2>\n<pre><code>&gt; REPLICAOF NO ONE\n&quot;OK&quot;\n\n&gt; REPLICAOF 127.0.0.1 6799\n&quot;OK&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-reset",
    "command": "RESET",
    "description": "Resets the connection.",
    "htmlContent": "<p>This command performs a full reset of the connection&#39;s server-side context, \nmimicking the effect of disconnecting and reconnecting again.</p>\n<p>When the command is called from a regular client connection, it does the\nfollowing:</p>\n<ul>\n<li>Discards the current <code>MULTI</code> transaction block, if one exists.</li>\n<li>Unwatches all keys <code>WATCH</code>ed by the connection.</li>\n<li>Disables <code>CLIENT TRACKING</code>, if in use.</li>\n<li>Sets the connection to <code>READWRITE</code> mode.</li>\n<li>Cancels the connection&#39;s <code>ASKING</code> mode, if previously set.</li>\n<li>Sets <code>CLIENT REPLY</code> to <code>ON</code>.</li>\n<li>Sets the protocol version to RESP2.</li>\n<li><code>SELECT</code>s database 0.</li>\n<li>Exits <code>MONITOR</code> mode, when applicable.</li>\n<li>Aborts Pub/Sub&#39;s subscription state (<code>SUBSCRIBE</code> and <code>PSUBSCRIBE</code>), when\nappropriate.</li>\n<li>Deauthenticates the connection, requiring a call <code>AUTH</code> to reauthenticate when\nauthentication is enabled.</li>\n<li>Turns off <code>NO-EVICT</code> mode.</li>\n<li>Turns off <code>NO-TOUCH</code> mode.</li>\n</ul>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-restore",
    "command": "RESTORE",
    "description": "Creates a key from the serialized representation of a value.",
    "htmlContent": "<p>Create a key associated with a value that is obtained by deserializing the\nprovided serialized value (obtained via <code>DUMP</code>).</p>\n<p>If <code>ttl</code> is 0 the key is created without any expire, otherwise the specified\nexpire time (in milliseconds) is set.</p>\n<p>If the <code>ABSTTL</code> modifier was used, <code>ttl</code> should represent an absolute\n<a href=\"http://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a> (in milliseconds) in which the key will expire.</p>\n<p>For eviction purposes, you may use the <code>IDLETIME</code> or <code>FREQ</code> modifiers. See\n<code>OBJECT</code> for more information.</p>\n<p><code>!RESTORE</code> will return a &quot;Target key name is busy&quot; error when <code>key</code> already\nexists unless you use the <code>REPLACE</code> modifier.</p>\n<p><code>!RESTORE</code> checks the RDB version and data checksum.\nIf they don&#39;t match an error is returned.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; DEL mykey\n(integer) 0\n127.0.0.1:6379&gt; RESTORE mykey 0 &quot;\\n\\x17\\x17\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x03\\x00\\\n                        x00\\xc0\\x01\\x00\\x04\\xc0\\x02\\x00\\x04\\xc0\\x03\\x00\\\n                        xff\\x04\\x00u#&lt;\\xc0;.\\xe9\\xdd&quot;\nOK\n127.0.0.1:6379&gt; TYPE mykey\nlist\n127.0.0.1:6379&gt; LRANGE mykey 0 -1\n1) &quot;1&quot;\n2) &quot;2&quot;\n3) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-restore-asking",
    "command": "RESTORE-ASKING",
    "description": "An internal command for migrating keys in a cluster.",
    "htmlContent": "<p>The <code>RESTORE-ASKING</code> command is an internal command.\nIt is used by a Valkey cluster primary during slot migration.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-role",
    "command": "ROLE",
    "description": "Returns the replication role.",
    "htmlContent": "<p>Provide information on the role of a Valkey instance in the context of replication, by returning if the instance is currently a <code>master</code>, <code>slave</code>, or <code>sentinel</code>. The command also returns additional information about the state of the replication (if the role is primary or replica) or the list of monitored primary names (if the role is sentinel).</p>\n<h2>Output format</h2>\n<p>The command returns an array of elements. The first element is the role of\nthe instance, as one of the following three strings:</p>\n<ul>\n<li>&quot;master&quot;</li>\n<li>&quot;slave&quot;</li>\n<li>&quot;sentinel&quot;</li>\n</ul>\n<p>The additional elements of the array depends on the role.</p>\n<h2>Primary output</h2>\n<p>An example of output when <code>ROLE</code> is called in a primary instance:</p>\n<pre><code>1) &quot;master&quot;\n2) (integer) 3129659\n3) 1) 1) &quot;127.0.0.1&quot;\n      2) &quot;9001&quot;\n      3) &quot;3129242&quot;\n   2) 1) &quot;127.0.0.1&quot;\n      2) &quot;9002&quot;\n      3) &quot;3129543&quot;\n</code></pre>\n<p>The primary output is composed of the following parts:</p>\n<ol>\n<li>The string <code>master</code>.</li>\n<li>The current primary replication offset, which is an offset that primaries and replicas share to understand, in partial resynchronizations, the part of the replication stream the replicas needs to fetch to continue.</li>\n<li>An array composed of three elements array representing the connected replicas. Every sub-array contains the replica IP, port, and the last acknowledged replication offset.</li>\n</ol>\n<h2>Output of the command on replicas</h2>\n<p>An example of output when <code>ROLE</code> is called in a replica instance:</p>\n<pre><code>1) &quot;slave&quot;\n2) &quot;127.0.0.1&quot;\n3) (integer) 9000\n4) &quot;connected&quot;\n5) (integer) 3167038\n</code></pre>\n<p>The replica output is composed of the following parts:</p>\n<ol>\n<li>The string <code>slave</code>, because of Redis OSS compatibility (see note at the end of this page).</li>\n<li>The IP of the primary.</li>\n<li>The port number of the primary.</li>\n<li>The state of the replication from the point of view of the primary, that can be <code>connect</code> (the instance needs to connect to its primary), <code>connecting</code> (the primary-replica connection is in progress), <code>sync</code> (the primary and replica are trying to perform the synchronization), <code>connected</code> (the replica is online).</li>\n<li>The amount of data received from the replica so far in terms of primary replication offset.</li>\n</ol>\n<h2>Sentinel output</h2>\n<p>An example of Sentinel output:</p>\n<pre><code>1) &quot;sentinel&quot;\n2) 1) &quot;resque-master&quot;\n   2) &quot;html-fragments-master&quot;\n   3) &quot;stats-master&quot;\n   4) &quot;metadata-master&quot;\n</code></pre>\n<p>The sentinel output is composed of the following parts:</p>\n<ol>\n<li>The string <code>sentinel</code>.</li>\n<li>An array of primary names monitored by this Sentinel instance.</li>\n</ol>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ROLE\n1) &quot;master&quot;\n2) (integer) 0\n3) (empty array)\n</code></pre>\n<p><strong>A note about the word slave used in this man page</strong>: If not for backward compatibility, the Valkey project no longer uses the words &quot;master&quot; and &quot;slave&quot;. Unfortunately in the given commands these words are part of the protocol, so we&#39;ll be able to remove such occurrences only when this API will be naturally deprecated.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-rpop",
    "command": "RPOP",
    "description": "Returns and removes the last elements of a list. Deletes the list if the last element was popped.",
    "htmlContent": "<p>Removes and returns the last elements of the list stored at <code>key</code>.</p>\n<p>By default, the command pops a single element from the end of the list.\nWhen provided with the optional <code>count</code> argument, the reply will consist of up\nto <code>count</code> elements, depending on the list&#39;s length.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;five&quot;\n(integer) 5\n127.0.0.1:6379&gt; RPOP mylist\n&quot;five&quot;\n127.0.0.1:6379&gt; RPOP mylist 2\n1) &quot;four&quot;\n2) &quot;three&quot;\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;one&quot;\n2) &quot;two&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-rpoplpush",
    "command": "RPOPLPUSH",
    "description": "Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.",
    "htmlContent": "<p>Atomically returns and removes the last element (tail) of the list stored at\n<code>source</code>, and pushes the element at the first element (head) of the list stored\nat <code>destination</code>.</p>\n<p>For example: consider <code>source</code> holding the list <code>a,b,c</code>, and <code>destination</code>\nholding the list <code>x,y,z</code>.\nExecuting <code>RPOPLPUSH</code> results in <code>source</code> holding <code>a,b</code> and <code>destination</code>\nholding <code>c,x,y,z</code>.</p>\n<p>If <code>source</code> does not exist, the value <code>nil</code> is returned and no operation is\nperformed.\nIf <code>source</code> and <code>destination</code> are the same, the operation is equivalent to\nremoving the last element from the list and pushing it as first element of the\nlist, so it can be considered as a list rotation command.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; RPOPLPUSH mylist myotherlist\n&quot;three&quot;\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;one&quot;\n2) &quot;two&quot;\n127.0.0.1:6379&gt; LRANGE myotherlist 0 -1\n1) &quot;three&quot;\n</code></pre>\n<h2>Pattern: Reliable queue</h2>\n<p>Valkey is often used as a messaging server to implement processing of background\njobs or other kinds of messaging tasks.\nA simple form of queue is often obtained pushing values into a list in the\nproducer side, and waiting for this values in the consumer side using <code>RPOP</code>\n(using polling), or <code>BRPOP</code> if the client is better served by a blocking\noperation.</p>\n<p>However in this context the obtained queue is not <em>reliable</em> as messages can\nbe lost, for example in the case there is a network problem or if the consumer\ncrashes just after the message is received but before it can be processed.</p>\n<p><code>RPOPLPUSH</code> (or <code>BRPOPLPUSH</code> for the blocking variant) offers a way to avoid\nthis problem: the consumer fetches the message and at the same time pushes it\ninto a <em>processing</em> list.\nIt will use the <code>LREM</code> command in order to remove the message from the\n<em>processing</em> list once the message has been processed.</p>\n<p>An additional client may monitor the <em>processing</em> list for items that remain\nthere for too much time, pushing timed out items into the queue\nagain if needed.</p>\n<h2>Pattern: Circular list</h2>\n<p>Using <code>RPOPLPUSH</code> with the same source and destination key, a client can visit\nall the elements of an N-elements list, one after the other, in O(N) without\ntransferring the full list from the server to the client using a single <code>LRANGE</code>\noperation.</p>\n<p>The above pattern works even if one or both of the following conditions occur:</p>\n<ul>\n<li>There are multiple clients rotating the list: they&#39;ll fetch different \nelements, until all the elements of the list are visited, and the process \nrestarts.</li>\n<li>Other clients are actively pushing new items at the end of the list.</li>\n</ul>\n<p>The above makes it very simple to implement a system where a set of items must\nbe processed by N workers continuously as fast as possible.\nAn example is a monitoring system that must check that a set of web sites are\nreachable, with the smallest delay possible, using a number of parallel workers.</p>\n<p>Note that this implementation of workers is trivially scalable and reliable,\nbecause even if a message is lost the item is still in the queue and will be\nprocessed at the next iteration.</p>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-rpush",
    "command": "RPUSH",
    "description": "Appends one or more elements to a list. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Insert all the specified values at the tail of the list stored at <code>key</code>.\nIf <code>key</code> does not exist, it is created as empty list before performing the push\noperation.\nWhen <code>key</code> holds a value that is not a list, an error is returned.</p>\n<p>It is possible to push multiple elements using a single command call just\nspecifying multiple arguments at the end of the command.\nElements are inserted one after the other to the tail of the list, from the\nleftmost element to the rightmost element.\nSo for instance the command <code>RPUSH mylist a b c</code> will result into a list\ncontaining <code>a</code> as first element, <code>b</code> as second element and <code>c</code> as third element.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSH mylist &quot;world&quot;\n(integer) 2\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;hello&quot;\n2) &quot;world&quot;\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-rpushx",
    "command": "RPUSHX",
    "description": "Appends an element to a list only when the list exists.",
    "htmlContent": "<p>Inserts specified values at the tail of the list stored at <code>key</code>, only if <code>key</code>\nalready exists and holds a list.\nIn contrary to <code>RPUSH</code>, no operation will be performed when <code>key</code> does not yet\nexist.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; RPUSHX mylist &quot;World&quot;\n(integer) 2\n127.0.0.1:6379&gt; RPUSHX myotherlist &quot;World&quot;\n(integer) 0\n127.0.0.1:6379&gt; LRANGE mylist 0 -1\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n127.0.0.1:6379&gt; LRANGE myotherlist 0 -1\n(empty array)\n</code></pre>\n",
    "categories": [
      "list"
    ]
  },
  {
    "unid": "cmd-sadd",
    "command": "SADD",
    "description": "Adds one or more members to a set. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Add the specified members to the set stored at <code>key</code>.\nSpecified members that are already a member of this set are ignored.\nIf <code>key</code> does not exist, a new set is created before adding the specified\nmembers.</p>\n<p>An error is returned when the value stored at <code>key</code> is not a set.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;World&quot;\n(integer) 0\n127.0.0.1:6379&gt; SMEMBERS myset\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-save",
    "command": "SAVE",
    "description": "Synchronously saves the database(s) to disk.",
    "htmlContent": "<p>The <code>SAVE</code> commands performs a <strong>synchronous</strong> save of the dataset producing a\n<em>point in time</em> snapshot of all the data inside the Valkey instance, in the form\nof an RDB file.</p>\n<p>You almost never want to call <code>SAVE</code> in production environments where it will\nblock all the other clients.\nInstead usually <code>BGSAVE</code> is used.\nHowever in case of issues preventing Valkey to create the background saving child\n(for instance errors in the fork(2) system call), the <code>SAVE</code> command can be a\ngood last resort to perform the dump of the latest dataset.</p>\n<p>Please refer to the <a href=\"../topics/persistence\">persistence documentation</a> for detailed information.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-scan",
    "command": "SCAN",
    "description": "Iterates over the key names in the database.",
    "htmlContent": "<p>The <code>SCAN</code> command and the closely related commands <code>SSCAN</code>, <code>HSCAN</code> and <code>ZSCAN</code> are used in order to incrementally iterate over a collection of elements.</p>\n<ul>\n<li><code>SCAN</code> iterates the set of keys in the currently selected Valkey database.</li>\n<li><code>SSCAN</code> iterates elements of Sets types.</li>\n<li><code>HSCAN</code> iterates fields of Hash types and their associated values.</li>\n<li><code>ZSCAN</code> iterates elements of Sorted Set types and their associated scores.</li>\n</ul>\n<p>Since these commands allow for incremental iteration, returning only a small number of elements per call, they can be used in production without the downside of commands like <code>KEYS</code> or <code>SMEMBERS</code> that may block the server for a long time (even several seconds) when called against big collections of keys or elements.</p>\n<p>However while blocking commands like <code>SMEMBERS</code> are able to provide all the elements that are part of a Set in a given moment, The SCAN family of commands only offer limited guarantees about the returned elements since the collection that we incrementally iterate can change during the iteration process.</p>\n<p>Note that <code>SCAN</code>, <code>SSCAN</code>, <code>HSCAN</code> and <code>ZSCAN</code> all work very similarly, so this documentation covers all four commands. However an obvious difference is that in the case of <code>SSCAN</code>, <code>HSCAN</code> and <code>ZSCAN</code> the first argument is the name of the key holding the Set, Hash or Sorted Set value. The <code>SCAN</code> command does not need any key name argument as it iterates keys in the current database, so the iterated object is the database itself.</p>\n<h2>SCAN basic usage</h2>\n<p>SCAN is a cursor based iterator. This means that at every call of the command, the server returns an updated cursor that the user needs to use as the cursor argument in the next call.</p>\n<p>An iteration starts when the cursor is set to 0, and terminates when the cursor returned by the server is 0. The following is an example of SCAN iteration:</p>\n<pre><code>127.0.0.1:6379&gt; scan 0\n1) &quot;17&quot;\n2)  1) &quot;key:12&quot;\n    2) &quot;key:8&quot;\n    3) &quot;key:4&quot;\n    4) &quot;key:14&quot;\n    5) &quot;key:16&quot;\n    6) &quot;key:17&quot;\n    7) &quot;key:15&quot;\n    8) &quot;key:10&quot;\n    9) &quot;key:3&quot;\n   10) &quot;key:7&quot;\n   11) &quot;key:1&quot;\n127.0.0.1:6379&gt; scan 17\n1) &quot;0&quot;\n2) 1) &quot;key:5&quot;\n   2) &quot;key:18&quot;\n   3) &quot;key:0&quot;\n   4) &quot;key:2&quot;\n   5) &quot;key:19&quot;\n   6) &quot;key:13&quot;\n   7) &quot;key:6&quot;\n   8) &quot;key:9&quot;\n   9) &quot;key:11&quot;\n</code></pre>\n<p>In the example above, the first call uses zero as a cursor, to start the iteration. The second call uses the cursor returned by the previous call as the first element of the reply, that is, 17.</p>\n<p>As you can see the <strong>SCAN return value</strong> is an array of two values: the first value is the new cursor to use in the next call, the second value is an array of elements.</p>\n<p>Since in the second call the returned cursor is 0, the server signaled to the caller that the iteration finished, and the collection was completely explored. Starting an iteration with a cursor value of 0, and calling <code>SCAN</code> until the returned cursor is 0 again is called a <strong>full iteration</strong>.</p>\n<h2>Return value</h2>\n<p><code>SCAN</code>, <code>SSCAN</code>, <code>HSCAN</code> and <code>ZSCAN</code> return a two element multi-bulk reply, where the first element is a string representing an unsigned 64 bit number (the cursor), and the second element is a multi-bulk with an array of elements.</p>\n<ul>\n<li><code>SCAN</code> array of elements is a list of keys.</li>\n<li><code>SSCAN</code> array of elements is a list of Set members.</li>\n<li><code>HSCAN</code> array of elements contain two elements, a field and a value, for every returned element of the Hash.</li>\n<li><code>ZSCAN</code> array of elements contain two elements, a member and its associated score, for every returned element of the Sorted Set.</li>\n</ul>\n<h2>Scan guarantees</h2>\n<p>The <code>SCAN</code> command, and the other commands in the <code>SCAN</code> family, are able to provide to the user a set of guarantees associated to full iterations.</p>\n<ul>\n<li>A full iteration always retrieves all the elements that were present in the collection from the start to the end of a full iteration. This means that if a given element is inside the collection when an iteration is started, and is still there when an iteration terminates, then at some point <code>SCAN</code> returned it to the user.</li>\n<li>A full iteration never returns any element that was NOT present in the collection from the start to the end of a full iteration. So if an element was removed before the start of an iteration, and is never added back to the collection for all the time an iteration lasts, <code>SCAN</code> ensures that this element will never be returned.</li>\n</ul>\n<p>However because <code>SCAN</code> has very little state associated (just the cursor) it has the following drawbacks:</p>\n<ul>\n<li>A given element may be returned multiple times. It is up to the application to handle the case of duplicated elements, for example only using the returned elements in order to perform operations that are safe when re-applied multiple times.</li>\n<li>Elements that were not constantly present in the collection during a full iteration, may be returned or not: it is undefined.</li>\n</ul>\n<h2>Number of elements returned at every SCAN call</h2>\n<p><code>SCAN</code> family functions do not guarantee that the number of elements returned per call are in a given range. The commands are also allowed to return zero elements, and the client should not consider the iteration complete as long as the returned cursor is not zero.</p>\n<p>However the number of returned elements is reasonable, that is, in practical terms <code>SCAN</code> may return a maximum number of elements in the order of a few tens of elements when iterating a large collection, or may return all the elements of the collection in a single call when the iterated collection is small enough to be internally represented as an encoded data structure (this happens for small Sets, Hashes and Sorted Sets).</p>\n<p>However there is a way for the user to tune the order of magnitude of the number of returned elements per call using the <strong>COUNT</strong> option.</p>\n<h2>The COUNT option</h2>\n<p>While <code>SCAN</code> does not provide guarantees about the number of elements returned at every iteration, it is possible to empirically adjust the behavior of <code>SCAN</code> using the <strong>COUNT</strong> option. Basically with COUNT the user specifies the <em>amount of work that should be done at every call in order to retrieve elements from the collection</em>. This is <strong>just a hint</strong> for the implementation, however generally speaking this is what you could expect most of the times from the implementation.</p>\n<ul>\n<li>The default <code>COUNT</code> value is 10.</li>\n<li>When iterating the key space, or a Set, Hash or Sorted Set that is big enough to be represented by a hash table, assuming no <strong>MATCH</strong> option is used, the server will usually return <em>count</em> or a few more than <em>count</em> elements per call. Please check the <em>why SCAN may return all the elements at once</em> section later in this document.</li>\n<li>When iterating Sets encoded as intsets (small sets composed of just integers), or Hashes and Sorted Sets encoded as ziplists (small hashes and sets composed of small individual values), usually all the elements are returned in the first <code>SCAN</code> call regardless of the <code>COUNT</code> value.</li>\n</ul>\n<p>Important: <strong>there is no need to use the same COUNT value</strong> for every iteration. The caller is free to change the count from one iteration to the other as required, as long as the cursor passed in the next call is the one obtained in the previous call to the command.</p>\n<h2>The MATCH option</h2>\n<p>It is possible to only iterate elements matching a given glob-style pattern, similarly to the behavior of the <code>KEYS</code> command that takes a pattern as its only argument.</p>\n<p>To do so, just append the <code>MATCH &lt;pattern&gt;</code> arguments at the end of the <code>SCAN</code> command (it works with all the <code>SCAN</code> family commands).</p>\n<p>This is an example of iteration using <strong>MATCH</strong>:</p>\n<pre><code>127.0.0.1:6379&gt; sadd myset 1 2 3 foo foobar feelsgood\n(integer) 6\n127.0.0.1:6379&gt; sscan myset 0 match f*\n1) &quot;0&quot;\n2) 1) &quot;foo&quot;\n   2) &quot;feelsgood&quot;\n   3) &quot;foobar&quot;\n127.0.0.1:6379&gt;\n</code></pre>\n<p>It is important to note that the <strong>MATCH</strong> filter is applied after elements are retrieved from the collection, just before returning data to the client. This means that if the pattern matches very little elements inside the collection, <code>SCAN</code> will likely return no elements in most iterations. An example is shown below:</p>\n<pre><code>127.0.0.1:6379&gt; scan 0 MATCH *11*\n1) &quot;288&quot;\n2) 1) &quot;key:911&quot;\n127.0.0.1:6379&gt; scan 288 MATCH *11*\n1) &quot;224&quot;\n2) (empty list or set)\n127.0.0.1:6379&gt; scan 224 MATCH *11*\n1) &quot;80&quot;\n2) (empty list or set)\n127.0.0.1:6379&gt; scan 80 MATCH *11*\n1) &quot;176&quot;\n2) (empty list or set)\n127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 1000\n1) &quot;0&quot;\n2)  1) &quot;key:611&quot;\n    2) &quot;key:711&quot;\n    3) &quot;key:118&quot;\n    4) &quot;key:117&quot;\n    5) &quot;key:311&quot;\n    6) &quot;key:112&quot;\n    7) &quot;key:111&quot;\n    8) &quot;key:110&quot;\n    9) &quot;key:113&quot;\n   10) &quot;key:211&quot;\n   11) &quot;key:411&quot;\n   12) &quot;key:115&quot;\n   13) &quot;key:116&quot;\n   14) &quot;key:114&quot;\n   15) &quot;key:119&quot;\n   16) &quot;key:811&quot;\n   17) &quot;key:511&quot;\n   18) &quot;key:11&quot;\n127.0.0.1:6379&gt;\n</code></pre>\n<p>As you can see most of the calls returned zero elements, but the last call where a <code>COUNT</code> of 1000 was used in order to force the command to do more scanning for that iteration.</p>\n<p>When using <a href=\"../topics/cluster-tutorial\">Valkey Cluster</a>, the search is optimized for patterns that imply a single slot.\nIf a pattern can only match keys of one slot,\nValkey only iterates over keys in that slot, rather than the whole database,\nwhen searching for keys matching the pattern.\nFor example, with the pattern <code>{a}h*llo</code>, Valkey would only try to match it with the keys in slot 15495, which hash tag <code>{a}</code> implies.\nTo use pattern with hash tag, see <a href=\"../topics/cluster-spec#hash-tags\">Hash tags</a> in the Cluster specification for more information.</p>\n<h2>The TYPE option</h2>\n<p>You can use the <code>!TYPE</code> option to ask <code>SCAN</code> to only return objects that match a given <code>type</code>, allowing you to iterate through the database looking for keys of a specific type. The <strong>TYPE</strong> option is only available on the whole-database <code>SCAN</code>, not <code>HSCAN</code> or <code>ZSCAN</code> etc.</p>\n<p>The <code>type</code> argument is the same string name that the <code>TYPE</code> command returns. Note a quirk where some Valkey types, such as GeoHashes, HyperLogLogs, Bitmaps, and Bitfields, may internally be implemented using other Valkey types, such as a string or zset, so can&#39;t be distinguished from other keys of that same type by <code>SCAN</code>. For example, a ZSET and GEOHASH:</p>\n<pre><code>127.0.0.1:6379&gt; GEOADD geokey 0 0 value\n(integer) 1\n127.0.0.1:6379&gt; ZADD zkey 1000 value\n(integer) 1\n127.0.0.1:6379&gt; TYPE geokey\nzset\n127.0.0.1:6379&gt; TYPE zkey\nzset\n127.0.0.1:6379&gt; SCAN 0 TYPE zset\n1) &quot;0&quot;\n2) 1) &quot;geokey&quot;\n   2) &quot;zkey&quot;\n</code></pre>\n<p>It is important to note that the <strong>TYPE</strong> filter is also applied after elements are retrieved from the database, so the option does not reduce the amount of work the server has to do to complete a full iteration, and for rare types you may receive no elements in many iterations.</p>\n<h2>The NOVALUES option</h2>\n<p>When using <code>HSCAN</code>, you can use the <code>NOVALUES</code> option to make Valkey return only the keys in the hash table without their corresponding values.</p>\n<pre><code>127.0.0.1:6379&gt; HSET myhash a 1 b 2\n(integer) 2\n127.0.0.1:6379&gt; HSCAN myhash 0\n1) &quot;0&quot;\n2) 1) &quot;a&quot;\n   2) &quot;1&quot;\n   3) &quot;b&quot;\n   4) &quot;2&quot;\n127.0.0.1:6379&gt; HSCAN myhash 0 NOVALUES\n1) &quot;0&quot;\n2) 1) &quot;a&quot;\n   2) &quot;b&quot;\n</code></pre>\n<h2>The NOSCORES option</h2>\n<p>When using <code>ZSCAN</code>, you can use the <code>NOSCORES</code> option to make Valkey return only the members in the sorted set without their corresponding scores.</p>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 a 2 b\n(integer) 2\n127.0.0.1:6379&gt; ZSCAN myzset 0\n1) &quot;0&quot;\n2) 1) &quot;a&quot;\n   2) &quot;1&quot;\n   3) &quot;b&quot;\n   4) &quot;2&quot;\n127.0.0.1:6379&gt; ZSCAN myzset 0 NOSCORES\n1) &quot;0&quot;\n2) 1) &quot;a&quot;\n   2) &quot;b&quot;\n</code></pre>\n<h2>Multiple parallel iterations</h2>\n<p>It is possible for an infinite number of clients to iterate the same collection at the same time, as the full state of the iterator is in the cursor, that is obtained and returned to the client at every call. No server side state is taken at all.</p>\n<h2>Terminating iterations in the middle</h2>\n<p>Since there is no state server side, but the full state is captured by the cursor, the caller is free to terminate an iteration half-way without signaling this to the server in any way. An infinite number of iterations can be started and never terminated without any issue.</p>\n<h2>Calling SCAN with a corrupted cursor</h2>\n<p>Calling <code>SCAN</code> with a broken, negative, out of range, or otherwise invalid cursor, will result in undefined behavior but never in a crash. What will be undefined is that the guarantees about the returned elements can no longer be ensured by the <code>SCAN</code> implementation.</p>\n<p>The only valid cursors to use are:</p>\n<ul>\n<li>The cursor value of 0 when starting an iteration.</li>\n<li>The cursor returned by the previous call to SCAN in order to continue the iteration.</li>\n</ul>\n<h2>Guarantee of termination</h2>\n<p>The <code>SCAN</code> algorithm is guaranteed to terminate only if the size of the iterated collection remains bounded to a given maximum size, otherwise iterating a collection that always grows may result into <code>SCAN</code> to never terminate a full iteration.</p>\n<p>This is easy to see intuitively: if the collection grows there is more and more work to do in order to visit all the possible elements, and the ability to terminate the iteration depends on the number of calls to <code>SCAN</code> and its COUNT option value compared with the rate at which the collection grows.</p>\n<h2>Why SCAN may return all the items of an aggregate data type in a single call?</h2>\n<p>In the <code>COUNT</code> option documentation, we state that sometimes this family of commands may return all the elements of a Set, Hash or Sorted Set at once in a single call, regardless of the <code>COUNT</code> option value. The reason why this happens is that the cursor-based iterator can be implemented, and is useful, only when the aggregate data type that we are scanning is represented as a hash table. However Valkey uses a <a href=\"../topics/memory-optimization\">memory optimization</a> where small aggregate data types, until they reach a given amount of items or a given max size of single elements, are represented using a compact single-allocation packed encoding. When this is the case, <code>SCAN</code> has no meaningful cursor to return, and must iterate the whole data structure at once, so the only sane behavior it has is to return everything in a call.</p>\n<p>However once the data structures are bigger and are promoted to use real hash tables, the <code>SCAN</code> family of commands will resort to the normal behavior. Note that since this special behavior of returning all the elements is true only for small aggregates, it has no effects on the command complexity or latency. However the exact limits to get converted into real hash tables are <a href=\"../topics/memory-optimization\">user configurable</a>, so the maximum number of elements you can see returned in a single call depends on how big an aggregate data type could be and still use the packed representation.</p>\n<p>Also note that this behavior is specific of <code>SSCAN</code>, <code>HSCAN</code> and <code>ZSCAN</code>. <code>SCAN</code> itself never shows this behavior because the key space is always represented by hash tables.</p>\n<h2>Further reading</h2>\n<p>For more information about managing keys, please refer to the <a href=\"../topics/keyspace\">The Valkey Keyspace</a> tutorial.</p>\n<h2>Additional examples</h2>\n<p>Iteration of a Hash value.</p>\n<pre><code>127.0.0.1:6379&gt; hmset hash name Jack age 33\nOK\n127.0.0.1:6379&gt; hscan hash 0\n1) &quot;0&quot;\n2) 1) &quot;name&quot;\n   2) &quot;Jack&quot;\n   3) &quot;age&quot;\n   4) &quot;33&quot;\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-scard",
    "command": "SCARD",
    "description": "Returns the number of members in a set.",
    "htmlContent": "<p>Returns the set cardinality (number of elements) of the set stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; SCARD myset\n(integer) 2\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-script",
    "command": "SCRIPT",
    "description": "A container for Lua scripts management commands.",
    "htmlContent": "<p>This is a container command for script management commands.</p>\n<p>To see the list of available commands you can call <code>SCRIPT HELP</code>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-script-debug",
    "command": "SCRIPT DEBUG",
    "description": "Sets the debug mode of server-side Lua scripts.",
    "htmlContent": "<p>Set the debug mode for subsequent scripts executed with <code>EVAL</code>. Valkey includes a\ncomplete Lua debugger, codename LDB, that can be used to make the task of\nwriting complex scripts much simpler. In debug mode Valkey acts as a remote\ndebugging server and a client, such as <code>valkey-cli</code>, can execute scripts step by\nstep, set breakpoints, inspect variables and more - for additional information\nabout LDB refer to the <a href=\"../topics/ldb\">Valkey Lua debugger</a> page.</p>\n<p><strong>Important note:</strong> avoid debugging Lua scripts using your Valkey production\nserver. Use a development server instead.</p>\n<p>LDB can be enabled in one of two modes: asynchronous or synchronous. In\nasynchronous mode the server creates a forked debugging session that does not\nblock and all changes to the data are <strong>rolled back</strong> after the session\nfinishes, so debugging can be restarted using the same initial state. The\nalternative synchronous debug mode blocks the server while the debugging session\nis active and retains all changes to the data set once it ends.</p>\n<ul>\n<li><code>YES</code>. Enable non-blocking asynchronous debugging of Lua scripts (changes are discarded).</li>\n<li><code>!SYNC</code>. Enable blocking synchronous debugging of Lua scripts (saves changes to data).</li>\n<li><code>NO</code>. Disables scripts debug mode.</li>\n</ul>\n<p>For more information about <code>EVAL</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-script-exists",
    "command": "SCRIPT EXISTS",
    "description": "Determines whether server-side Lua scripts exist in the script cache.",
    "htmlContent": "<p>Returns information about the existence of the scripts in the script cache.</p>\n<p>This command accepts one or more SHA1 digests and returns a list of ones or\nzeros to signal if the scripts are already defined or not inside the script\ncache.\nThis can be useful before a pipelining operation to ensure that scripts are\nloaded (and if not, to load them using <code>SCRIPT LOAD</code>) so that the pipelining\noperation can be performed solely using <code>EVALSHA</code> instead of <code>EVAL</code> to save\nbandwidth.</p>\n<p>For more information about <code>EVAL</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-script-flush",
    "command": "SCRIPT FLUSH",
    "description": "Removes all server-side Lua scripts from the script cache.",
    "htmlContent": "<p>Flush the Lua scripts cache.</p>\n<p>By default, <code>SCRIPT FLUSH</code> will synchronously flush the cache.\nSetting the <strong>lazyfree-lazy-user-flush</strong> configuration directive to &quot;yes&quot; changes the default flush mode to asynchronous.</p>\n<p>It is possible to use one of the following modifiers to dictate the flushing mode explicitly:</p>\n<ul>\n<li><code>ASYNC</code>: flushes the cache asynchronously</li>\n<li><code>!SYNC</code>: flushes the cache synchronously</li>\n</ul>\n<p>For more information about <code>EVAL</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-script-help",
    "command": "SCRIPT HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>SCRIPT HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-script-kill",
    "command": "SCRIPT KILL",
    "description": "Terminates a server-side Lua script during execution.",
    "htmlContent": "<p>Kills the currently executing <code>EVAL</code> script, assuming no write operation was yet\nperformed by the script.</p>\n<p>This command is mainly useful to kill a script that is running for too much\ntime(for instance, because it entered an infinite loop because of a bug).\nThe script will be killed, and the client currently blocked into EVAL will see\nthe command returning with an error.</p>\n<p>If the script has already performed write operations, it can not be killed in this\nway because it would violate Lua&#39;s script atomicity contract.\nIn such a case, only <code>SHUTDOWN NOSAVE</code> can kill the script, killing\nthe Valkey process in a hard way and preventing it from persisting with half-written\ninformation.</p>\n<p>For more information about <code>EVAL</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-script-load",
    "command": "SCRIPT LOAD",
    "description": "Loads a server-side Lua script to the script cache.",
    "htmlContent": "<p>Load a script into the scripts cache, without executing it.\nAfter the specified command is loaded into the script cache it will be callable\nusing <code>EVALSHA</code> with the correct SHA1 digest of the script, exactly like after\nthe first successful invocation of <code>EVAL</code>.</p>\n<p>The script is guaranteed to stay in the script cache forever (unless <code>SCRIPT FLUSH</code> is called).</p>\n<p>The command works in the same way even if the script was already present in the\nscript cache.</p>\n<p>For more information about <code>EVAL</code> scripts please refer to <a href=\"../topics/eval-intro\">Introduction to Eval Scripts</a>.</p>\n",
    "categories": [
      "scripting"
    ]
  },
  {
    "unid": "cmd-sdiff",
    "command": "SDIFF",
    "description": "Returns the difference of multiple sets.",
    "htmlContent": "<p>Returns the members of the set resulting from the difference between the first\nset and all the successive sets.</p>\n<p>For example:</p>\n<pre><code>key1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSDIFF key1 key2 key3 = {b,d}\n</code></pre>\n<p>Keys that do not exist are considered to be empty sets.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SDIFF key1 key2\n1) &quot;a&quot;\n2) &quot;b&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sdiffstore",
    "command": "SDIFFSTORE",
    "description": "Stores the difference of multiple sets in a key.",
    "htmlContent": "<p>This command is equal to <code>SDIFF</code>, but instead of returning the resulting set, it\nis stored in <code>destination</code>.</p>\n<p>If <code>destination</code> already exists, it is overwritten.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SDIFFSTORE key key1 key2\n(integer) 2\n127.0.0.1:6379&gt; SMEMBERS key\n1) &quot;a&quot;\n2) &quot;b&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-select",
    "command": "SELECT",
    "description": "Changes the selected database.",
    "htmlContent": "<p>Select the Valkey logical database having the specified zero-based numeric index.\nNew connections always use the database 0.</p>\n<p>Selectable Valkey databases are a form of namespacing: all databases are still persisted in the same RDB / AOF file. However different databases can have keys with the same name, and commands like <code>FLUSHDB</code>, <code>SWAPDB</code> or <code>RANDOMKEY</code> work on specific databases.</p>\n<p>In practical terms, Valkey databases should be used to separate different keys belonging to the same application (if needed), and not to use a single Valkey instance for multiple unrelated applications.</p>\n<p>When using Valkey Cluster, only <code>SELECT 0</code> can be used, since Valkey Cluster only supports database zero. In the case of a Valkey Cluster, having multiple databases would be useless and an unnecessary source of complexity. Commands operating atomically on a single database would not be possible with the Valkey Cluster design and goals.</p>\n<p>Since the currently selected database is a property of the connection, clients should track the currently selected database and re-select it on reconnection. While there is no command in order to query the selected database in the current connection, the <code>CLIENT LIST</code> output shows, for each client, the currently selected database.</p>\n",
    "categories": [
      "connection"
    ]
  },
  {
    "unid": "cmd-set",
    "command": "SET",
    "description": "Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.",
    "htmlContent": "<p>Set <code>key</code> to hold the string <code>value</code>.\nIf <code>key</code> already holds a value, it is overwritten, regardless of its type.\nAny previous time to live associated with the key is discarded on successful <code>SET</code> operation.</p>\n<h2>Options</h2>\n<p>The <code>SET</code> command supports a set of options that modify its behavior:</p>\n<ul>\n<li><code>EX</code> <em>seconds</em> -- Set the specified expire time, in seconds (a positive integer).</li>\n<li><code>PX</code> <em>milliseconds</em> -- Set the specified expire time, in milliseconds (a positive integer).</li>\n<li><code>EXAT</code> <em>timestamp-seconds</em> -- Set the specified Unix time at which the key will expire, in seconds (a positive integer).</li>\n<li><code>PXAT</code> <em>timestamp-milliseconds</em> -- Set the specified Unix time at which the key will expire, in milliseconds (a positive integer).</li>\n<li><code>NX</code> -- Only set the key if it does not already exist.</li>\n<li><code>XX</code> -- Only set the key if it already exists.</li>\n<li><code>IFEQ</code> <em>comparison-value</em> -- Set the key if the comparison value matches the existing value. An error is returned and <code>SET</code> aborted if the value stored at key is not a string.</li>\n<li><code>KEEPTTL</code> -- Retain the time to live associated with the key.</li>\n<li><code>GET</code> -- Return the old string stored at key, or nil if key did not exist. An error is returned and <code>SET</code> aborted if the value stored at key is not a string.</li>\n</ul>\n<p>Note: Since the <code>SET</code> command options can replace <code>SETNX</code>, <code>SETEX</code>, <code>PSETEX</code>, <code>GETSET</code>, it is possible that in future versions of Valkey these commands will be deprecated and finally removed.</p>\n<h2>Examples</h2>\n<p>Basic usage</p>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; GET mykey\n&quot;Hello&quot;\n</code></pre>\n<p>Set a value and an expiry time.</p>\n<pre><code>127.0.0.1:6379&gt; SET anotherkey &quot;will expire in a minute&quot; EX 60\nOK\n</code></pre>\n<p>Conditionally set a value.</p>\n<pre><code>127.0.0.1:6379&gt; SET foo &quot;Initial Value&quot;\nOK\n127.0.0.1:6379&gt; GET foo\n&quot;Initial Value&quot;\n127.0.0.1:6379&gt; SET foo &quot;New Value&quot; IFEQ &quot;Initial Value&quot;\nOK\n127.0.0.1:6379&gt; GET foo\n&quot;New Value&quot;\n</code></pre>\n<h2>Patterns</h2>\n<p><strong>Note:</strong> The following pattern is discouraged in favor of <a href=\"../topics/distlock\">the Redlock algorithm</a> which is only a bit more complex to implement, but offers better guarantees and is fault tolerant.</p>\n<p>The command <code>SET resource-name anystring NX EX max-lock-time</code> is a simple way to implement a locking system with Valkey.</p>\n<p>A client can acquire the lock if the above command returns <code>OK</code> (or retry after some time if the command returns Nil), and remove the lock just using <code>DEL</code>.</p>\n<p>The lock will be auto-released after the expire time is reached.</p>\n<p>It is possible to make this system more robust modifying the unlock schema as follows:</p>\n<ul>\n<li>Instead of setting a fixed string, set a non-guessable large random string, called token.</li>\n<li>Instead of releasing the lock with <code>DEL</code>, send a script that only removes the key if the value matches.</li>\n</ul>\n<p>This avoids that a client will try to release the lock after the expire time deleting the key created by another client that acquired the lock later.</p>\n<p>An example of unlock script would be similar to the following:</p>\n<pre><code>if server.call(&quot;get&quot;,KEYS[1]) == ARGV[1]\nthen\n    return server.call(&quot;del&quot;,KEYS[1])\nelse\n    return 0\nend\n</code></pre>\n<p>The script should be called with <code>EVAL ...script... 1 resource-name token-value</code></p>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-setbit",
    "command": "SETBIT",
    "description": "Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Sets or clears the bit at <em>offset</em> in the string value stored at <em>key</em>.</p>\n<p>The bit is either set or cleared depending on <em>value</em>, which can be either 0 or\n1.</p>\n<p>When <em>key</em> does not exist, a new string value is created.\nThe string is grown to make sure it can hold a bit at <em>offset</em>.\nThe <em>offset</em> argument is required to be greater than or equal to 0, and smaller\nthan 2^32 (this limits bitmaps to 512MB).\nWhen the string at <em>key</em> is grown, added bits are set to 0.</p>\n<p><strong>Warning</strong>: When setting the last possible bit (<em>offset</em> equal to 2^32 -1) and\nthe string value stored at <em>key</em> does not yet hold a string value, or holds a\nsmall string value, Valkey needs to allocate all intermediate memory which can\nblock the server for some time.\nOn a 2010 MacBook Pro, setting bit number 2^32 -1 (512MB allocation) takes\n~300ms, setting bit number 2^30 -1 (128MB allocation) takes ~80ms, setting bit\nnumber 2^28 -1 (32MB allocation) takes ~30ms and setting bit number 2^26 -1 (8MB\nallocation) takes ~8ms.\nNote that once this first allocation is done, subsequent calls to <code>SETBIT</code> for\nthe same <em>key</em> will not have the allocation overhead.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SETBIT mykey 7 1\n(integer) 0\n127.0.0.1:6379&gt; SETBIT mykey 7 0\n(integer) 1\n127.0.0.1:6379&gt; GET mykey\n&quot;\\x00&quot;\n</code></pre>\n<h2>Pattern: accessing the entire bitmap</h2>\n<p>There are cases when you need to set all the bits of single bitmap at once, for\nexample when initializing it to a default non-zero value. It is possible to do\nthis with multiple calls to the <code>SETBIT</code> command, one for each bit that needs to\nbe set. However, so as an optimization you can use a single <code>SET</code> command to set\nthe entire bitmap.</p>\n<p>Bitmaps are not an actual data type, but a set of bit-oriented operations\ndefined on the String type (for more information refer to the\n<a href=\"../topics/data-types#bitmaps\">Bitmaps section of the Data Types Introduction page</a>). This means that\nbitmaps can be used with string commands, and most importantly with <code>SET</code> and\n<code>GET</code>.</p>\n<p>Because Valkey&#39; strings are binary-safe, a bitmap is trivially encoded as a bytes\nstream. The first byte of the string corresponds to offsets 0..7 of\nthe bitmap, the second byte to the 8..15 range, and so forth.</p>\n<p>For example, after setting a few bits, getting the string value of the bitmap\nwould look like this:</p>\n<pre><code>&gt; SETBIT bitmapsarestrings 2 1\n&gt; SETBIT bitmapsarestrings 3 1\n&gt; SETBIT bitmapsarestrings 5 1\n&gt; SETBIT bitmapsarestrings 10 1\n&gt; SETBIT bitmapsarestrings 11 1\n&gt; SETBIT bitmapsarestrings 14 1\n&gt; GET bitmapsarestrings\n&quot;42&quot;\n</code></pre>\n<p>By getting the string representation of a bitmap, the client can then parse the\nresponse&#39;s bytes by extracting the bit values using native bit operations in its\nnative programming language. Symmetrically, it is also possible to set an entire\nbitmap by performing the bits-to-bytes encoding in the client and calling <code>SET</code>\nwith the resultant string.</p>\n<h2>Pattern: setting multiple bits</h2>\n<p><code>SETBIT</code> excels at setting single bits, and can be called several times when\nmultiple bits need to be set. To optimize this operation you can replace\nmultiple <code>SETBIT</code> calls with a single call to the variadic <code>BITFIELD</code> command\nand the use of fields of type <code>u1</code>.</p>\n<p>For example, the example above could be replaced by:</p>\n<pre><code>&gt; BITFIELD bitsinabitmap SET u1 2 1 SET u1 3 1 SET u1 5 1 SET u1 10 1 SET u1 11 1 SET u1 14 1\n</code></pre>\n<h2>Advanced Pattern: accessing bitmap ranges</h2>\n<p>It is also possible to use the <code>GETRANGE</code> and <code>SETRANGE</code> string commands to\nefficiently access a range of bit offsets in a bitmap. Below is a sample\nimplementation in idiomatic Valkey Lua scripting that can be run with the <code>EVAL</code>\ncommand:</p>\n<pre><code>--[[\nSets a bitmap range\n\nBitmaps are stored as Strings in Valkey. A range spans one or more bytes,\nso we can call `SETRANGE` when entire bytes need to be set instead of flipping\nindividual bits. Also, to avoid multiple internal memory allocations in\nValkey, we traverse in reverse.\nExpected input:\n  KEYS[1] - bitfield key\n  ARGV[1] - start offset (0-based, inclusive)\n  ARGV[2] - end offset (same, should be bigger than start, no error checking)\n  ARGV[3] - value (should be 0 or 1, no error checking)\n]]--\n\n-- A helper function to stringify a binary string to semi-binary format\nlocal function tobits(str)\n  local r = &#39;&#39;\n  for i = 1, string.len(str) do\n    local c = string.byte(str, i)\n    local b = &#39; &#39;\n    for j = 0, 7 do\n      b = tostring(bit.band(c, 1)) .. b\n      c = bit.rshift(c, 1)\n    end\n    r = r .. b\n  end\n  return r\nend\n\n-- Main\nlocal k = KEYS[1]\nlocal s, e, v = tonumber(ARGV[1]), tonumber(ARGV[2]), tonumber(ARGV[3])\n\n-- First treat the dangling bits in the last byte\nlocal ms, me = s % 8, (e + 1) % 8\nif me &gt; 0 then\n  local t = math.max(e - me + 1, s)\n  for i = e, t, -1 do\n    server.call(&#39;SETBIT&#39;, k, i, v)\n  end\n  e = t\nend\n\n-- Then the danglings in the first byte\nif ms &gt; 0 then\n  local t = math.min(s - ms + 7, e)\n  for i = s, t, 1 do\n    server.call(&#39;SETBIT&#39;, k, i, v)\n  end\n  s = t + 1\nend\n\n-- Set a range accordingly, if at all\nlocal rs, re = s / 8, (e + 1) / 8\nlocal rl = re - rs\nif rl &gt; 0 then\n  local b = &#39;\\255&#39;\n  if 0 == v then\n    b = &#39;\\0&#39;\n  end\n  server.call(&#39;SETRANGE&#39;, k, rs, string.rep(b, rl))\nend\n</code></pre>\n<p><strong>Note:</strong> the implementation for getting a range of bit offsets from a bitmap is\nleft as an exercise to the reader.</p>\n",
    "categories": [
      "bitmap"
    ]
  },
  {
    "unid": "cmd-setex",
    "command": "SETEX",
    "description": "Sets the string value and expiration time of a key. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Set <code>key</code> to hold the string <code>value</code> and set <code>key</code> to timeout after a given\nnumber of seconds.\nThis command is equivalent to:</p>\n<pre><code>SET key value EX seconds\n</code></pre>\n<p>An error is returned when <code>seconds</code> is invalid.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SETEX mykey 10 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; TTL mykey\n(integer) 10\n127.0.0.1:6379&gt; GET mykey\n&quot;Hello&quot;\n</code></pre>\n<h2>See also</h2>\n<p><code>TTL</code></p>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-setnx",
    "command": "SETNX",
    "description": "Set the string value of a key only when the key doesn't exist.",
    "htmlContent": "<p>Set <code>key</code> to hold string <code>value</code> if <code>key</code> does not exist.\nIn that case, it is equal to <code>SET</code>.\nWhen <code>key</code> already holds a value, no operation is performed.\n<code>SETNX</code> is short for &quot;<strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists&quot;.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SETNX mykey &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; SETNX mykey &quot;World&quot;\n(integer) 0\n127.0.0.1:6379&gt; GET mykey\n&quot;Hello&quot;\n</code></pre>\n<h2>Design pattern: Locking with <code>!SETNX</code></h2>\n<p><strong>Please note that:</strong></p>\n<ol>\n<li>The following pattern is discouraged in favor of <a href=\"../topics/distlock\">the Redlock algorithm</a> which is only a bit more complex to implement, but offers better guarantees and is fault tolerant.</li>\n<li>We document the old pattern anyway because certain existing implementations link to this page as a reference. Moreover it is an interesting example of how Valkey commands can be used in order to mount programming primitives.</li>\n<li>Anyway even assuming a single-instance locking primitive, starting with 2.6.12 it is possible to create a much simpler locking primitive, equivalent to the one discussed here, using the <code>SET</code> command to acquire the lock, and a simple Lua script to release the lock. The pattern is documented in the <code>SET</code> command page.</li>\n</ol>\n<p>That said, <code>SETNX</code> can be used, and was historically used, as a locking primitive. For example, to acquire the lock of the key <code>foo</code>, the client could try the\nfollowing:</p>\n<pre><code>SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;\n</code></pre>\n<p>If <code>SETNX</code> returns <code>1</code> the client acquired the lock, setting the <code>lock.foo</code> key\nto the Unix time at which the lock should no longer be considered valid.\nThe client will later use <code>DEL lock.foo</code> in order to release the lock.</p>\n<p>If <code>SETNX</code> returns <code>0</code> the key is already locked by some other client.\nWe can either return to the caller if it&#39;s a non blocking lock, or enter a loop\nretrying to hold the lock until we succeed or some kind of timeout expires.</p>\n<h3>Handling deadlocks</h3>\n<p>In the above locking algorithm there is a problem: what happens if a client\nfails, crashes, or is otherwise not able to release the lock?\nIt&#39;s possible to detect this condition because the lock key contains a UNIX\ntimestamp.\nIf such a timestamp is equal to the current Unix time the lock is no longer\nvalid.</p>\n<p>When this happens we can&#39;t just call <code>DEL</code> against the key to remove the lock\nand then try to issue a <code>SETNX</code>, as there is a race condition here, when\nmultiple clients detected an expired lock and are trying to release it.</p>\n<ul>\n<li>C1 and C2 read <code>lock.foo</code> to check the timestamp, because they both received\n<code>0</code> after executing <code>SETNX</code>, as the lock is still held by C3 that crashed\nafter holding the lock.</li>\n<li>C1 sends <code>DEL lock.foo</code></li>\n<li>C1 sends <code>SETNX lock.foo</code> and it succeeds</li>\n<li>C2 sends <code>DEL lock.foo</code></li>\n<li>C2 sends <code>SETNX lock.foo</code> and it succeeds</li>\n<li><strong>ERROR</strong>: both C1 and C2 acquired the lock because of the race condition.</li>\n</ul>\n<p>Fortunately, it&#39;s possible to avoid this issue using the following algorithm.\nLet&#39;s see how C4, our sane client, uses the good algorithm:</p>\n<ul>\n<li><p>C4 sends <code>SETNX lock.foo</code> in order to acquire the lock</p>\n</li>\n<li><p>The crashed client C3 still holds it, so Valkey will reply with <code>0</code> to C4.</p>\n</li>\n<li><p>C4 sends <code>GET lock.foo</code> to check if the lock expired.\nIf it is not, it will sleep for some time and retry from the start.</p>\n</li>\n<li><p>Instead, if the lock is expired because the Unix time at <code>lock.foo</code> is older\nthan the current Unix time, C4 tries to perform:</p>\n<pre><code>GETSET lock.foo &lt;current Unix timestamp + lock timeout + 1&gt;\n</code></pre>\n</li>\n<li><p>Because of the <code>GETSET</code> semantic, C4 can check if the old value stored at\n<code>key</code> is still an expired timestamp.\nIf it is, the lock was acquired.</p>\n</li>\n<li><p>If another client, for instance C5, was faster than C4 and acquired the lock\nwith the <code>GETSET</code> operation, the C4 <code>GETSET</code> operation will return a non\nexpired timestamp.\nC4 will simply restart from the first step.\nNote that even if C4 set the key a bit a few seconds in the future this is\nnot a problem.</p>\n</li>\n</ul>\n<p>In order to make this locking algorithm more robust, a\nclient holding a lock should always check the timeout didn&#39;t expire before\nunlocking the key with <code>DEL</code> because client failures can be complex, not just\ncrashing but also blocking a lot of time against some operations and trying\nto issue <code>DEL</code> after a lot of time (when the LOCK is already held by another\nclient).</p>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-setrange",
    "command": "SETRANGE",
    "description": "Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Overwrites part of the string stored at <em>key</em>, starting at the specified offset,\nfor the entire length of <em>value</em>.\nIf the offset is larger than the current length of the string at <em>key</em>, the\nstring is padded with zero-bytes to make <em>offset</em> fit.\nNon-existing keys are considered as empty strings, so this command will make\nsure it holds a string large enough to be able to set <em>value</em> at <em>offset</em>.</p>\n<p>Note that the maximum offset that you can set is 2^29 -1 (536870911), as Valkey\nStrings are limited to 512 megabytes.\nIf you need to grow beyond this size, you can use multiple keys.</p>\n<p><strong>Warning</strong>: When setting the last possible byte and the string value stored at\n<em>key</em> does not yet hold a string value, or holds a small string value, Valkey\nneeds to allocate all intermediate memory which can block the server for some\ntime.\nOn a 2010 MacBook Pro, setting byte number 536870911 (512MB allocation) takes\n~300ms, setting byte number 134217728 (128MB allocation) takes ~80ms, setting\nbit number 33554432 (32MB allocation) takes ~30ms and setting bit number 8388608\n(8MB allocation) takes ~8ms.\nNote that once this first allocation is done, subsequent calls to <code>SETRANGE</code> for\nthe same <em>key</em> will not have the allocation overhead.</p>\n<h2>Patterns</h2>\n<p>Thanks to <code>SETRANGE</code> and the analogous <code>GETRANGE</code> commands, you can use Valkey\nstrings as a linear array with O(1) random access.\nThis is a very fast and efficient storage in many real world use cases.</p>\n<h2>Examples</h2>\n<p>Basic usage:</p>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;Hello World&quot;\nOK\n127.0.0.1:6379&gt; SETRANGE key1 6 &quot;Valkey&quot;\n(integer) 12\n127.0.0.1:6379&gt; GET key1\n&quot;Hello Valkey&quot;\n</code></pre>\n<p>Example of zero padding:</p>\n<pre><code>127.0.0.1:6379&gt; SETRANGE key2 6 &quot;Valkey&quot;\n(integer) 12\n127.0.0.1:6379&gt; GET key2\n&quot;\\x00\\x00\\x00\\x00\\x00\\x00Valkey&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-shutdown",
    "command": "SHUTDOWN",
    "description": "Synchronously saves the database(s) to disk and shuts down the Valkey server.",
    "htmlContent": "<p>The command behavior is the following:</p>\n<ul>\n<li>If there are any replicas lagging behind in replication:<ul>\n<li>Pause clients attempting to write by performing a <code>CLIENT PAUSE</code> with the <code>WRITE</code> option.</li>\n<li>Wait up to the configured <code>shutdown-timeout</code> (default 10 seconds) for replicas to catch up the replication offset.</li>\n</ul>\n</li>\n<li>Stop all the clients.</li>\n<li>Perform a blocking SAVE if at least one <strong>save point</strong> is configured.</li>\n<li>Flush the Append Only File if AOF is enabled.</li>\n<li>Quit the server.</li>\n</ul>\n<p>If persistence is enabled this commands makes sure that Valkey is switched off\nwithout any data loss.</p>\n<p>Note: A Valkey instance that is configured for not persisting on disk (no AOF\nconfigured, nor &quot;save&quot; directive) will not dump the RDB file on <code>SHUTDOWN</code>, as\nusually you don&#39;t want Valkey instances used only for caching to block on when\nshutting down.</p>\n<p>Also note: If Valkey receives one of the signals <code>SIGTERM</code> and <code>SIGINT</code>, the same shutdown sequence is performed.\nSee also <a href=\"../topics/signals\">Signal Handling</a>.</p>\n<h2>Modifiers</h2>\n<p>It is possible to specify optional modifiers to alter the behavior of the command.\nSpecifically:</p>\n<ul>\n<li><strong>SAVE</strong> will force a DB saving operation even if no save points are configured.</li>\n<li><strong>NOSAVE</strong> will prevent a DB saving operation even if one or more save points are configured.</li>\n<li><strong>NOW</strong> skips waiting for lagging replicas, i.e. it bypasses the first step in the shutdown sequence.</li>\n<li><strong>FORCE</strong> ignores any errors that would normally prevent the server from exiting.\nFor details, see the following section.</li>\n<li><strong>ABORT</strong> cancels an ongoing shutdown and cannot be combined with other flags.</li>\n</ul>\n<h2>Conditions where a SHUTDOWN fails</h2>\n<p>When a save point is configured or the <strong>SAVE</strong> modifier is specified, the shutdown may fail if the RDB file can&#39;t be saved.\nThen, the server continues to run in order to ensure no data loss.\nThis may be bypassed using the <strong>FORCE</strong> modifier, causing the server to exit anyway.</p>\n<p>When the Append Only File is enabled the shutdown may fail because the\nsystem is in a state that does not allow to safely immediately persist\non disk.</p>\n<p>Normally if there is an AOF child process performing an AOF rewrite, Valkey\nwill simply kill it and exit.\nHowever, there are situations where it is unsafe to do so and, unless the <strong>FORCE</strong> modifier is specified, the <strong>SHUTDOWN</strong> command will be refused with an error instead.\nThis happens in the following situations:</p>\n<ul>\n<li>The user just turned on AOF, and the server triggered the first AOF rewrite in order to create the initial AOF file. In this context, stopping will result in losing the dataset at all: once restarted, the server will potentially have AOF enabled without having any AOF file at all.</li>\n<li>A replica with AOF enabled, reconnected with its primary, performed a full resynchronization, and restarted the AOF file, triggering the initial AOF creation process. In this case not completing the AOF rewrite is dangerous because the latest dataset received from the primary would be lost. The new primary can actually be even a different instance (if the <strong>REPLICAOF</strong> or <strong>SLAVEOF</strong> command was used in order to reconfigure the replica), so it is important to finish the AOF rewrite and start with the correct data set representing the data set in memory when the server was terminated.</li>\n</ul>\n<p>There are situations when we want just to terminate a Valkey instance ASAP, regardless of what its content is.\nIn such a case, the command <strong>SHUTDOWN NOW NOSAVE FORCE</strong> can be used.\nIn versions before 7.0, where the <strong>NOW</strong> and <strong>FORCE</strong> flags are not available, the right combination of commands is to send a <strong>CONFIG appendonly no</strong> followed by a <strong>SHUTDOWN NOSAVE</strong>.\nThe first command will turn off the AOF if needed, and will terminate the AOF rewriting child if there is one active.\nThe second command will not have any problem to execute since the AOF is no longer enabled.</p>\n<h2>Minimize the risk of data loss</h2>\n<p>The server waits for lagging replicas up to a configurable <code>shutdown-timeout</code>, by default 10 seconds, before shutting down.\nThis provides a best effort minimizing the risk of data loss in a situation where no save points are configured and AOF is disabled.\nBefore version 7.0, shutting down a heavily loaded primary node in a diskless setup was more likely to result in data loss.\nTo minimize the risk of data loss in such setups, it&#39;s advised to trigger a manual <code>FAILOVER</code> (or <code>CLUSTER FAILOVER</code>) to demote the primary to a replica and promote one of the replicas to be the new primary, before shutting down a primary node.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-sinter",
    "command": "SINTER",
    "description": "Returns the intersect of multiple sets.",
    "htmlContent": "<p>Returns the members of the set resulting from the intersection of all the given\nsets.</p>\n<p>For example:</p>\n<pre><code>key1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSINTER key1 key2 key3 = {c}\n</code></pre>\n<p>Keys that do not exist are considered to be empty sets.\nWith one of the keys being an empty set, the resulting set is also empty (since\nset intersection with an empty set always results in an empty set).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SINTER key1 key2\n1) &quot;c&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sintercard",
    "command": "SINTERCARD",
    "description": "Returns the number of members of the intersect of multiple sets.",
    "htmlContent": "<p>This command is similar to <code>SINTER</code>, but instead of returning the result set, it returns just the cardinality of the result.\nReturns the cardinality of the set which would result from the intersection of all the given sets.</p>\n<p>Keys that do not exist are considered to be empty sets.\nWith one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).</p>\n<p>By default, the command calculates the cardinality of the intersection of all given sets.\nWhen provided with the optional <code>LIMIT</code> argument (which defaults to 0 and means unlimited), if the intersection cardinality reaches limit partway through the computation, the algorithm will exit and yield limit as the cardinality.\nSuch implementation ensures a significant speedup for queries where the limit is lower than the actual intersection cardinality.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SINTER key1 key2\n1) &quot;c&quot;\n2) &quot;d&quot;\n127.0.0.1:6379&gt; SINTERCARD 2 key1 key2\n(integer) 2\n127.0.0.1:6379&gt; SINTERCARD 2 key1 key2 LIMIT 1\n(integer) 1\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sinterstore",
    "command": "SINTERSTORE",
    "description": "Stores the intersect of multiple sets in a key.",
    "htmlContent": "<p>This command is equal to <code>SINTER</code>, but instead of returning the resulting set,\nit is stored in <code>destination</code>.</p>\n<p>If <code>destination</code> already exists, it is overwritten.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SINTERSTORE key key1 key2\n(integer) 1\n127.0.0.1:6379&gt; SMEMBERS key\n1) &quot;c&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sismember",
    "command": "SISMEMBER",
    "description": "Determines whether a member belongs to a set.",
    "htmlContent": "<p>Returns if <code>member</code> is a member of the set stored at <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SISMEMBER myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SISMEMBER myset &quot;two&quot;\n(integer) 0\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-slaveof",
    "command": "SLAVEOF",
    "description": "Sets a Valkey server as a replica of another, or promotes it to being a master.",
    "htmlContent": "<p><strong>A note about the word slave used in this man page and command name</strong>: If not for backward compatibility, the Valkey project no longer uses the words &quot;master&quot; and &quot;slave&quot;. Please use the new command <code>REPLICAOF</code>. The command <code>SLAVEOF</code> will continue to work for backward compatibility.</p>\n<p>The <code>SLAVEOF</code> command can change the replication settings of a replica on the fly.\nIf a Valkey server is already acting as replica, the command <code>SLAVEOF</code> NO ONE will\nturn off the replication, turning the Valkey server into a MASTER.\nIn the proper form <code>SLAVEOF</code> hostname port will make the server a replica of\nanother server listening at the specified hostname and port.</p>\n<p>If a server is already a replica of some primary, <code>SLAVEOF</code> hostname port will stop\nthe replication against the old server and start the synchronization against the\nnew one, discarding the old dataset.</p>\n<p>The form <code>SLAVEOF</code> NO ONE will stop replication, turning the server into a\nMASTER, but will not discard the replication.\nSo, if the old primary stops working, it is possible to turn the replica into a\nprimary and set the application to use this new primary in read/write.\nLater when the other Valkey server is fixed, it can be reconfigured to work as a\nreplica.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-slowlog",
    "command": "SLOWLOG",
    "description": "A container for slow log commands.",
    "htmlContent": "<p>This is a container command for slow log management commands.</p>\n<p>To see the list of available commands you can call <code>SLOWLOG HELP</code>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-slowlog-get",
    "command": "SLOWLOG GET",
    "description": "Returns the slow log's entries.",
    "htmlContent": "<p>The <code>SLOWLOG GET</code> command returns entries from the slow log in chronological order.</p>\n<p>The Valkey Slow Log is a system to log queries that exceeded a specified execution time.\nThe execution time does not include I/O operations like talking with the client, sending the reply and so forth, but just the time needed to actually execute the command (this is the only stage of command execution where the thread is blocked and can not serve other requests in the meantime).</p>\n<p>A new entry is added to the slow log whenever a command exceeds the execution time threshold defined by the <code>slowlog-log-slower-than</code> configuration directive.\nThe maximum number of entries in the slow log is governed by the <code>slowlog-max-len</code> configuration directive.</p>\n<p>By default the command returns latest ten entries in the log. The optional <code>count</code> argument limits the number of returned entries, so the command returns at most up to <code>count</code> entries, the special number -1 means return all entries.</p>\n<p>Each entry from the slow log is comprised of the following six values:</p>\n<ol>\n<li>A unique progressive identifier for every slow log entry.</li>\n<li>The unix timestamp at which the logged command was processed.</li>\n<li>The amount of time needed for its execution, in microseconds.</li>\n<li>The array composing the arguments of the command.</li>\n<li>Client IP address and port.</li>\n<li>Client name if set via the <code>CLIENT SETNAME</code> command.</li>\n</ol>\n<p>The entry&#39;s unique ID can be used in order to avoid processing slow log entries multiple times (for instance you may have a script sending you an email alert for every new slow log entry).\nThe ID is never reset in the course of the Valkey server execution, only a server\nrestart will reset it.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-slowlog-help",
    "command": "SLOWLOG HELP",
    "description": "Show helpful text about the different subcommands",
    "htmlContent": "<p>The <code>SLOWLOG HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-slowlog-len",
    "command": "SLOWLOG LEN",
    "description": "Returns the number of entries in the slow log.",
    "htmlContent": "<p>This command returns the current number of entries in the slow log.</p>\n<p>A new entry is added to the slow log whenever a command exceeds the execution time threshold defined by the <code>slowlog-log-slower-than</code> configuration directive.\nThe maximum number of entries in the slow log is governed by the <code>slowlog-max-len</code> configuration directive.\nOnce the slog log reaches its maximal size, the oldest entry is removed whenever a new entry is created.\nThe slow log can be cleared with the <code>SLOWLOG RESET</code> command.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-slowlog-reset",
    "command": "SLOWLOG RESET",
    "description": "Clears all entries from the slow log.",
    "htmlContent": "<p>This command resets the slow log, clearing all entries in it.</p>\n<p>Once deleted the information is lost forever.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-smembers",
    "command": "SMEMBERS",
    "description": "Returns all members of a set.",
    "htmlContent": "<p>Returns all the members of the set value stored at <code>key</code>.</p>\n<p>This has the same effect as running <code>SINTER</code> with one argument <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;Hello&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;World&quot;\n(integer) 1\n127.0.0.1:6379&gt; SMEMBERS myset\n1) &quot;Hello&quot;\n2) &quot;World&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-smismember",
    "command": "SMISMEMBER",
    "description": "Determines whether multiple members belong to a set.",
    "htmlContent": "<p>Returns whether each <code>member</code> is a member of the set stored at <code>key</code>.</p>\n<p>For every <code>member</code>, <code>1</code> is returned if the value is a member of the set, or <code>0</code> if the element is not a member of the set or if <code>key</code> does not exist.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;one&quot;\n(integer) 0\n127.0.0.1:6379&gt; SMISMEMBER myset &quot;one&quot; &quot;notamember&quot;\n1) (integer) 1\n2) (integer) 0\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-smove",
    "command": "SMOVE",
    "description": "Moves a member from one set to another.",
    "htmlContent": "<p>Move <code>member</code> from the set at <code>source</code> to the set at <code>destination</code>.\nThis operation is atomic.\nIn every given moment the element will appear to be a member of <code>source</code> <strong>or</strong>\n<code>destination</code> for other clients.</p>\n<p>If the source set does not exist or does not contain the specified element, no\noperation is performed and <code>0</code> is returned.\nOtherwise, the element is removed from the source set and added to the\ndestination set.\nWhen the specified element already exists in the destination set, it is only\nremoved from the source set.</p>\n<p>An error is returned if <code>source</code> or <code>destination</code> does not hold a set value.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myotherset &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; SMOVE myset myotherset &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; SMEMBERS myset\n1) &quot;one&quot;\n127.0.0.1:6379&gt; SMEMBERS myotherset\n1) &quot;three&quot;\n2) &quot;two&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sort",
    "command": "SORT",
    "description": "Sorts the elements in a list, a set, or a sorted set, optionally storing the result.",
    "htmlContent": "<p>Returns or stores the elements contained in the <a href=\"../topics/data-types#lists\">list</a>, <a href=\"../topics/data-types#set\">set</a> or\n<a href=\"../topics/data-types#sorted-sets\">sorted set</a> at <code>key</code>.</p>\n<p>There is also the <code>SORT_RO</code> read-only variant of this command.</p>\n<p>By default, sorting is numeric and elements are compared by their value\ninterpreted as double precision floating point number.\nThis is <code>SORT</code> in its simplest form:</p>\n<pre><code>SORT mylist\n</code></pre>\n<p>Assuming <code>mylist</code> is a list of numbers, this command will return the same list\nwith the elements sorted from small to large.\nIn order to sort the numbers from large to small, use the <code>!DESC</code> modifier:</p>\n<pre><code>SORT mylist DESC\n</code></pre>\n<p>When <code>mylist</code> contains string values and you want to sort them\nlexicographically, use the <code>!ALPHA</code> modifier:</p>\n<pre><code>SORT mylist ALPHA\n</code></pre>\n<p>Valkey is UTF-8 aware, assuming you correctly set the <code>!LC_COLLATE</code> environment\nvariable or the <code>locale-collate</code> config.</p>\n<p>The number of returned elements can be limited using the <code>!LIMIT</code> modifier.\nThis modifier takes the <code>offset</code> argument, specifying the number of elements to\nskip and the <code>count</code> argument, specifying the number of elements to return from\nstarting at <code>offset</code>.\nThe following example will return 10 elements of the sorted version of <code>mylist</code>,\nstarting at element 0 (<code>offset</code> is zero-based):</p>\n<pre><code>SORT mylist LIMIT 0 10\n</code></pre>\n<p>Almost all modifiers can be used together.\nThe following example will return the first 5 elements, lexicographically sorted\nin descending order:</p>\n<pre><code>SORT mylist LIMIT 0 5 ALPHA DESC\n</code></pre>\n<h2>Sorting by external keys</h2>\n<p>Sometimes you want to sort elements using external keys as weights to compare\ninstead of comparing the actual elements in the list, set or sorted set.\nLet&#39;s say the list <code>mylist</code> contains the elements <code>1</code>, <code>2</code> and <code>3</code> representing\nunique IDs of objects stored in <code>object_1</code>, <code>object_2</code> and <code>object_3</code>.\nWhen these objects have associated weights stored in <code>weight_1</code>, <code>weight_2</code> and\n<code>weight_3</code>, <code>SORT</code> can be instructed to use these weights to sort <code>mylist</code> with\nthe following statement:</p>\n<pre><code>SORT mylist BY weight_*\n</code></pre>\n<p>The <code>BY</code> option takes a pattern (equal to <code>weight_*</code> in this example) that is\nused to generate the keys that are used for sorting.\nThese key names are obtained substituting the first occurrence of <code>*</code> with the\nactual value of the element in the list (<code>1</code>, <code>2</code> and <code>3</code> in this example).</p>\n<h2>Skip sorting the elements</h2>\n<p>The <code>!BY</code> option can also take a non-existent key, which causes <code>SORT</code> to skip\nthe sorting operation.\nThis is useful if you want to retrieve external keys (see the <code>!GET</code> option\nbelow) without the overhead of sorting.</p>\n<pre><code>SORT mylist BY nosort\n</code></pre>\n<h2>Retrieving external keys</h2>\n<p>Our previous example returns just the sorted IDs.\nIn some cases, it is more useful to get the actual objects instead of their IDs\n(<code>object_1</code>, <code>object_2</code> and <code>object_3</code>).\nRetrieving external keys based on the elements in a list, set or sorted set can\nbe done with the following command:</p>\n<pre><code>SORT mylist BY weight_* GET object_*\n</code></pre>\n<p>The <code>!GET</code> option can be used multiple times in order to get more keys for every\nelement of the original list, set or sorted set.</p>\n<p>It is also possible to <code>!GET</code> the element itself using the special pattern <code>#</code>:</p>\n<pre><code>SORT mylist BY weight_* GET object_* GET #\n</code></pre>\n<h2>Restrictions for using external keys</h2>\n<p>Before 8.0, when enabling Valkey <code>cluster-mode</code> there is no way to guarantee the existence of the external keys on the node which the command is processed on. In this case, any use of <code>GET</code> or <code>BY</code> which reference external key pattern will cause the command to fail with an error.</p>\n<p>Starting from 8.0, pattern with hash tag can be mapped to a slot, and so in Valkey <code>cluster-mode</code>, the use of <code>BY</code> or <code>GET</code> is allowed when pattern contains hash tag and implies a specific slot which the key is also in, which means any key matching this pattern must be in the same slot as the key, and therefore in the same node. For example, in cluster mode, <code>{mylist}weight_*</code> is acceptable as a pattern when sorting <code>mylist</code>, while pattern <code>{abc}weight_*</code> will be denied, causing the command to fail with an error.</p>\n<p>To use pattern with hash tag, see <a href=\"../topics/cluster-spec#hash-tags\">Hash tags</a> for more information.</p>\n<p>Any use of <code>GET</code> or <code>BY</code> which reference external key pattern will only be allowed in case the current user running the command has full key read permissions.\nFull key read permissions can be set for the user by, for example, specifying <code>&#39;%R~*&#39;</code> or <code>&#39;~*</code> with the relevant command access rules.\nYou can check the <code>ACL SETUSER</code> command manual for more information on setting ACL access rules.\nIf full key read permissions aren&#39;t set, the command will fail with an error.</p>\n<h2>Storing the result of a SORT operation</h2>\n<p>By default, <code>SORT</code> returns the sorted elements to the client.\nWith the <code>!STORE</code> option, the result will be stored as a list at the specified\nkey instead of being returned to the client.</p>\n<pre><code>SORT mylist BY weight_* STORE resultkey\n</code></pre>\n<p>An interesting pattern using <code>SORT ... STORE</code> consists in associating an\n<code>EXPIRE</code> timeout to the resulting key so that in applications where the result\nof a <code>SORT</code> operation can be cached for some time.\nOther clients will use the cached list instead of calling <code>SORT</code> for every\nrequest.\nWhen the key will timeout, an updated version of the cache can be created by\ncalling <code>SORT ... STORE</code> again.</p>\n<p>Note that for correctly implementing this pattern it is important to avoid\nmultiple clients rebuilding the cache at the same time.\nSome kind of locking is needed here (for instance using <code>SETNX</code>).</p>\n<h2>Using hashes in <code>!BY</code> and <code>!GET</code></h2>\n<p>It is possible to use <code>!BY</code> and <code>!GET</code> options against hash fields with the\nfollowing syntax:</p>\n<pre><code>SORT mylist BY weight_*-&gt;fieldname GET object_*-&gt;fieldname\n</code></pre>\n<p>The string <code>-&gt;</code> is used to separate the key name from the hash field name.\nThe key is substituted as documented above, and the hash stored at the resulting\nkey is accessed to retrieve the specified hash field.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-sort_ro",
    "command": "SORT_RO",
    "description": "Returns the sorted elements of a list, a set, or a sorted set.",
    "htmlContent": "<p>Read-only variant of the <code>SORT</code> command. It is exactly like the original <code>SORT</code> but refuses the <code>STORE</code> option and can safely be used in read-only replicas.</p>\n<p>Since the original <code>SORT</code> has a <code>STORE</code> option it is technically flagged as a writing command in the Valkey command table. For this reason read-only replicas in a Valkey Cluster will redirect it to the primary instance even if the connection is in read-only mode (see the <code>READONLY</code> command of Valkey Cluster).</p>\n<p>The <code>SORT_RO</code> variant was introduced in order to allow <code>SORT</code> behavior in read-only replicas without breaking compatibility on command flags.</p>\n<p>See original <code>SORT</code> for more details.</p>\n<h2>Examples</h2>\n<pre><code>SORT_RO mylist BY weight_*-&gt;fieldname GET object_*-&gt;fieldname\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-spop",
    "command": "SPOP",
    "description": "Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.",
    "htmlContent": "<p>Removes and returns one or more random members from the set value store at <code>key</code>.</p>\n<p>This operation is similar to <code>SRANDMEMBER</code>, that returns one or more random elements from a set but does not remove it.</p>\n<p>By default, the command pops a single member from the set. When provided with\nthe optional <code>count</code> argument, the reply will consist of up to <code>count</code> members,\ndepending on the set&#39;s cardinality.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; SPOP myset\n&quot;three&quot;\n127.0.0.1:6379&gt; SMEMBERS myset\n1) &quot;one&quot;\n2) &quot;two&quot;\n127.0.0.1:6379&gt; SADD myset &quot;four&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;five&quot;\n(integer) 1\n127.0.0.1:6379&gt; SPOP myset 3\n1) &quot;one&quot;\n2) &quot;four&quot;\n3) &quot;five&quot;\n127.0.0.1:6379&gt; SMEMBERS myset\n1) &quot;two&quot;\n</code></pre>\n<h2>Distribution of returned elements</h2>\n<p>Note that this command is not suitable when you need a guaranteed uniform distribution of the returned elements. For more information about the algorithms used for <code>SPOP</code>, look up both the Knuth sampling and Floyd sampling algorithms.</p>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-spublish",
    "command": "SPUBLISH",
    "description": "Post a message to a shard channel",
    "htmlContent": "<p>Posts a message to the given shard channel.</p>\n<p>In Valkey Cluster, shard channels are assigned to slots by the same algorithm used to assign keys to slots.\nA shard message must be sent to a node that own the slot the shard channel is hashed to. \nThe cluster makes sure that published shard messages are forwarded to all the node in the shard, so clients can subscribe to a shard channel by connecting to any one of the nodes in the shard.</p>\n<p>For more information about sharded pubsub, see <a href=\"../topics/pubsub#sharded-pubsub\">Sharded Pubsub</a>.</p>\n<h2>Examples</h2>\n<p>For example the following command publish to channel <code>orders</code> with a subscriber already waiting for message(s).</p>\n<pre><code>&gt; spublish orders hello\n(integer) 1\n</code></pre>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-srandmember",
    "command": "SRANDMEMBER",
    "description": "Get one or multiple random members from a set",
    "htmlContent": "<p>When called with just the <code>key</code> argument, return a random element from the set value stored at <code>key</code>.</p>\n<p>If the provided <code>count</code> argument is positive, return an array of <strong>distinct elements</strong>.\nThe array&#39;s length is either <code>count</code> or the set&#39;s cardinality (<code>SCARD</code>), whichever is lower.</p>\n<p>If called with a negative <code>count</code>, the behavior changes and the command is allowed to return the <strong>same element multiple times</strong>.\nIn this case, the number of returned elements is the absolute value of the specified <code>count</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset one two three\n(integer) 3\n127.0.0.1:6379&gt; SRANDMEMBER myset\n&quot;three&quot;\n127.0.0.1:6379&gt; SRANDMEMBER myset 2\n1) &quot;one&quot;\n2) &quot;three&quot;\n127.0.0.1:6379&gt; SRANDMEMBER myset -5\n1) &quot;two&quot;\n2) &quot;one&quot;\n3) &quot;one&quot;\n4) &quot;one&quot;\n5) &quot;two&quot;\n</code></pre>\n<h2>Specification of the behavior when count is passed</h2>\n<p>When the <code>count</code> argument is a positive value this command behaves as follows:</p>\n<ul>\n<li>No repeated elements are returned.</li>\n<li>If <code>count</code> is bigger than the set&#39;s cardinality, the command will only return the whole set without additional elements.</li>\n<li>The order of elements in the reply is not truly random, so it is up to the client to shuffle them if needed.</li>\n</ul>\n<p>When the <code>count</code> is a negative value, the behavior changes as follows:</p>\n<ul>\n<li>Repeating elements are possible.</li>\n<li>Exactly <code>count</code> elements, or an empty array if the set is empty (non-existing key), are always returned.</li>\n<li>The order of elements in the reply is truly random.</li>\n</ul>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-srem",
    "command": "SREM",
    "description": "Removes one or more members from a set. Deletes the set if the last member was removed.",
    "htmlContent": "<p>Remove the specified members from the set stored at <code>key</code>.\nSpecified members that are not a member of this set are ignored.\nIf <code>key</code> does not exist, it is treated as an empty set and this command returns\n<code>0</code>.</p>\n<p>An error is returned when the value stored at <code>key</code> is not a set.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD myset &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; SREM myset &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; SREM myset &quot;four&quot;\n(integer) 0\n127.0.0.1:6379&gt; SMEMBERS myset\n1) &quot;two&quot;\n2) &quot;three&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sscan",
    "command": "SSCAN",
    "description": "Iterates over members of a set.",
    "htmlContent": "<p>See <code>SCAN</code> for <code>SSCAN</code> documentation.</p>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-ssubscribe",
    "command": "SSUBSCRIBE",
    "description": "Listens for messages published to shard channels.",
    "htmlContent": "<p>Subscribes the client to the specified shard channels.</p>\n<p>In a Valkey cluster, shard channels are assigned to slots by the same algorithm used to assign keys to slots. \nClient(s) can subscribe to a node covering a slot (primary/replica) to receive the messages published. \nAll the specified shard channels needs to belong to a single slot to subscribe in a given <code>SSUBSCRIBE</code> call,\nA client can subscribe to channels across different slots over separate <code>SSUBSCRIBE</code> call.</p>\n<p>For more information about sharded Pub/Sub, see <a href=\"../topics/pubsub#sharded-pubsub\">Sharded Pub/Sub</a>.</p>\n<h2>Examples</h2>\n<pre><code>&gt; ssubscribe orders\nReading messages... (press Ctrl-C to quit)\n1) &quot;ssubscribe&quot;\n2) &quot;orders&quot;\n3) (integer) 1\n1) &quot;smessage&quot;\n2) &quot;orders&quot;\n3) &quot;hello&quot;\n</code></pre>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-strlen",
    "command": "STRLEN",
    "description": "Returns the length of a string value.",
    "htmlContent": "<p>Returns the length of the string value stored at <code>key</code>.\nAn error is returned when <code>key</code> holds a non-string value.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello world&quot;\nOK\n127.0.0.1:6379&gt; STRLEN mykey\n(integer) 11\n127.0.0.1:6379&gt; STRLEN nonexisting\n(integer) 0\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-subscribe",
    "command": "SUBSCRIBE",
    "description": "Listens for messages published to channels.",
    "htmlContent": "<p>Subscribes the client to the specified channels.</p>\n<p>Once the client enters the subscribed state it is not supposed to issue any\nother commands, except for additional <code>SUBSCRIBE</code>, <code>SSUBSCRIBE</code>, <code>PSUBSCRIBE</code>, <code>UNSUBSCRIBE</code>, <code>SUNSUBSCRIBE</code>, \n<code>PUNSUBSCRIBE</code>, <code>PING</code>, <code>RESET</code> and <code>QUIT</code> commands.\nHowever, if RESP3 is used (see <code>HELLO</code>) it is possible for a client to issue any commands while in subscribed state.</p>\n<p>Note that <code>RESET</code> can be called to exit subscribed state.</p>\n<p>For more information, see <a href=\"../topics/pubsub\">Pub/sub</a>.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-substr",
    "command": "SUBSTR",
    "description": "Returns a substring from a string value.",
    "htmlContent": "<p>Returns the substring of the string value stored at <code>key</code>, determined by the\noffsets <code>start</code> and <code>end</code> (both are inclusive).\nNegative offsets can be used in order to provide an offset starting from the end\nof the string.\nSo -1 means the last character, -2 the penultimate and so forth.</p>\n<p>The function handles out of range requests by limiting the resulting range to\nthe actual length of the string.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;This is a string&quot;\nOK\n127.0.0.1:6379&gt; GETRANGE mykey 0 3\n&quot;This&quot;\n127.0.0.1:6379&gt; GETRANGE mykey -3 -1\n&quot;ing&quot;\n127.0.0.1:6379&gt; GETRANGE mykey 0 -1\n&quot;This is a string&quot;\n127.0.0.1:6379&gt; GETRANGE mykey 10 100\n&quot;string&quot;\n</code></pre>\n",
    "categories": [
      "string"
    ]
  },
  {
    "unid": "cmd-sunion",
    "command": "SUNION",
    "description": "Returns the union of multiple sets.",
    "htmlContent": "<p>Returns the members of the set resulting from the union of all the given sets.</p>\n<p>For example:</p>\n<pre><code>key1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSUNION key1 key2 key3 = {a,b,c,d,e}\n</code></pre>\n<p>Keys that do not exist are considered to be empty sets.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SUNION key1 key2\n1) &quot;a&quot;\n2) &quot;b&quot;\n3) &quot;c&quot;\n4) &quot;d&quot;\n5) &quot;e&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sunionstore",
    "command": "SUNIONSTORE",
    "description": "Stores the union of multiple sets in a key.",
    "htmlContent": "<p>This command is equal to <code>SUNION</code>, but instead of returning the resulting set,\nit is stored in <code>destination</code>.</p>\n<p>If <code>destination</code> already exists, it is overwritten.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SADD key1 &quot;a&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;b&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key1 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;c&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;d&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key2 &quot;e&quot;\n(integer) 1\n127.0.0.1:6379&gt; SUNIONSTORE key key1 key2\n(integer) 5\n127.0.0.1:6379&gt; SMEMBERS key\n1) &quot;a&quot;\n2) &quot;b&quot;\n3) &quot;c&quot;\n4) &quot;d&quot;\n5) &quot;e&quot;\n</code></pre>\n",
    "categories": [
      "set"
    ]
  },
  {
    "unid": "cmd-sunsubscribe",
    "command": "SUNSUBSCRIBE",
    "description": "Stops listening to messages posted to shard channels.",
    "htmlContent": "<p>Unsubscribes the client from the given shard channels, or from all of them if none is given.</p>\n<p>When no shard channels are specified, the client is unsubscribed from all the previously subscribed shard channels. \nIn this case a message for every unsubscribed shard channel will be sent to the client. </p>\n<p>Note: The global channels and shard channels needs to be unsubscribed from separately.</p>\n<p>For more information about sharded Pub/Sub, see <a href=\"../topics/pubsub#sharded-pubsub\">Sharded Pub/Sub</a>.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-swapdb",
    "command": "SWAPDB",
    "description": "Swaps two Valkey databases.",
    "htmlContent": "<p>This command swaps two Valkey databases, so that immediately all the\nclients connected to a given database will see the data of the other database, and\nthe other way around. Example:</p>\n<pre><code>SWAPDB 0 1\n</code></pre>\n<p>This will swap database 0 with database 1. All the clients connected with database 0 will immediately see the new data, exactly like all the clients connected with database 1 will see the data that was formerly of database 0.</p>\n<h2>Examples</h2>\n<pre><code>SWAPDB 0 1\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-sync",
    "command": "SYNC",
    "description": "An internal command used in replication.",
    "htmlContent": "<p>Initiates a replication stream from the primary.</p>\n<p>The <code>SYNC</code> command is called by Valkey replicas for initiating a replication\nstream from the primary. It has been replaced in newer versions of Valkey by\n <code>PSYNC</code>.</p>\n<p>For more information about replication in Valkey please check the\n<a href=\"../topics/replication\">replication page</a>.</p>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-time",
    "command": "TIME",
    "description": "Returns the server time.",
    "htmlContent": "<p>The <code>TIME</code> command returns the current server time as a two items lists: a Unix\ntimestamp and the amount of microseconds already elapsed in the current second.\nBasically the interface is very similar to the one of the <code>gettimeofday</code> system\ncall.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; TIME\n1) &quot;1714701491&quot;\n2) &quot;723379&quot;\n127.0.0.1:6379&gt; TIME\n1) &quot;1714701491&quot;\n2) &quot;731773&quot;\n</code></pre>\n",
    "categories": [
      "server"
    ]
  },
  {
    "unid": "cmd-touch",
    "command": "TOUCH",
    "description": "Returns the number of existing keys out of those specified after updating the time they were last accessed.",
    "htmlContent": "<p>Alters the last access time of a key(s).\nA key is ignored if it does not exist.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; SET key2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; TOUCH key1 key2\n(integer) 2\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-ttl",
    "command": "TTL",
    "description": "Returns the expiration time in seconds of a key.",
    "htmlContent": "<p>Returns the remaining time to live of a key that has a timeout.\nThis introspection capability allows a Valkey client to check how many seconds a\ngiven key will continue to be part of the dataset.</p>\n<p>The command returns the following values in case of errors:</p>\n<ul>\n<li>The command returns <code>-2</code> if the key does not exist.</li>\n<li>The command returns <code>-1</code> if the key exists but has no associated expire.</li>\n</ul>\n<p>See also the <code>PTTL</code> command that returns the same information with milliseconds resolution.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; EXPIRE mykey 10\n(integer) 1\n127.0.0.1:6379&gt; TTL mykey\n(integer) 10\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-type",
    "command": "TYPE",
    "description": "Determines the type of value stored at a key.",
    "htmlContent": "<p>Returns the string representation of the type of the value stored at <code>key</code>.\nThe different types that can be returned are: <code>string</code>, <code>list</code>, <code>set</code>, <code>zset</code>,\n<code>hash</code> and <code>stream</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;value&quot;\nOK\n127.0.0.1:6379&gt; LPUSH key2 &quot;value&quot;\n(integer) 1\n127.0.0.1:6379&gt; SADD key3 &quot;value&quot;\n(integer) 1\n127.0.0.1:6379&gt; TYPE key1\nstring\n127.0.0.1:6379&gt; TYPE key2\nlist\n127.0.0.1:6379&gt; TYPE key3\nset\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-unlink",
    "command": "UNLINK",
    "description": "Asynchronously deletes one or more keys.",
    "htmlContent": "<p>This command is very similar to <code>DEL</code>: it removes the specified keys.\nJust like <code>DEL</code> a key is ignored if it does not exist. However the command\nperforms the actual memory reclaiming in a different thread, so it is not\nblocking, while <code>DEL</code> is. This is where the command name comes from: the\ncommand just <strong>unlinks</strong> the keys from the keyspace. The actual removal\nwill happen later asynchronously.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;\nOK\n127.0.0.1:6379&gt; SET key2 &quot;World&quot;\nOK\n127.0.0.1:6379&gt; UNLINK key1 key2 key3\n(integer) 2\n</code></pre>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-unsubscribe",
    "command": "UNSUBSCRIBE",
    "description": "Stops listening to messages posted to channels.",
    "htmlContent": "<p>Unsubscribes the client from the given channels, or from all of them if none is\ngiven.</p>\n<p>When no channels are specified, the client is unsubscribed from all the\npreviously subscribed channels.\nIn this case, a message for every unsubscribed channel will be sent to the\nclient.</p>\n",
    "categories": [
      "pubsub"
    ]
  },
  {
    "unid": "cmd-unwatch",
    "command": "UNWATCH",
    "description": "Forgets about watched keys of a transaction.",
    "htmlContent": "<p>Flushes all the previously watched keys for a <a href=\"../topics/transactions\">transaction</a>.</p>\n<p>If you call <code>EXEC</code> or <code>DISCARD</code>, there&#39;s no need to manually call <code>UNWATCH</code>.</p>\n",
    "categories": [
      "transactions"
    ]
  },
  {
    "unid": "cmd-wait",
    "command": "WAIT",
    "description": "Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.",
    "htmlContent": "<p>This command blocks the current client until all the previous write commands\nare successfully transferred and acknowledged by at least the specified number\nof replicas. If the timeout, specified in milliseconds, is reached, the command\nreturns even if the specified number of replicas were not yet reached.</p>\n<p>The command <strong>will always return</strong> the number of replicas that acknowledged\nthe write commands sent by the current client before the <code>WAIT</code> command, both in the case where\nthe specified number of replicas are reached, or when the timeout is reached.</p>\n<p>A few remarks:</p>\n<ol>\n<li>When <code>WAIT</code> returns, all the previous write commands sent in the context of the current connection are guaranteed to be received by the number of replicas returned by <code>WAIT</code>.</li>\n<li>If the command is sent as part of any context that does not allow blocking, such as inside scripts, the command does not block but instead just return ASAP the number of replicas that acknowledged the previous write commands.</li>\n<li>A timeout of 0 means to block forever.</li>\n<li>Since <code>WAIT</code> returns the number of replicas reached both in case of failure and success, the client should check that the returned value is equal or greater to the replication level it demanded.</li>\n</ol>\n<h2>Consistency and WAIT</h2>\n<p>Note that <code>WAIT</code> does not make Valkey a strongly consistent store: while synchronous replication is part of a replicated state machine, it is not the only thing needed. However in the context of Sentinel or Valkey Cluster failover, <code>WAIT</code> improves the real world data safety.</p>\n<p>Specifically if a given write is transferred to one or more replicas, it is more likely (but not guaranteed) that if the primary fails, we&#39;ll be able to promote, during a failover, a replica that received the write: both Sentinel and Valkey Cluster will do a best-effort attempt to promote the best replica among the set of available replicas.</p>\n<p>However this is just a best-effort attempt so it is possible to still lose a write synchronously replicated to multiple replicas.</p>\n<h2>Implementation details</h2>\n<p>Since the introduction of partial resynchronization with replicas (PSYNC feature) Valkey replicas asynchronously ping their primary with the offset they already processed in the replication stream. This is used in multiple ways:</p>\n<ol>\n<li>Detect timed out replicas.</li>\n<li>Perform a partial resynchronization after a disconnection.</li>\n<li>Implement <code>WAIT</code>.</li>\n</ol>\n<p>In the specific case of the implementation of <code>WAIT</code>, Valkey remembers, for each client, the replication offset of the produced replication stream when a given\nwrite command was executed in the context of a given client. When <code>WAIT</code> is\ncalled Valkey checks if the specified number of replicas already acknowledged\nthis offset or a greater one.</p>\n<h2>Examples</h2>\n<pre><code>&gt; SET foo bar\nOK\n&gt; WAIT 1 0\n(integer) 1\n&gt; WAIT 2 1000\n(integer) 1\n</code></pre>\n<p>In the following example the first call to <code>WAIT</code> does not use a timeout and asks for the write to reach 1 replica. It returns with success. In the second attempt instead we put a timeout, and ask for the replication of the write to two replicas. Since there is a single replica available, after one second <code>WAIT</code> unblocks and returns 1, the number of replicas reached.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-waitaof",
    "command": "WAITAOF",
    "description": "Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.",
    "htmlContent": "<p>This command blocks the current client until all previous write commands by that client are acknowledged as having been fsynced to the AOF of the local Valkey and/or at least the specified number of replicas.</p>\n<p><code>numlocal</code> represents the number of local fsyncs required to be confirmed before proceeding.\nWhen <code>numlocal</code> is set to 1, the command blocks until the data written to the Valkey instance is confirmed to be persisted to the local AOF file.\nThe value 0 disables this check.</p>\n<p>If the timeout, specified in milliseconds, is reached, the command returns even if the specified number of acknowledgments has not been met.</p>\n<p>The command <strong>will always return</strong> the number of primaries and replicas that have fsynced all write commands sent by the current client before the <code>WAITAOF</code> command, both in the case where the specified thresholds were met, and when the timeout is reached.</p>\n<p>A few remarks:</p>\n<ol>\n<li>When <code>WAITAOF</code> returns, all the previous write commands sent in the context of the current connection are guaranteed to be fsynced to the AOF of at least the number of primaries and replicas returned by <code>WAITAOF</code>.</li>\n<li>If the command is sent as part of a <code>MULTI</code> transaction (or any other context that does not allow blocking, such as inside scripts), the command does not block but instead returns immediately the number of primaries and replicas that fsynced all previous write commands.</li>\n<li>A timeout of 0 means to block forever.</li>\n<li>Since <code>WAITAOF</code> returns the number of fsyncs completed both in case of success and timeout, the client should check that the returned values are equal or greater than the persistence level required.</li>\n<li><code>WAITAOF</code> cannot be used on replica instances, and the <code>numlocal</code> argument cannot be non-zero if the local Valkey does not have AOF enabled.</li>\n</ol>\n<h2>Limitations</h2>\n<p>It is possible to write a module or Lua script that propagate writes to the AOF but not the replication stream.\n(For modules, this is done using the <code>fmt</code> argument to <code>RedisModule_Call</code> or <code>RedisModule_Replicate</code>; For Lua scripts, this is achieved using <code>server.set_repl</code>.)</p>\n<p>These features are incompatible with the <code>WAITAOF</code> command as it is currently implemented, and using them in combination may result in incorrect behavior.</p>\n<h2>Consistency and WAITAOF</h2>\n<p>Note that, similarly to <code>WAIT</code>, <code>WAITAOF</code> does not make Valkey a strongly-consistent store.\nUnless waiting for all members of a cluster to fsync writes to disk, data can still be lost during a failover or a Valkey restart.\nHowever, <code>WAITAOF</code> does improve real-world data safety.</p>\n<h2>Implementation details</h2>\n<p>Valkey tracks and increments the replication offset even when no replicas are configured (as long as AOF exists).</p>\n<p>In addition, Valkey replicas asynchronously ping their primary with two replication offsets: the offset they have processed in the replication stream, and the offset they have fsynced to their AOF.</p>\n<p>Valkey remembers, for each client, the replication offset of the produced replication stream when the last write command was executed in the context of that client.\nWhen <code>WAITAOF</code> is called, Valkey checks if the local Valkey and/or the specified number of replicas have confirmed fsyncing this offset or a greater one to their AOF.</p>\n<h2>Examples</h2>\n<pre><code>&gt; SET foo bar\nOK\n&gt; WAITAOF 1 0 0\n1) (integer) 1\n2) (integer) 0\n&gt; WAITAOF 0 1 1000\n1) (integer) 1\n2) (integer) 0\n</code></pre>\n<p>In the above example, the first call to <code>WAITAOF</code> does not use a timeout and asks for the write to be fsynced to the local Valkey only; it returns with [1, 0] when this is completed.</p>\n<p>In the second attempt we instead specify a timeout, and ask for the write to be confirmed as fsynced by a single replica.\nSince there are no connected replicas, the <code>WAITAOF</code> command unblocks after one second and again returns [1, 0], indicating the write has been fsynced on the local Valkey but no replicas.</p>\n",
    "categories": [
      "generic"
    ]
  },
  {
    "unid": "cmd-watch",
    "command": "WATCH",
    "description": "Monitors changes to keys to determine the execution of a transaction.",
    "htmlContent": "<p>Marks the given keys to be watched for conditional execution of a\n<a href=\"../topics/transactions\">transaction</a>.</p>\n",
    "categories": [
      "transactions"
    ]
  },
  {
    "unid": "cmd-xack",
    "command": "XACK",
    "description": "Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.",
    "htmlContent": "<p>The <code>XACK</code> command removes one or multiple messages from the\n<em>Pending Entries List</em> (PEL) of a stream consumer group. A message is pending,\nand as such stored inside the PEL, when it was delivered to some consumer,\nnormally as a side effect of calling <code>XREADGROUP</code>, or when a consumer took\nownership of a message calling <code>XCLAIM</code>. The pending message was delivered to\nsome consumer but the server is yet not sure it was processed at least once.\nSo new calls to <code>XREADGROUP</code> to grab the messages history for a consumer\n(for instance using an ID of 0), will return such message.\nSimilarly the pending message will be listed by the <code>XPENDING</code> command,\nthat inspects the PEL.</p>\n<p>Once a consumer <em>successfully</em> processes a message, it should call <code>XACK</code>\nso that such message does not get processed again, and as a side effect,\nthe PEL entry about this message is also purged, releasing memory from the\nValkey server.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; XACK mystream mygroup 1526569495631-0\n(integer) 1\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xadd",
    "command": "XADD",
    "description": "Appends a new message to a stream. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Appends the specified stream entry to the stream at the specified key.\nIf the key does not exist, as a side effect of running this command the\nkey is created with a stream value. The creation of stream&#39;s key can be\ndisabled with the <code>NOMKSTREAM</code> option.</p>\n<p>An entry is composed of a list of field-value pairs.\nThe field-value pairs are stored in the same order they are given by the user.\nCommands that read the stream, such as <code>XRANGE</code> or <code>XREAD</code>, are guaranteed to return the fields and values exactly in the same order they were added by <code>XADD</code>.</p>\n<p><code>XADD</code> is the <em>only Valkey command</em> that can add data to a stream, but \nthere are other commands, such as <code>XDEL</code> and <code>XTRIM</code>, that are able to\nremove data from a stream.</p>\n<h2>Specifying a Stream ID as an argument</h2>\n<p>A stream entry ID identifies a given entry inside a stream.</p>\n<p>The <code>XADD</code> command will auto-generate a unique ID for you if the ID argument\nspecified is the <code>*</code> character (asterisk ASCII character). However, while\nuseful only in very rare cases, it is possible to specify a well-formed ID, so\nthat the new entry will be added exactly with the specified ID.</p>\n<p>IDs are specified by two numbers separated by a <code>-</code> character:</p>\n<pre><code>1526919030474-55\n</code></pre>\n<p>Both quantities are 64-bit numbers. When an ID is auto-generated, the\nfirst part is the Unix time in milliseconds of the Valkey instance generating\nthe ID. The second part is just a sequence number and is used in order to\ndistinguish IDs generated in the same millisecond.</p>\n<p>You can also specify an incomplete ID, that consists only of the milliseconds part, which is interpreted as a zero value for sequence part.\nTo have only the sequence part automatically generated, specify the milliseconds part followed by the <code>-</code> separator and the <code>*</code> character:</p>\n<pre><code>&gt; XADD mystream 1526919030474-55 message &quot;Hello,&quot;\n&quot;1526919030474-55&quot;\n&gt; XADD mystream 1526919030474-* message &quot; World!&quot;\n&quot;1526919030474-56&quot;\n</code></pre>\n<p>IDs are guaranteed to be always incremental: If you compare the ID of the\nentry just inserted it will be greater than any other past ID, so entries\nare totally ordered inside a stream. In order to guarantee this property,\nif the current top ID in the stream has a time greater than the current\nlocal time of the instance, the top entry time will be used instead, and\nthe sequence part of the ID incremented. This may happen when, for instance,\nthe local clock jumps backward, or if after a failover the new primary has\na different absolute time.</p>\n<p>When a user specified an explicit ID to <code>XADD</code>, the minimum valid ID is\n<code>0-1</code>, and the user <em>must</em> specify an ID which is greater than any other\nID currently inside the stream, otherwise the command will fail and return an error. Usually\nresorting to specific IDs is useful only if you have another system generating\nunique IDs (for instance an SQL table) and you really want the Stream\nIDs to match the one of this other system.</p>\n<h2>Capped streams</h2>\n<p><code>XADD</code> incorporates the same semantics as the <code>XTRIM</code> command - refer to its documentation page for more information.\nThis allows adding new entries and keeping the stream&#39;s size in check with a single call to <code>XADD</code>, effectively capping the stream with an arbitrary threshold.\nAlthough exact trimming is possible and is the default, due to the internal representation of steams it is more efficient to add an entry and trim stream with <code>XADD</code> using <strong>almost exact</strong> trimming (the <code>~</code> argument).</p>\n<p>For example, calling <code>XADD</code> in the following form:</p>\n<pre><code>XADD mystream MAXLEN ~ 1000 * ... entry fields here ...\n</code></pre>\n<p>Will add a new entry but will also evict old entries so that the stream will contain only 1000 entries, or at most a few tens more.</p>\n<h2>Additional information about streams</h2>\n<p>For further information about streams please check our\n<a href=\"../topics/streams-intro\">introduction to Streams document</a>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; XADD mystream * name Sara surname OConnor\n&quot;1714701491958-0&quot;\n127.0.0.1:6379&gt; XADD mystream * field1 value1 field2 value2 field3 value3\n&quot;1714701491968-0&quot;\n127.0.0.1:6379&gt; XLEN mystream\n(integer) 2\n127.0.0.1:6379&gt; XRANGE mystream - +\n1) 1) &quot;1714701491958-0&quot;\n   2) 1) &quot;name&quot;\n      2) &quot;Sara&quot;\n      3) &quot;surname&quot;\n      4) &quot;OConnor&quot;\n2) 1) &quot;1714701491968-0&quot;\n   2) 1) &quot;field1&quot;\n      2) &quot;value1&quot;\n      3) &quot;field2&quot;\n      4) &quot;value2&quot;\n      5) &quot;field3&quot;\n      6) &quot;value3&quot;\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xautoclaim",
    "command": "XAUTOCLAIM",
    "description": "Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.",
    "htmlContent": "<p>This command transfers ownership of pending stream entries that match the specified criteria. Conceptually, <code>XAUTOCLAIM</code>  is equivalent to calling <code>XPENDING</code> and then <code>XCLAIM</code>,\nbut provides a more straightforward way to deal with message delivery failures via <code>SCAN</code>-like semantics.</p>\n<p>Like <code>XCLAIM</code>, the command operates on the stream entries at <code>&lt;key&gt;</code> and in the context of the provided <code>&lt;group&gt;</code>.\nIt transfers ownership to <code>&lt;consumer&gt;</code> of messages pending for more than <code>&lt;min-idle-time&gt;</code> milliseconds and having an equal or greater ID than <code>&lt;start&gt;</code>.</p>\n<p>The optional <code>&lt;count&gt;</code> argument, which defaults to 100, is the upper limit of the number of entries that the command attempts to claim.\nInternally, the command begins scanning the consumer group&#39;s Pending Entries List (PEL) from <code>&lt;start&gt;</code> and filters out entries having an idle time less than or equal to <code>&lt;min-idle-time&gt;</code>.\nThe maximum number of pending entries that the command scans is the product of multiplying <code>&lt;count&gt;</code>&#39;s value by 10 (hard-coded).\nIt is possible, therefore, that the number of entries claimed will be less than the specified value.</p>\n<p>The optional <code>JUSTID</code> argument changes the reply to return just an array of IDs of messages successfully claimed, without returning the actual message.\nUsing this option means the retry counter is not incremented.</p>\n<p>The command returns the claimed entries as an array. It also returns a stream ID intended for cursor-like use as the <code>&lt;start&gt;</code> argument for its subsequent call.\nWhen there are no remaining PEL entries, the command returns the special <code>0-0</code> ID to signal completion.\nHowever, note that you may want to continue calling <code>XAUTOCLAIM</code> even after the scan is complete with the <code>0-0</code> as <code>&lt;start&gt;</code> ID, because enough time passed, so older pending entries may now be eligible for claiming.</p>\n<p>Note that only messages that are idle longer than <code>&lt;min-idle-time&gt;</code> are claimed, and claiming a message resets its idle time.\nThis ensures that only a single consumer can successfully claim a given pending message at a specific instant of time and trivially reduces the probability of processing the same message multiple times.</p>\n<p>While iterating the PEL, if <code>XAUTOCLAIM</code> stumbles upon a message which doesn&#39;t exist in the stream anymore (either trimmed or deleted by <code>XDEL</code>) it does not claim it, and deletes it from the PEL in which it was found.\nThese message IDs are returned to the caller as a part of <code>XAUTOCLAIM</code>s reply.</p>\n<p>Lastly, claiming a message with <code>XAUTOCLAIM</code> also increments the attempted deliveries count for that message, unless the <code>JUSTID</code> option has been specified (which only delivers the message ID, not the message itself).\nMessages that cannot be processed for some reason - for example, because consumers systematically crash when processing them - will exhibit high attempted delivery counts that can be detected by monitoring.</p>\n<h2>Examples</h2>\n<pre><code>&gt; XAUTOCLAIM mystream mygroup Alice 3600000 0-0 COUNT 25\n1) &quot;0-0&quot;\n2) 1) 1) &quot;1609338752495-0&quot;\n      2) 1) &quot;field&quot;\n         2) &quot;value&quot;\n3) (empty array)\n</code></pre>\n<p>In the above example, we attempt to claim up to 25 entries that are pending and idle (not having been acknowledged or claimed) for at least an hour, starting at the stream&#39;s beginning.\nThe consumer &quot;Alice&quot; from the &quot;mygroup&quot; group acquires ownership of these messages.\nNote that the stream ID returned in the example is <code>0-0</code>, indicating that the entire stream was scanned.\nWe can also see that <code>XAUTOCLAIM</code> did not stumble upon any deleted messages (the third reply element is an empty array).</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xclaim",
    "command": "XCLAIM",
    "description": "Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.",
    "htmlContent": "<p>In the context of a stream consumer group, this command changes the ownership\nof a pending message, so that the new owner is the consumer specified as the\ncommand argument. Normally this is what happens:</p>\n<ol>\n<li>There is a stream with an associated consumer group.</li>\n<li>Some consumer A reads a message via <code>XREADGROUP</code> from a stream, in the context of that consumer group.</li>\n<li>As a side effect a pending message entry is created in the Pending Entries List (PEL) of the consumer group: it means the message was delivered to a given consumer, but it was not yet acknowledged via <code>XACK</code>.</li>\n<li>Then suddenly that consumer fails forever.</li>\n<li>Other consumers may inspect the list of pending messages, that are stale for quite some time, using the <code>XPENDING</code> command. In order to continue processing such messages, they use <code>XCLAIM</code> to acquire the ownership of the message and continue. Consumers can also use the <code>XAUTOCLAIM</code> command to automatically scan and claim stale pending messages.</li>\n</ol>\n<p>This dynamic is clearly explained in the <a href=\"../topics/streams-intro\">Stream intro documentation</a>.</p>\n<p>Note that the message is claimed only if its idle time is greater than the minimum idle time we specify when calling <code>XCLAIM</code>. Because as a side effect <code>XCLAIM</code> will also reset the idle time (since this is a new attempt at processing the message), two consumers trying to claim a message at the same time will never both succeed: only one will successfully claim the message. This avoids that we process a given message multiple times in a trivial way (yet multiple processing is possible and unavoidable in the general case).</p>\n<p>Moreover, as a side effect, <code>XCLAIM</code> will increment the count of attempted deliveries of the message unless the <code>JUSTID</code> option has been specified (which only delivers the message ID, not the message itself). In this way messages that cannot be processed for some reason, for instance because the consumers crash attempting to process them, will start to have a larger counter and can be detected inside the system.</p>\n<p><code>XCLAIM</code> will not claim a message in the following cases:</p>\n<ol>\n<li>The message doesn&#39;t exist in the group PEL (i.e. it was never read by any consumer)</li>\n<li>The message exists in the group PEL but not in the stream itself (i.e. the message was read but never acknowledged, and then was deleted from the stream, either by trimming or by <code>XDEL</code>)</li>\n</ol>\n<p>In both cases the reply will not contain a corresponding entry to that message (i.e. the length of the reply array may be smaller than the number of IDs provided to <code>XCLAIM</code>).\nIn the latter case, the message will also be deleted from the PEL in which it was found.</p>\n<h2>Command options</h2>\n<p>The command has multiple options, however most are mainly for internal use in\norder to transfer the effects of <code>XCLAIM</code> or other commands to the AOF file\nand to propagate the same effects to the replicas, and are unlikely to be\nuseful to normal users:</p>\n<ol>\n<li><code>IDLE &lt;ms&gt;</code>: Set the idle time (last time it was delivered) of the message. If IDLE is not specified, an IDLE of 0 is assumed, that is, the time count is reset because the message has now a new owner trying to process it.</li>\n<li><code>TIME &lt;ms-unix-time&gt;</code>: This is the same as IDLE but instead of a relative amount of milliseconds, it sets the idle time to a specific Unix time (in milliseconds). This is useful in order to rewrite the AOF file generating <code>XCLAIM</code> commands.</li>\n<li><code>RETRYCOUNT &lt;count&gt;</code>: Set the retry counter to the specified value. This counter is incremented every time a message is delivered again. Normally <code>XCLAIM</code> does not alter this counter, which is just served to clients when the XPENDING command is called: this way clients can detect anomalies, like messages that are never processed for some reason after a big number of delivery attempts.</li>\n<li><code>FORCE</code>: Creates the pending message entry in the PEL even if certain specified IDs are not already in the PEL assigned to a different client. However the message must be exist in the stream, otherwise the IDs of non existing messages are ignored.</li>\n<li><code>JUSTID</code>: Return just an array of IDs of messages successfully claimed, without returning the actual message. Using this option means the retry counter is not incremented.</li>\n</ol>\n<h2>Examples</h2>\n<pre><code>&gt; XCLAIM mystream mygroup Alice 3600000 1526569498055-0\n1) 1) 1526569498055-0\n   2) 1) &quot;message&quot;\n      2) &quot;orange&quot;\n</code></pre>\n<p>In the above example we claim the message with ID <code>1526569498055-0</code>, only if the message is idle for at least one hour without the original consumer or some other consumer making progresses (acknowledging or claiming it), and assigns the ownership to the consumer <code>Alice</code>.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xdel",
    "command": "XDEL",
    "description": "Returns the number of messages after removing them from a stream.",
    "htmlContent": "<p>Removes the specified entries from a stream, and returns the number of entries\ndeleted.  This number may be less than the number of IDs passed to the command in\nthe case where some of the specified IDs do not exist in the stream.</p>\n<p>Normally you may think at a Stream as an append-only data structure,\nhowever Streams are represented in memory, so we are also able to \ndelete entries. This may be useful, for instance, in order to comply with\ncertain privacy policies.</p>\n<h2>Understanding the low level details of entries deletion</h2>\n<p>streams are represented in a way that makes them memory efficient:\na radix tree is used in order to index macro-nodes that pack linearly tens\nof stream entries. Normally what happens when you delete an entry from a stream\nis that the entry is not <em>really</em> evicted, it just gets marked as deleted.</p>\n<p>Eventually if all the entries in a macro-node are marked as deleted, the whole\nnode is destroyed and the memory reclaimed. This means that if you delete\na large amount of entries from a stream, for instance more than 50% of the\nentries appended to the stream, the memory usage per entry may increment, since\nwhat happens is that the stream will become fragmented. However the stream\nperformance will remain the same.</p>\n<p>In future versions of Valkey it is possible that we&#39;ll trigger a node garbage\ncollection in case a given macro-node reaches a given amount of deleted\nentries. Currently with the usage we anticipate for this data structure, it is\nnot a good idea to add such complexity.</p>\n<h2>Examples</h2>\n<pre><code>&gt; XADD mystream * a 1\n1538561698944-0\n&gt; XADD mystream * b 2\n1538561700640-0\n&gt; XADD mystream * c 3\n1538561701744-0\n&gt; XDEL mystream 1538561700640-0\n(integer) 1\n127.0.0.1:6379&gt; XRANGE mystream - +\n1) 1) 1538561698944-0\n   2) 1) &quot;a&quot;\n      2) &quot;1&quot;\n2) 1) 1538561701744-0\n   2) 1) &quot;c&quot;\n      2) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup",
    "command": "XGROUP",
    "description": "A container for consumer groups commands.",
    "htmlContent": "<p>This is a container command for stream consumer group management commands.</p>\n<p>To see the list of available commands you can call <code>XGROUP HELP</code>.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup-create",
    "command": "XGROUP CREATE",
    "description": "Creates a consumer group.",
    "htmlContent": "<p>Create a new consumer group uniquely identified by <code>&lt;groupname&gt;</code> for the stream stored at <code>&lt;key&gt;</code></p>\n<p>Every group has a unique name in a given stream. \nWhen a consumer group with the same name already exists, the command returns a <code>-BUSYGROUP</code> error.</p>\n<p>The command&#39;s <code>&lt;id&gt;</code> argument specifies the last delivered entry in the stream from the new group&#39;s perspective.\nThe special ID <code>$</code> is the ID of the last entry in the stream, but you can substitute it with any valid ID.</p>\n<p>For example, if you want the group&#39;s consumers to fetch the entire stream from the beginning, use zero as the starting ID for the consumer group:</p>\n<pre><code>XGROUP CREATE mystream mygroup 0\n</code></pre>\n<p>By default, the <code>XGROUP CREATE</code> command expects that the target stream exists, and returns an error when it doesn&#39;t.\nIf a stream does not exist, you can create it automatically with length of 0 by using the optional <code>MKSTREAM</code> subcommand as the last argument after the <code>&lt;id&gt;</code>:</p>\n<pre><code>XGROUP CREATE mystream mygroup $ MKSTREAM\n</code></pre>\n<p>To enable consumer group lag tracking, specify the optional <code>entries_read</code> named argument with an arbitrary ID.\nAn arbitrary ID is any ID that isn&#39;t the ID of the stream&#39;s first entry, last entry, or zero (&quot;0-0&quot;) ID.\nUse it to find out how many entries are between the arbitrary ID (excluding it) and the stream&#39;s last entry.\nSet the <code>entries_read</code> the stream&#39;s <code>entries_added</code> subtracted by the number of entries.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup-createconsumer",
    "command": "XGROUP CREATECONSUMER",
    "description": "Creates a consumer in a consumer group.",
    "htmlContent": "<p>Create a consumer named <code>&lt;consumername&gt;</code> in the consumer group <code>&lt;groupname&gt;</code> of the stream that&#39;s stored at <code>&lt;key&gt;</code>.</p>\n<p>Consumers are also created automatically whenever an operation, such as <code>XREADGROUP</code>, references a consumer that doesn&#39;t exist.\nThis is valid for <code>XREADGROUP</code> only when there is data in the stream.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup-delconsumer",
    "command": "XGROUP DELCONSUMER",
    "description": "Deletes a consumer from a consumer group.",
    "htmlContent": "<p>The <code>XGROUP DELCONSUMER</code> command deletes a consumer from the consumer group.</p>\n<p>Sometimes it may be useful to remove old consumers since they are no longer used.</p>\n<p>Note, however, that any pending messages that the consumer had will become unclaimable after it was deleted.\nIt is strongly recommended, therefore, that any pending messages are claimed or acknowledged prior to deleting the consumer from the group.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup-destroy",
    "command": "XGROUP DESTROY",
    "description": "Destroys a consumer group.",
    "htmlContent": "<p>The <code>XGROUP DESTROY</code> command completely destroys a consumer group.</p>\n<p>The consumer group will be destroyed even if there are active consumers, and pending messages, so make sure to call this command only when really needed.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup-help",
    "command": "XGROUP HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>XGROUP HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xgroup-setid",
    "command": "XGROUP SETID",
    "description": "Sets the last-delivered ID of a consumer group.",
    "htmlContent": "<p>Set the <strong>last delivered ID</strong> for a consumer group.</p>\n<p>Normally, a consumer group&#39;s last delivered ID is set when the group is created with <code>XGROUP CREATE</code>.\nThe <code>XGROUP SETID</code> command allows modifying the group&#39;s last delivered ID, without having to delete and recreate the group.\nFor instance if you want the consumers in a consumer group to re-process all the messages in a stream, you may want to set its next ID to 0:</p>\n<pre><code>XGROUP SETID mystream mygroup 0\n</code></pre>\n<p>The optional <code>entries_read</code> argument can be specified to enable consumer group lag tracking for an arbitrary ID.\nAn arbitrary ID is any ID that isn&#39;t the ID of the stream&#39;s first entry, its last entry or the zero (&quot;0-0&quot;) ID.\nThis can be useful you know exactly how many entries are between the arbitrary ID (excluding it) and the stream&#39;s last entry.\nIn such cases, the <code>entries_read</code> can be set to the stream&#39;s <code>entries_added</code> subtracted with the number of entries.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xinfo",
    "command": "XINFO",
    "description": "A container for stream introspection commands.",
    "htmlContent": "<p>This is a container command for stream introspection commands.</p>\n<p>To see the list of available commands you can call <code>XINFO HELP</code>.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xinfo-consumers",
    "command": "XINFO CONSUMERS",
    "description": "Returns a list of the consumers in a consumer group.",
    "htmlContent": "<p>This command returns the list of consumers that belong to the <code>&lt;groupname&gt;</code> consumer group of the stream stored at <code>&lt;key&gt;</code>.</p>\n<p>The following information is provided for each consumer in the group:</p>\n<ul>\n<li><strong>name</strong>: the consumer&#39;s name</li>\n<li><strong>pending</strong>: the number of entries in the PEL: pending messages for the consumer, which are messages that were delivered but are yet to be acknowledged</li>\n<li><strong>idle</strong>: the number of milliseconds that have passed since the consumer&#39;s last attempted interaction (Examples: <code>XREADGROUP</code>, <code>XCLAIM</code>, <code>XAUTOCLAIM</code>)</li>\n<li><strong>inactive</strong>: the number of milliseconds that have passed since the consumer&#39;s last successful interaction (Examples: <code>XREADGROUP</code> that actually read some entries into the PEL, <code>XCLAIM</code>/<code>XAUTOCLAIM</code> that actually claimed some entries)</li>\n</ul>\n<h2>Examples</h2>\n<pre><code>&gt; XINFO CONSUMERS mystream mygroup\n1) 1) name\n   2) &quot;Alice&quot;\n   3) pending\n   4) (integer) 1\n   5) idle\n   6) (integer) 9104628\n   7) inactive\n   8) (integer) 18104698\n2) 1) name\n   2) &quot;Bob&quot;\n   3) pending\n   4) (integer) 1\n   5) idle\n   6) (integer) 83841983\n   7) inactive\n   8) (integer) 993841998\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xinfo-groups",
    "command": "XINFO GROUPS",
    "description": "Returns a list of the consumer groups of a stream.",
    "htmlContent": "<p>This command returns the list of all consumer groups of the stream stored at <code>&lt;key&gt;</code>.</p>\n<p>By default, only the following information is provided for each of the groups:</p>\n<ul>\n<li><strong>name</strong>: the consumer group&#39;s name</li>\n<li><strong>consumers</strong>: the number of consumers in the group</li>\n<li><strong>pending</strong>: the length of the group&#39;s pending entries list (PEL), which are messages that were delivered but are yet to be acknowledged</li>\n<li><strong>last-delivered-id</strong>: the ID of the last entry delivered to the group&#39;s consumers</li>\n<li><strong>entries-read</strong>: the logical &quot;read counter&quot; of the last entry delivered to the group&#39;s consumers</li>\n<li><strong>lag</strong>: the number of entries in the stream that are still waiting to be delivered to the group&#39;s consumers, or a NULL when that number can&#39;t be determined.</li>\n</ul>\n<h3>Consumer group lag</h3>\n<p>The lag of a given consumer group is the number of entries in the range between the group&#39;s <code>entries_read</code> and the stream&#39;s <code>entries_added</code>.\nPut differently, it is the number of entries that are yet to be delivered to the group&#39;s consumers.</p>\n<p>The values and trends of this metric are helpful in making scaling decisions about the consumer group.\nYou can address high lag values by adding more consumers to the group, whereas low values may indicate that you can remove consumers from the group to scale it down.</p>\n<p>Valkey reports the lag of a consumer group by keeping two counters: the number of all entries added to the stream and the number of logical reads made by the consumer group.\nThe lag is the difference between these two.</p>\n<p>The stream&#39;s counter (the <code>entries_added</code> field of the <code>XINFO STREAM</code> command) is incremented by one with every <code>XADD</code> and counts all of the entries added to the stream during its lifetime.</p>\n<p>The consumer group&#39;s counter, <code>entries_read</code>, is the logical counter of entries the group had read.\nIt is important to note that this counter is only a heuristic rather than an accurate counter, and therefore the use of the term &quot;logical&quot;.\nThe counter attempts to reflect the number of entries that the group <strong>should have read</strong> to get to its current <code>last-delivered-id</code>.\nThe <code>entries_read</code> counter is accurate only in a perfect world, where a consumer group starts at the stream&#39;s first entry and processes all of its entries (i.e., no entries deleted before processing).</p>\n<p>There are two special cases in which this mechanism is unable to report the lag:</p>\n<ol>\n<li>A consumer group is created or set with an arbitrary last delivered ID (the <code>XGROUP CREATE</code> and <code>XGROUP SETID</code> commands, respectively).\n An arbitrary ID is any ID that isn&#39;t the ID of the stream&#39;s first entry, its last entry or the zero (&quot;0-0&quot;) ID.</li>\n<li>One or more entries between the group&#39;s <code>last-delivered-id</code> and the stream&#39;s <code>last-generated-id</code> were deleted (with <code>XDEL</code> or a trimming operation).</li>\n</ol>\n<p>In both cases, the group&#39;s read counter is considered invalid, and the returned value is set to NULL to signal that the lag isn&#39;t currently available.</p>\n<p>However, the lag is only temporarily unavailable.\nIt is restored automatically during regular operation as consumers keep processing messages.\nOnce the consumer group delivers the last message in the stream to its members, it will be set with the correct logical read counter, and tracking its lag can be resumed.</p>\n<h2>Examples</h2>\n<pre><code>&gt; XINFO GROUPS mystream\n1)  1) &quot;name&quot;\n    2) &quot;mygroup&quot;\n    3) &quot;consumers&quot;\n    4) (integer) 2\n    5) &quot;pending&quot;\n    6) (integer) 2\n    7) &quot;last-delivered-id&quot;\n    8) &quot;1638126030001-0&quot;\n    9) &quot;entries-read&quot;\n   10) (integer) 2\n   11) &quot;lag&quot;\n   12) (integer) 0\n2)  1) &quot;name&quot;\n    2) &quot;some-other-group&quot;\n    3) &quot;consumers&quot;\n    4) (integer) 1\n    5) &quot;pending&quot;\n    6) (integer) 0\n    7) &quot;last-delivered-id&quot;\n    8) &quot;1638126028070-0&quot;\n    9) &quot;entries-read&quot;\n   10) (integer) 1\n   11) &quot;lag&quot;\n   12) (integer) 1\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xinfo-help",
    "command": "XINFO HELP",
    "description": "Returns helpful text about the different subcommands.",
    "htmlContent": "<p>The <code>XINFO HELP</code> command returns a helpful text describing the different subcommands.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xinfo-stream",
    "command": "XINFO STREAM",
    "description": "Returns information about a stream.",
    "htmlContent": "<p>This command returns information about the stream stored at <code>&lt;key&gt;</code>.</p>\n<p>The informative details provided by this command are:</p>\n<ul>\n<li><strong>length</strong>: the number of entries in the stream (see <code>XLEN</code>)</li>\n<li><strong>radix-tree-keys</strong>: the number of keys in the underlying radix data structure</li>\n<li><strong>radix-tree-nodes</strong>: the number of nodes in the underlying radix data structure</li>\n<li><strong>groups</strong>: the number of consumer groups defined for the stream</li>\n<li><strong>last-generated-id</strong>: the ID of the least-recently entry that was added to the stream</li>\n<li><strong>max-deleted-entry-id</strong>: the maximal entry ID that was deleted from the stream</li>\n<li><strong>entries-added</strong>: the count of all entries added to the stream during its lifetime</li>\n<li><strong>first-entry</strong>: the ID and field-value tuples of the first entry in the stream</li>\n<li><strong>last-entry</strong>: the ID and field-value tuples of the last entry in the stream</li>\n</ul>\n<h3>The <code>FULL</code> modifier</h3>\n<p>The optional <code>FULL</code> modifier provides a more verbose reply.\nWhen provided, the <code>FULL</code> reply includes an <strong>entries</strong> array that consists of the stream entries (ID and field-value tuples) in ascending order.\nFurthermore, <strong>groups</strong> is also an array, and for each of the consumer groups it consists of the information reported by <code>XINFO GROUPS</code> and <code>XINFO CONSUMERS</code>.</p>\n<p>The following information is provided for each of the groups:</p>\n<ul>\n<li><strong>name</strong>: the consumer group&#39;s name</li>\n<li><strong>last-delivered-id</strong>: the ID of the last entry delivered to the group&#39;s consumers</li>\n<li><strong>entries-read</strong>: the logical &quot;read counter&quot; of the last entry delivered to the group&#39;s consumers</li>\n<li><strong>lag</strong>: the number of entries in the stream that are still waiting to be delivered to the group&#39;s consumers, or a NULL when that number can&#39;t be determined.</li>\n<li><strong>pel-count</strong>: the length of the group&#39;s pending entries list (PEL), which are messages that were delivered but are yet to be acknowledged</li>\n<li><strong>pending</strong>: an array with pending entries information (see below)</li>\n<li><strong>consumers</strong>: an array with consumers information (see below)</li>\n</ul>\n<p>The following information is provided for each pending entry:</p>\n<ol>\n<li>The ID of the message.</li>\n<li>The name of the consumer that fetched the message and has still to acknowledge it. We call it the current <em>owner</em> of the message.</li>\n<li>The UNIX timestamp of when the message was delivered to this consumer.</li>\n<li>The number of times this message was delivered.</li>\n</ol>\n<p>The following information is provided for each consumer:</p>\n<ul>\n<li><strong>name</strong>: the consumer&#39;s name</li>\n<li><strong>seen-time</strong>: the UNIX timestamp of the last attempted interaction (Examples: <code>XREADGROUP</code>, <code>XCLAIM</code>, <code>XAUTOCLAIM</code>)</li>\n<li><strong>active-time</strong>: the UNIX timestamp of the last successful interaction (Examples: <code>XREADGROUP</code> that actually read some entries into the PEL, <code>XCLAIM</code>/<code>XAUTOCLAIM</code> that actually claimed some entries)</li>\n<li><strong>pel-count</strong>: the number of entries in the PEL: pending messages for the consumer, which are messages that were delivered but are yet to be acknowledged</li>\n<li><strong>pending</strong>: an array with pending entries information, has the same structure as described above, except the consumer name is omitted (redundant, since anyway we are in a specific consumer context)</li>\n</ul>\n<p>Note that before Redis OSS 7.2.0, <strong>seen-time</strong> used to denote the last successful interaction.\nIn 7.2.0, <strong>active-time</strong> was added and <strong>seen-time</strong> was changed to denote the last attempted interaction.</p>\n<p>The <code>COUNT</code> option can be used to limit the number of stream and PEL entries that are returned (The first <code>&lt;count&gt;</code> entries are returned).\nThe default <code>COUNT</code> is 10 and a <code>COUNT</code> of 0 means that all entries will be returned (execution time may be long if the stream has a lot of entries).</p>\n<h2>Examples</h2>\n<p>Default reply:</p>\n<pre><code>&gt; XINFO STREAM mystream\n 1) &quot;length&quot;\n 2) (integer) 2\n 3) &quot;radix-tree-keys&quot;\n 4) (integer) 1\n 5) &quot;radix-tree-nodes&quot;\n 6) (integer) 2\n 7) &quot;last-generated-id&quot;\n 8) &quot;1638125141232-0&quot;\n 9) &quot;max-deleted-entry-id&quot;\n10) &quot;0-0&quot;\n11) &quot;entries-added&quot;\n12) (integer) 2\n13) &quot;groups&quot;\n14) (integer) 1\n15) &quot;first-entry&quot;\n16) 1) &quot;1638125133432-0&quot;\n    2) 1) &quot;message&quot;\n       2) &quot;apple&quot;\n17) &quot;last-entry&quot;\n18) 1) &quot;1638125141232-0&quot;\n    2) 1) &quot;message&quot;\n       2) &quot;banana&quot;\n</code></pre>\n<p>Full reply:</p>\n<pre><code>&gt; XADD mystream * foo bar\n&quot;1638125133432-0&quot;\n&gt; XADD mystream * foo bar2\n&quot;1638125141232-0&quot;\n&gt; XGROUP CREATE mystream mygroup 0-0\nOK\n&gt; XREADGROUP GROUP mygroup Alice COUNT 1 STREAMS mystream &gt;\n1) 1) &quot;mystream&quot;\n   2) 1) 1) &quot;1638125133432-0&quot;\n         2) 1) &quot;foo&quot;\n            2) &quot;bar&quot;\n&gt; XINFO STREAM mystream FULL\n 1) &quot;length&quot;\n 2) (integer) 2\n 3) &quot;radix-tree-keys&quot;\n 4) (integer) 1\n 5) &quot;radix-tree-nodes&quot;\n 6) (integer) 2\n 7) &quot;last-generated-id&quot;\n 8) &quot;1638125141232-0&quot;\n 9) &quot;max-deleted-entry-id&quot;\n10) &quot;0-0&quot;\n11) &quot;entries-added&quot;\n12) (integer) 2\n13) &quot;entries&quot;\n14) 1) 1) &quot;1638125133432-0&quot;\n       2) 1) &quot;foo&quot;\n          2) &quot;bar&quot;\n    2) 1) &quot;1638125141232-0&quot;\n       2) 1) &quot;foo&quot;\n          2) &quot;bar2&quot;\n15) &quot;groups&quot;\n16) 1)  1) &quot;name&quot;\n        2) &quot;mygroup&quot;\n        3) &quot;last-delivered-id&quot;\n        4) &quot;1638125133432-0&quot;\n        5) &quot;entries-read&quot;\n        6) (integer) 1\n        7) &quot;lag&quot;\n        8) (integer) 1\n        9) &quot;pel-count&quot;\n       10) (integer) 1\n       11) &quot;pending&quot;\n       12) 1) 1) &quot;1638125133432-0&quot;\n              2) &quot;Alice&quot;\n              3) (integer) 1638125153423\n              4) (integer) 1\n       13) &quot;consumers&quot;\n       14) 1) 1) &quot;name&quot;\n              2) &quot;Alice&quot;\n              3) &quot;seen-time&quot;\n              4) (integer) 1638125133422\n              5) &quot;active-time&quot;\n              6) (integer) 1638125133432\n              7) &quot;pel-count&quot;\n              8) (integer) 1\n              9) &quot;pending&quot;\n              10) 1) 1) &quot;1638125133432-0&quot;\n                     2) (integer) 1638125133432\n                     3) (integer) 1\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xlen",
    "command": "XLEN",
    "description": "Return the number of messages in a stream.",
    "htmlContent": "<p>Returns the number of entries inside a stream. If the specified key does not\nexist the command returns zero, as if the stream was empty.\nHowever note that unlike other Valkey types, zero-length streams are\npossible, so you should call <code>TYPE</code> or <code>EXISTS</code> in order to check if\na key exists or not.</p>\n<p>Streams are not auto-deleted once they have no entries inside (for instance\nafter an <code>XDEL</code> call), because the stream may have consumer groups\nassociated with it.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; XADD mystream * item 1\n&quot;1714701492011-0&quot;\n127.0.0.1:6379&gt; XADD mystream * item 2\n&quot;1714701492021-0&quot;\n127.0.0.1:6379&gt; XADD mystream * item 3\n&quot;1714701492031-0&quot;\n127.0.0.1:6379&gt; XLEN mystream\n(integer) 3\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xpending",
    "command": "XPENDING",
    "description": "Returns the information and entries from a stream consumer group's pending entries list.",
    "htmlContent": "<p>Fetching data from a stream via a consumer group, and not acknowledging\nsuch data, has the effect of creating <em>pending entries</em>. This is\nwell explained in the <code>XREADGROUP</code> command, and even better in our\n<a href=\"../topics/streams-intro\">introduction to Streams</a>. The <code>XACK</code> command\nwill immediately remove the pending entry from the Pending Entries List (PEL)\nsince once a message is successfully processed, there is no longer need\nfor the consumer group to track it and to remember the current owner\nof the message.</p>\n<p>The <code>XPENDING</code> command is the interface to inspect the list of pending\nmessages, and is as thus a very important command in order to observe\nand understand what is happening with a streams consumer groups: what\nclients are active, what messages are pending to be consumed, or to see\nif there are idle messages. Moreover this command, together with <code>XCLAIM</code>\nis used in order to implement recovering of consumers that are failing\nfor a long time, and as a result certain messages are not processed: a\ndifferent consumer can claim the message and continue. This is better\nexplained in the <a href=\"../topics/streams-intro\">streams intro</a> and in the\n<code>XCLAIM</code> command page, and is not covered here.</p>\n<h2>Summary form of XPENDING</h2>\n<p>When <code>XPENDING</code> is called with just a key name and a consumer group\nname, it just outputs a summary about the pending messages in a given\nconsumer group. In the following example, we create a consumer group and\nimmediately create a pending message by reading from the group with\n<code>XREADGROUP</code>.</p>\n<pre><code>&gt; XGROUP CREATE mystream group55 0-0\nOK\n\n&gt; XREADGROUP GROUP group55 consumer-123 COUNT 1 STREAMS mystream &gt;\n1) 1) &quot;mystream&quot;\n   2) 1) 1) 1526984818136-0\n         2) 1) &quot;duration&quot;\n            2) &quot;1532&quot;\n            3) &quot;event-id&quot;\n            4) &quot;5&quot;\n            5) &quot;user-id&quot;\n            6) &quot;7782813&quot;\n</code></pre>\n<p>We expect the pending entries list for the consumer group <code>group55</code> to\nhave a message right now: consumer named <code>consumer-123</code> fetched the\nmessage without acknowledging its processing. The simple <code>XPENDING</code>\nform will give us this information:</p>\n<pre><code>&gt; XPENDING mystream group55\n1) (integer) 1\n2) 1526984818136-0\n3) 1526984818136-0\n4) 1) 1) &quot;consumer-123&quot;\n      2) &quot;1&quot;\n</code></pre>\n<p>In this form, the command outputs the total number of pending messages for this\nconsumer group, which is one, followed by the smallest and greatest ID among the\npending messages, and then list every consumer in the consumer group with\nat least one pending message, and the number of pending messages it has.</p>\n<h2>Extended form of XPENDING</h2>\n<p>The summary provides a good overview, but sometimes we are interested in the\ndetails. In order to see all the pending messages with more associated\ninformation we need to also pass a range of IDs, in a similar way we do it with\n<code>XRANGE</code>, and a non optional <em>count</em> argument, to limit the number\nof messages returned per call:</p>\n<pre><code>&gt; XPENDING mystream group55 - + 10\n1) 1) 1526984818136-0\n   2) &quot;consumer-123&quot;\n   3) (integer) 196415\n   4) (integer) 1\n</code></pre>\n<p>In the extended form we no longer see the summary information, instead there\nis detailed information for each message in the pending entries list. For\neach message four attributes are returned:</p>\n<ol>\n<li>The ID of the message.</li>\n<li>The name of the consumer that fetched the message and has still to acknowledge it. We call it the current <em>owner</em> of the message.</li>\n<li>The number of milliseconds that elapsed since the last time this message was delivered to this consumer.</li>\n<li>The number of times this message was delivered.</li>\n</ol>\n<p>The deliveries counter, that is the fourth element in the array, is incremented\nwhen some other consumer <em>claims</em> the message with <code>XCLAIM</code>, or when the\nmessage is delivered again via <code>XREADGROUP</code>, when accessing the history\nof a consumer in a consumer group (see the <code>XREADGROUP</code> page for more info).</p>\n<p>It is possible to pass an additional argument to the command, in order\nto see the messages having a specific owner:</p>\n<pre><code>&gt; XPENDING mystream group55 - + 10 consumer-123\n</code></pre>\n<p>But in the above case the output would be the same, since we have pending\nmessages only for a single consumer. However what is important to keep in\nmind is that this operation, filtering by a specific consumer, is not\ninefficient even when there are many pending messages from many consumers:\nwe have a pending entries list data structure both globally, and for\nevery consumer, so we can very efficiently show just messages pending for\na single consumer.</p>\n<h2>Idle time filter</h2>\n<p>It is also possible to filter pending stream entries by their idle-time,\ngiven in milliseconds (useful for <code>XCLAIM</code>ing entries that have not been\nprocessed for some time):</p>\n<pre><code>&gt; XPENDING mystream group55 IDLE 9000 - + 10\n&gt; XPENDING mystream group55 IDLE 9000 - + 10 consumer-123\n</code></pre>\n<p>The first case will return the first 10 (or less) PEL entries of the entire group\nthat are idle for over 9 seconds, whereas in the second case only those of\n<code>consumer-123</code>.</p>\n<h2>Exclusive ranges and iterating the PEL</h2>\n<p>The <code>XPENDING</code> command allows iterating over the pending entries just like\n<code>XRANGE</code> and <code>XREVRANGE</code> allow for the stream&#39;s entries. You can do this by\nprefixing the ID of the last-read pending entry with the <code>(</code> character that\ndenotes an open (exclusive) range, and proving it to the subsequent call to the\ncommand.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xrange",
    "command": "XRANGE",
    "description": "Returns the messages from a stream within a range of IDs.",
    "htmlContent": "<p>The command returns the stream entries matching a given range of IDs.\nThe range is specified by a minimum and maximum ID. All the entries having\nan ID between the two specified or exactly one of the two IDs specified\n(closed interval) are returned.</p>\n<p>The <code>XRANGE</code> command has a number of applications:</p>\n<ul>\n<li>Returning items in a specific time range. This is possible because\nStream IDs are <a href=\"../topics/streams-intro\">related to time</a>.</li>\n<li>Iterating a stream incrementally, returning just\na few items at every iteration. However it is semantically much more\nrobust than the <code>SCAN</code> family of functions.</li>\n<li>Fetching a single entry from a stream, providing the ID of the entry\nto fetch two times: as start and end of the query interval.</li>\n</ul>\n<p>The command also has a reciprocal command returning items in the\nreverse order, called <code>XREVRANGE</code>, which is otherwise identical.</p>\n<h2><code>-</code> and <code>+</code> special IDs</h2>\n<p>The <code>-</code> and <code>+</code> special IDs mean respectively the minimum ID possible\nand the maximum ID possible inside a stream, so the following command\nwill just return every entry in the stream:</p>\n<pre><code>&gt; XRANGE somestream - +\n1) 1) 1526985054069-0\n   2) 1) &quot;duration&quot;\n      2) &quot;72&quot;\n      3) &quot;event-id&quot;\n      4) &quot;9&quot;\n      5) &quot;user-id&quot;\n      6) &quot;839248&quot;\n2) 1) 1526985069902-0\n   2) 1) &quot;duration&quot;\n      2) &quot;415&quot;\n      3) &quot;event-id&quot;\n      4) &quot;2&quot;\n      5) &quot;user-id&quot;\n      6) &quot;772213&quot;\n... other entries here ...\n</code></pre>\n<p>The <code>-</code> and <code>+</code> special IDs mean, respectively, the minimal and maximal range IDs,\nhowever they are nicer to type.</p>\n<h2>Incomplete IDs</h2>\n<p>Stream IDs are composed of two parts, a Unix millisecond time stamp and a\nsequence number for entries inserted in the same millisecond. It is possible\nto use <code>XRANGE</code> specifying just the first part of the ID, the millisecond time,\nlike in the following example:</p>\n<pre><code>&gt; XRANGE somestream 1526985054069 1526985055069\n</code></pre>\n<p>In this case, <code>XRANGE</code> will auto-complete the start interval with <code>-0</code>\nand end interval with <code>-18446744073709551615</code>, in order to return all the\nentries that were generated between a given millisecond and the end of\nthe other specified millisecond. This also means that repeating the same\nmillisecond two times, we get all the entries within such millisecond,\nbecause the sequence number range will be from zero to the maximum.</p>\n<p>Used in this way <code>XRANGE</code> works as a range query command to obtain entries\nin a specified time. This is very handy in order to access the history\nof past events in a stream.</p>\n<h2>Exclusive ranges</h2>\n<p>The range is close (inclusive) by default, meaning that the reply can include\nentries with IDs matching the query&#39;s start and end intervals. It is possible\nto specify an open interval (exclusive) by prefixing the ID with the\ncharacter <code>(</code>. This is useful for iterating the stream, as explained below.</p>\n<h2>Returning a maximum number of entries</h2>\n<p>Using the <strong>COUNT</strong> option it is possible to reduce the number of entries\nreported. This is a very important feature even if it may look marginal,\nbecause it allows, for instance, to model operations such as <em>give me\nthe entry greater or equal to the following</em>:</p>\n<pre><code>&gt; XRANGE somestream 1526985054069-0 + COUNT 1\n1) 1) 1526985054069-0\n   2) 1) &quot;duration&quot;\n      2) &quot;72&quot;\n      3) &quot;event-id&quot;\n      4) &quot;9&quot;\n      5) &quot;user-id&quot;\n      6) &quot;839248&quot;\n</code></pre>\n<p>In the above case the entry <code>1526985054069-0</code> exists, otherwise the server\nwould have sent us the next one. Using <code>COUNT</code> is also the base in order to\nuse <code>XRANGE</code> as an iterator.</p>\n<h2>Iterating a stream</h2>\n<p>In order to iterate a stream, we can proceed as follows. Let&#39;s assume that\nwe want two elements per iteration. We start fetching the first two\nelements, which is trivial:</p>\n<pre><code>&gt; XRANGE writers - + COUNT 2\n1) 1) 1526985676425-0\n   2) 1) &quot;name&quot;\n      2) &quot;Virginia&quot;\n      3) &quot;surname&quot;\n      4) &quot;Woolf&quot;\n2) 1) 1526985685298-0\n   2) 1) &quot;name&quot;\n      2) &quot;Jane&quot;\n      3) &quot;surname&quot;\n      4) &quot;Austen&quot;\n</code></pre>\n<p>Then instead of starting the iteration again from <code>-</code>, as the start\nof the range we use the entry ID of the <em>last</em> entry returned by the\nprevious <code>XRANGE</code> call as an exclusive interval.</p>\n<p>The ID of the last entry is <code>1526985685298-0</code>, so we just prefix it\nwith a &#39;(&#39;, and continue our iteration:</p>\n<pre><code>&gt; XRANGE writers (1526985685298-0 + COUNT 2\n1) 1) 1526985691746-0\n   2) 1) &quot;name&quot;\n      2) &quot;Toni&quot;\n      3) &quot;surname&quot;\n      4) &quot;Morrison&quot;\n2) 1) 1526985712947-0\n   2) 1) &quot;name&quot;\n      2) &quot;Agatha&quot;\n      3) &quot;surname&quot;\n      4) &quot;Christie&quot;\n</code></pre>\n<p>And so forth. Eventually this will allow to visit all the entries in the\nstream. Obviously, we can start the iteration from any ID, or even from\na specific time, by providing a given incomplete start ID. Moreover, we\ncan limit the iteration to a given ID or time, by providing an end\nID or incomplete ID instead of <code>+</code>.</p>\n<p>The command <code>XREAD</code> is also able to iterate the stream.\nThe command <code>XREVRANGE</code> can iterate the stream reverse, from higher IDs\n(or times) to lower IDs (or times).</p>\n<h2>Fetching single items</h2>\n<p>If you look for an <code>XGET</code> command you&#39;ll be disappointed because <code>XRANGE</code>\nis effectively the way to go in order to fetch a single entry from a\nstream. All you have to do is to specify the ID two times in the arguments\nof XRANGE:</p>\n<pre><code>&gt; XRANGE mystream 1526984818136-0 1526984818136-0\n1) 1) 1526984818136-0\n   2) 1) &quot;duration&quot;\n      2) &quot;1532&quot;\n      3) &quot;event-id&quot;\n      4) &quot;5&quot;\n      5) &quot;user-id&quot;\n      6) &quot;7782813&quot;\n</code></pre>\n<h2>Additional information about streams</h2>\n<p>For further information about streams please check our\n<a href=\"../topics/streams-intro\">introduction to Streams document</a>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; XADD writers * name Virginia surname Woolf\n&quot;1714701492065-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Jane surname Austen\n&quot;1714701492075-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Toni surname Morrison\n&quot;1714701492084-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Agatha surname Christie\n&quot;1714701492094-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Ngozi surname Adichie\n&quot;1714701492104-0&quot;\n127.0.0.1:6379&gt; XLEN writers\n(integer) 5\n127.0.0.1:6379&gt; XRANGE writers - + COUNT 2\n1) 1) &quot;1714701492065-0&quot;\n   2) 1) &quot;name&quot;\n      2) &quot;Virginia&quot;\n      3) &quot;surname&quot;\n      4) &quot;Woolf&quot;\n2) 1) &quot;1714701492075-0&quot;\n   2) 1) &quot;name&quot;\n      2) &quot;Jane&quot;\n      3) &quot;surname&quot;\n      4) &quot;Austen&quot;\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xread",
    "command": "XREAD",
    "description": "Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.",
    "htmlContent": "<p>Read data from one or multiple streams, only returning entries with an\nID greater than the last received ID reported by the caller.\nThis command has an option to block if items are not available, in a similar\nfashion to <code>BRPOP</code> or <code>BZPOPMIN</code> and others.</p>\n<p>Please note that before reading this page, if you are new to streams,\nwe recommend to read <a href=\"../topics/streams-intro\">our introduction to Streams</a>.</p>\n<h2>Non-blocking usage</h2>\n<p>If the <strong>BLOCK</strong> option is not used, the command is synchronous, and can\nbe considered somewhat related to <code>XRANGE</code>: it will return a range of items\ninside streams, however it has two fundamental differences compared to <code>XRANGE</code>\neven if we just consider the synchronous usage:</p>\n<ul>\n<li>This command can be called with multiple streams if we want to read at\nthe same time from a number of keys. This is a key feature of <code>XREAD</code> because\nespecially when blocking with <strong>BLOCK</strong>, to be able to listen with a single\nconnection to multiple keys is a vital feature.</li>\n<li>While <code>XRANGE</code> returns items in a range of IDs, <code>XREAD</code> is more suited in\norder to consume the stream starting from the first entry which is greater\nthan any other entry we saw so far. So what we pass to <code>XREAD</code> is, for each\nstream, the ID of the last element that we received from that stream.</li>\n</ul>\n<p>For example, if I have two streams <code>mystream</code> and <code>writers</code>, and I want to\nread data from both the streams starting from the first element they contain,\nI could call <code>XREAD</code> like in the following example.</p>\n<p>Note: we use the <strong>COUNT</strong> option in the example, so that for each stream\nthe call will return at maximum two elements per stream.</p>\n<pre><code>&gt; XREAD COUNT 2 STREAMS mystream writers 0-0 0-0\n1) 1) &quot;mystream&quot;\n   2) 1) 1) 1526984818136-0\n         2) 1) &quot;duration&quot;\n            2) &quot;1532&quot;\n            3) &quot;event-id&quot;\n            4) &quot;5&quot;\n            5) &quot;user-id&quot;\n            6) &quot;7782813&quot;\n      2) 1) 1526999352406-0\n         2) 1) &quot;duration&quot;\n            2) &quot;812&quot;\n            3) &quot;event-id&quot;\n            4) &quot;9&quot;\n            5) &quot;user-id&quot;\n            6) &quot;388234&quot;\n2) 1) &quot;writers&quot;\n   2) 1) 1) 1526985676425-0\n         2) 1) &quot;name&quot;\n            2) &quot;Virginia&quot;\n            3) &quot;surname&quot;\n            4) &quot;Woolf&quot;\n      2) 1) 1526985685298-0\n         2) 1) &quot;name&quot;\n            2) &quot;Jane&quot;\n            3) &quot;surname&quot;\n            4) &quot;Austen&quot;\n</code></pre>\n<p>The <strong>STREAMS</strong> option is mandatory and MUST be the final option because\nsuch option gets a variable length of argument in the following format:</p>\n<pre><code>STREAMS key_1 key_2 key_3 ... key_N ID_1 ID_2 ID_3 ... ID_N\n</code></pre>\n<p>So we start with a list of keys, and later continue with all the associated\nIDs, representing <em>the last ID we received for that stream</em>, so that the\ncall will serve us only greater IDs from the same stream.</p>\n<p>For instance in the above example, the last items that we received\nfor the stream <code>mystream</code> has ID <code>1526999352406-0</code>, while for the\nstream <code>writers</code> has the ID <code>1526985685298-0</code>.</p>\n<p>To continue iterating the two streams I&#39;ll call:</p>\n<pre><code>&gt; XREAD COUNT 2 STREAMS mystream writers 1526999352406-0 1526985685298-0\n1) 1) &quot;mystream&quot;\n   2) 1) 1) 1526999626221-0\n         2) 1) &quot;duration&quot;\n            2) &quot;911&quot;\n            3) &quot;event-id&quot;\n            4) &quot;7&quot;\n            5) &quot;user-id&quot;\n            6) &quot;9488232&quot;\n2) 1) &quot;writers&quot;\n   2) 1) 1) 1526985691746-0\n         2) 1) &quot;name&quot;\n            2) &quot;Toni&quot;\n            3) &quot;surname&quot;\n            4) &quot;Morrison&quot;\n      2) 1) 1526985712947-0\n         2) 1) &quot;name&quot;\n            2) &quot;Agatha&quot;\n            3) &quot;surname&quot;\n            4) &quot;Christie&quot;\n</code></pre>\n<p>And so forth. Eventually, the call will not return any item, but just an\nempty array, then we know that there is nothing more to fetch from our\nstream (and we would have to retry the operation, hence this command\nalso supports a blocking mode).</p>\n<h2>Incomplete IDs</h2>\n<p>To use incomplete IDs is valid, like it is valid for <code>XRANGE</code>. However\nhere the sequence part of the ID, if missing, is always interpreted as\nzero, so the command:</p>\n<pre><code>&gt; XREAD COUNT 2 STREAMS mystream writers 0 0\n</code></pre>\n<p>is exactly equivalent to</p>\n<pre><code>&gt; XREAD COUNT 2 STREAMS mystream writers 0-0 0-0\n</code></pre>\n<h2>Blocking for data</h2>\n<p>In its synchronous form, the command can get new data as long as there\nare more items available. However, at some point, we&#39;ll have to wait for\nproducers of data to use <code>XADD</code> to push new entries inside the streams\nwe are consuming. In order to avoid polling at a fixed or adaptive interval\nthe command is able to block if it could not return any data, according\nto the specified streams and IDs, and automatically unblock once one of\nthe requested keys accept data.</p>\n<p>It is important to understand that this command <em>fans out</em> to all the\nclients that are waiting for the same range of IDs, so every consumer will\nget a copy of the data, unlike to what happens when blocking list pop\noperations are used.</p>\n<p>In order to block, the <strong>BLOCK</strong> option is used, together with the number\nof milliseconds we want to block before timing out. Normally Valkey blocking\ncommands take timeouts in seconds, however this command takes a millisecond\ntimeout, even if normally the server will have a timeout resolution near\nto 0.1 seconds. This time it is possible to block for a shorter time in\ncertain use cases, and if the server internals will improve over time, it is\npossible that the resolution of timeouts will improve.</p>\n<p>When the <strong>BLOCK</strong> command is passed, but there is data to return at\nleast in one of the streams passed, the command is executed synchronously\n<em>exactly like if the BLOCK option would be missing</em>.</p>\n<p>This is an example of blocking invocation, where the command later returns\na null reply because the timeout has elapsed without new data arriving:</p>\n<pre><code>&gt; XREAD BLOCK 1000 STREAMS mystream 1526999626221-0\n(nil)\n</code></pre>\n<h2>The special <code>$</code> ID.</h2>\n<p>When blocking sometimes we want to receive just entries that are added\nto the stream via <code>XADD</code> starting from the moment we block. In such a case\nwe are not interested in the history of already added entries. For\nthis use case, we would have to check the stream top element ID, and use\nsuch ID in the <code>XREAD</code> command line. This is not clean and requires to\ncall other commands, so instead it is possible to use the special <code>$</code>\nID to signal the stream that we want only the new things.</p>\n<p>It is <strong>very important</strong> to understand that you should use the <code>$</code>\nID only for the first call to <code>XREAD</code>. Later the ID should be the one\nof the last reported item in the stream, otherwise you could miss all\nthe entries that are added in between.</p>\n<p>This is how a typical <code>XREAD</code> call looks like in the first iteration\nof a consumer willing to consume only new entries:</p>\n<pre><code>&gt; XREAD BLOCK 5000 COUNT 100 STREAMS mystream $\n</code></pre>\n<p>Once we get some replies, the next call will be something like:</p>\n<pre><code>&gt; XREAD BLOCK 5000 COUNT 100 STREAMS mystream 1526999644174-3\n</code></pre>\n<p>And so forth.</p>\n<h2>How multiple clients blocked on a single stream are served</h2>\n<p>Blocking list operations on lists or sorted sets have a <em>pop</em> behavior.\nBasically, the element is removed from the list or sorted set in order\nto be returned to the client. In this scenario you want the items\nto be consumed in a fair way, depending on the moment clients blocked\non a given key arrived. Normally Valkey uses the FIFO semantics in this\nuse cases.</p>\n<p>However note that with streams this is not a problem: stream entries\nare not removed from the stream when clients are served, so every\nclient waiting will be served as soon as an <code>XADD</code> command provides\ndata to the stream.</p>\n<p>Reading the <a href=\"../topics/streams-intro\">Streams introduction</a> is highly\nsuggested in order to understand more about the streams overall behavior\nand semantics.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xreadgroup",
    "command": "XREADGROUP",
    "description": "Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.",
    "htmlContent": "<p>The <code>XREADGROUP</code> command is a special version of the <code>XREAD</code> command\nwith support for consumer groups. Probably you will have to understand the\n<code>XREAD</code> command before reading this page will makes sense.</p>\n<p>Moreover, if you are new to streams, we recommend to read our\n<a href=\"../topics/streams-intro\">introduction to Streams</a>.\nMake sure to understand the concept of consumer group in the introduction\nso that following how this command works will be simpler.</p>\n<h2>Consumer groups in 30 seconds</h2>\n<p>The difference between this command and the vanilla <code>XREAD</code> is that this\none supports consumer groups.</p>\n<p>Without consumer groups, just using <code>XREAD</code>, all the clients are served with all the entries arriving in a stream. Instead using consumer groups with <code>XREADGROUP</code>, it is possible to create groups of clients that consume different parts of the messages arriving in a given stream. If, for instance, the stream gets the new entries A, B, and C and there are two consumers reading via a consumer group, one client will get, for instance, the messages A and C, and the other the message B, and so forth.</p>\n<p>Within a consumer group, a given consumer (that is, just a client consuming messages from the stream), has to identify with a unique <em>consumer name</em>. Which is just a string.</p>\n<p>One of the guarantees of consumer groups is that a given consumer can only see the history of messages that were delivered to it, so a message has just a single owner. However there is a special feature called <em>message claiming</em> that allows other consumers to claim messages in case there is a non recoverable failure of some consumer. In order to implement such semantics, consumer groups require explicit acknowledgment of the messages successfully processed by the consumer, via the <code>XACK</code> command. This is needed because the stream will track, for each consumer group, who is processing what message.</p>\n<p>This is how to understand if you want to use a consumer group or not:</p>\n<ol>\n<li>If you have a stream and multiple clients, and you want all the clients to get all the messages, you do not need a consumer group.</li>\n<li>If you have a stream and multiple clients, and you want the stream to be <em>partitioned</em> or <em>sharded</em> across your clients, so that each client will get a sub set of the messages arriving in a stream, you need a consumer group.</li>\n</ol>\n<h2>Differences between XREAD and XREADGROUP</h2>\n<p>From the point of view of the syntax, the commands are almost the same,\nhowever <code>XREADGROUP</code> <em>requires</em> a special and mandatory option:</p>\n<pre><code>GROUP &lt;group-name&gt; &lt;consumer-name&gt;\n</code></pre>\n<p>The group name is just the name of a consumer group associated to the stream.\nThe group is created using the <code>XGROUP</code> command. The consumer name is the\nstring that is used by the client to identify itself inside the group.\nThe consumer is auto created inside the consumer group the first time it\nis saw. Different clients should select a different consumer name.</p>\n<p>When you read with <code>XREADGROUP</code>, the server will <em>remember</em> that a given\nmessage was delivered to you: the message will be stored inside the\nconsumer group in what is called a Pending Entries List (PEL), that is\na list of message IDs delivered but not yet acknowledged.</p>\n<p>The client will have to acknowledge the message processing using <code>XACK</code>\nin order for the pending entry to be removed from the PEL. The PEL\ncan be inspected using the <code>XPENDING</code> command.</p>\n<p>The <code>NOACK</code> subcommand can be used to avoid adding the message to the PEL in\ncases where reliability is not a requirement and the occasional message loss\nis acceptable. This is equivalent to acknowledging the message when it is read.</p>\n<p>The ID to specify in the <strong>STREAMS</strong> option when using <code>XREADGROUP</code> can\nbe one of the following two:</p>\n<ul>\n<li>The special <code>&gt;</code> ID, which means that the consumer want to receive only messages that were <em>never delivered to any other consumer</em>. It just means, give me new messages.</li>\n<li>Any other ID, that is, 0 or any other valid ID or incomplete ID (just the millisecond time part), will have the effect of returning entries that are pending for the consumer sending the command with IDs greater than the one provided. So basically if the ID is not <code>&gt;</code>, then the command will just let the client access its pending entries: messages delivered to it, but not yet acknowledged. Note that in this case, both <code>BLOCK</code> and <code>NOACK</code> are ignored.</li>\n</ul>\n<p>Like <code>XREAD</code> the <code>XREADGROUP</code> command can be used in a blocking way. There\nare no differences in this regard.</p>\n<h2>What happens when a message is delivered to a consumer?</h2>\n<p>Two things:</p>\n<ol>\n<li>If the message was never delivered to anyone, that is, if we are talking about a new message, then a PEL (Pending Entries List) is created.</li>\n<li>If instead the message was already delivered to this consumer, and it is just re-fetching the same message again, then the <em>last delivery counter</em> is updated to the current time, and the <em>number of deliveries</em> is incremented by one. You can access those message properties using the <code>XPENDING</code> command.</li>\n</ol>\n<h2>Usage example</h2>\n<p>Normally you use the command like that in order to get new messages and\nprocess them. In pseudo-code:</p>\n<pre><code>WHILE true\n    entries = XREADGROUP GROUP $GroupName $ConsumerName BLOCK 2000 COUNT 10 STREAMS mystream &gt;\n    if entries == nil\n        puts &quot;Timeout... try again&quot;\n        CONTINUE\n    end\n\n    FOREACH entries AS stream_entries\n        FOREACH stream_entries as message\n            process_message(message.id,message.fields)\n\n            # ACK the message as processed\n            XACK mystream $GroupName message.id\n        END\n    END\nEND\n</code></pre>\n<p>In this way the example consumer code will fetch only new messages, process\nthem, and acknowledge them via <code>XACK</code>. However the example code above is\nnot complete, because it does not handle recovering after a crash. What\nwill happen if we crash in the middle of processing messages, is that our\nmessages will remain in the pending entries list, so we can access our\nhistory by giving <code>XREADGROUP</code> initially an ID of 0, and performing the same\nloop. Once providing an ID of 0 the reply is an empty set of messages, we\nknow that we processed and acknowledged all the pending messages: we\ncan start to use <code>&gt;</code> as ID, in order to get the new messages and rejoin the\nconsumers that are processing new things.</p>\n<p>To see how the command actually replies, please check the <code>XREAD</code> command page.</p>\n<h2>What happens when a pending message is deleted?</h2>\n<p>Entries may be deleted from the stream due to trimming or explicit calls to <code>XDEL</code> at any time.\nBy design, Valkey doesn&#39;t prevent the deletion of entries that are present in the stream&#39;s PELs.\nWhen this happens, the PELs retain the deleted entries&#39; IDs, but the actual entry payload is no longer available.\nTherefore, when reading such PEL entries, Valkey will return a null value in place of their respective data.</p>\n<p>Example:</p>\n<pre><code>&gt; XADD mystream 1 myfield mydata\n&quot;1-0&quot;\n&gt; XGROUP CREATE mystream mygroup 0\nOK\n&gt; XREADGROUP GROUP mygroup myconsumer STREAMS mystream &gt;\n1) 1) &quot;mystream&quot;\n   2) 1) 1) &quot;1-0&quot;\n         2) 1) &quot;myfield&quot;\n            2) &quot;mydata&quot;\n&gt; XDEL mystream 1-0\n(integer) 1\n&gt; XREADGROUP GROUP mygroup myconsumer STREAMS mystream 0\n1) 1) &quot;mystream&quot;\n   2) 1) 1) &quot;1-0&quot;\n         2) (nil)\n</code></pre>\n<p>Reading the <a href=\"../topics/streams-intro\">Streams introduction</a> is highly\nsuggested in order to understand more about the streams overall behavior\nand semantics.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xrevrange",
    "command": "XREVRANGE",
    "description": "Returns the messages from a stream within a range of IDs in reverse order.",
    "htmlContent": "<p>This command is exactly like <code>XRANGE</code>, but with the notable difference of\nreturning the entries in reverse order, and also taking the start-end\nrange in reverse order: in <code>XREVRANGE</code> you need to state the <em>end</em> ID\nand later the <em>start</em> ID, and the command will produce all the element\nbetween (or exactly like) the two IDs, starting from the <em>end</em> side.</p>\n<p>So for instance, to get all the elements from the higher ID to the lower\nID one could use:</p>\n<pre><code>XREVRANGE somestream + -\n</code></pre>\n<p>Similarly to get just the last element added into the stream it is\nenough to send:</p>\n<pre><code>XREVRANGE somestream + - COUNT 1\n</code></pre>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; XADD writers * name Virginia surname Woolf\n&quot;1714701492147-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Jane surname Austen\n&quot;1714701492157-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Toni surname Morrison\n&quot;1714701492167-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Agatha surname Christie\n&quot;1714701492177-0&quot;\n127.0.0.1:6379&gt; XADD writers * name Ngozi surname Adichie\n&quot;1714701492187-0&quot;\n127.0.0.1:6379&gt; XLEN writers\n(integer) 5\n127.0.0.1:6379&gt; XREVRANGE writers + - COUNT 1\n1) 1) &quot;1714701492187-0&quot;\n   2) 1) &quot;name&quot;\n      2) &quot;Ngozi&quot;\n      3) &quot;surname&quot;\n      4) &quot;Adichie&quot;\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xsetid",
    "command": "XSETID",
    "description": "An internal command for replicating stream values.",
    "htmlContent": "<p>The <code>XSETID</code> command is an internal command.\nIt is used by a Valkey primary to replicate the last delivered ID of streams.</p>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-xtrim",
    "command": "XTRIM",
    "description": "Deletes messages from the beginning of a stream.",
    "htmlContent": "<p><code>XTRIM</code> trims the stream by evicting older entries (entries with lower IDs) if needed.</p>\n<p>Trimming the stream can be done using one of these strategies:</p>\n<ul>\n<li><code>MAXLEN</code>: Evicts entries as long as the stream&#39;s length exceeds the specified <code>threshold</code>, where <code>threshold</code> is a positive integer.</li>\n<li><code>MINID</code>: Evicts entries with IDs lower than <code>threshold</code>, where <code>threshold</code> is a stream ID.</li>\n</ul>\n<p>For example, this will trim the stream to exactly the latest 1000 items:</p>\n<pre><code>XTRIM mystream MAXLEN 1000\n</code></pre>\n<p>Whereas in this example, all entries that have an ID lower than 649085820-0 will be evicted:</p>\n<pre><code>XTRIM mystream MINID 649085820\n</code></pre>\n<p>By default, or when provided with the optional <code>=</code> argument, the command performs exact trimming.</p>\n<p>Depending on the strategy, exact trimming means:</p>\n<ul>\n<li><code>MAXLEN</code>: the trimmed stream&#39;s length will be exactly the minimum between its original length and the specified <code>threshold</code>.</li>\n<li><code>MINID</code>: the oldest ID in the stream will be exactly the maximum between its original oldest ID and the specified <code>threshold</code>.</li>\n</ul>\n<h2>Nearly exact trimming</h2>\n<p>Because exact trimming may require additional effort from the Valkey server, the optional <code>~</code> argument can be provided to make it more efficient.</p>\n<p>For example:</p>\n<pre><code>XTRIM mystream MAXLEN ~ 1000\n</code></pre>\n<p>The <code>~</code> argument between the <code>MAXLEN</code> strategy and the <code>threshold</code> means that the user is requesting to trim the stream so its length is <strong>at least</strong> the <code>threshold</code>, but possibly slightly more.\nIn this case, Valkey will stop trimming early when performance can be gained (for example, when a whole macro node in the data structure can&#39;t be removed).\nThis makes trimming much more efficient, and it is usually what you want, although after trimming, the stream may have few tens of additional entries over the <code>threshold</code>.</p>\n<p>Another way to control the amount of work done by the command when using the <code>~</code>, is the <code>LIMIT</code> clause. \nWhen used, it specifies the maximal <code>count</code> of entries that will be evicted.\nWhen <code>LIMIT</code> and <code>count</code> aren&#39;t specified, the default value of 100 * the number of entries in a macro node will be implicitly used as the <code>count</code>.\nSpecifying the value 0 as <code>count</code> disables the limiting mechanism entirely.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; XADD mystream * field1 A field2 B field3 C field4 D\n&quot;1714701492231-0&quot;\n127.0.0.1:6379&gt; XTRIM mystream MAXLEN 2\n(integer) 0\n127.0.0.1:6379&gt; XRANGE mystream - +\n1) 1) &quot;1714701492231-0&quot;\n   2) 1) &quot;field1&quot;\n      2) &quot;A&quot;\n      3) &quot;field2&quot;\n      4) &quot;B&quot;\n      5) &quot;field3&quot;\n      6) &quot;C&quot;\n      7) &quot;field4&quot;\n      8) &quot;D&quot;\n</code></pre>\n",
    "categories": [
      "stream"
    ]
  },
  {
    "unid": "cmd-zadd",
    "command": "ZADD",
    "description": "Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.",
    "htmlContent": "<p>Adds all the specified members with the specified scores to the sorted set\nstored at <code>key</code>.\nIt is possible to specify multiple score / member pairs.\nIf a specified member is already a member of the sorted set, the score is\nupdated and the element reinserted at the right position to ensure the correct\nordering.</p>\n<p>If <code>key</code> does not exist, a new sorted set with the specified members as sole\nmembers is created, like if the sorted set was empty. If the key exists but does not hold a sorted set, an error is returned.</p>\n<p>The score values should be the string representation of a double precision floating point number. <code>+inf</code> and <code>-inf</code> values are valid values as well.</p>\n<h2>ZADD options</h2>\n<p>ZADD supports a list of options, specified after the name of the key and before\nthe first score argument. Options are:</p>\n<ul>\n<li><strong>XX</strong>: Only update elements that already exist. Don&#39;t add new elements.</li>\n<li><strong>NX</strong>: Only add new elements. Don&#39;t update already existing elements.</li>\n<li><strong>LT</strong>: Only update existing elements if the new score is <strong>less than</strong> the current score. This flag doesn&#39;t prevent adding new elements.</li>\n<li><strong>GT</strong>: Only update existing elements if the new score is <strong>greater than</strong> the current score. This flag doesn&#39;t prevent adding new elements.</li>\n<li><strong>CH</strong>: Modify the return value from the number of new elements added, to the total number of elements changed (CH is an abbreviation of <em>changed</em>). Changed elements are <strong>new elements added</strong> and elements already existing for which <strong>the score was updated</strong>. So elements specified in the command line having the same score as they had in the past are not counted. Note: normally the return value of <code>ZADD</code> only counts the number of new elements added.</li>\n<li><strong>INCR</strong>: When this option is specified <code>ZADD</code> acts like <code>ZINCRBY</code>. Only one score-element pair can be specified in this mode.</li>\n</ul>\n<p>Note: The <strong>GT</strong>, <strong>LT</strong> and <strong>NX</strong> options are mutually exclusive.</p>\n<h2>Range of integer scores that can be expressed precisely</h2>\n<p>Sorted Sets use a <em>double 64-bit floating point number</em> to represent the score. In all the architectures we support, this is represented as an <strong>IEEE 754 floating point number</strong>, that is able to represent precisely integer numbers between <code>-(2^53)</code> and <code>+(2^53)</code> included. In more practical terms, all the integers between -9007199254740992 and 9007199254740992 are perfectly representable. Larger integers, or fractions, are internally represented in exponential form, so it is possible that you get only an approximation of the decimal number, or of the very big integer, that you set as score.</p>\n<h2>Sorted sets 101</h2>\n<p>Sorted sets are sorted by their score in an ascending way.\nThe same element only exists a single time, no repeated elements are\npermitted. The score can be modified both by <code>ZADD</code> that will update the\nelement score, and as a side effect, its position on the sorted set, and\nby <code>ZINCRBY</code> that can be used in order to update the score relatively to its\nprevious value.</p>\n<p>The current score of an element can be retrieved using the <code>ZSCORE</code> command,\nthat can also be used to verify if an element already exists or not.</p>\n<p>For an introduction to sorted sets, see the data types page on <a href=\"../topics/data-types#sorted-sets\">sorted\nsets</a>.</p>\n<h2>Elements with the same score</h2>\n<p>While the same element can&#39;t be repeated in a sorted set since every element\nis unique, it is possible to add multiple different elements <em>having the same score</em>. When multiple elements have the same score, they are <em>ordered lexicographically</em> (they are still ordered by score as a first key, however, locally, all the elements with the same score are relatively ordered lexicographically).</p>\n<p>The lexicographic ordering used is binary, it compares strings as array of bytes.</p>\n<p>If the user inserts all the elements in a sorted set with the same score (for example 0), all the elements of the sorted set are sorted lexicographically, and range queries on elements are possible using the command <code>ZRANGEBYLEX</code> (Note: it is also possible to query sorted sets by range of scores using <code>ZRANGEBYSCORE</code>).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 1 &quot;uno&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot; 3 &quot;three&quot;\n(integer) 2\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n1) &quot;one&quot;\n2) &quot;1&quot;\n3) &quot;uno&quot;\n4) &quot;1&quot;\n5) &quot;two&quot;\n6) &quot;2&quot;\n7) &quot;three&quot;\n8) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zcard",
    "command": "ZCARD",
    "description": "Returns the number of members in a sorted set.",
    "htmlContent": "<p>Returns the sorted set cardinality (number of elements) of the sorted set stored\nat <code>key</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZCARD myzset\n(integer) 2\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zcount",
    "command": "ZCOUNT",
    "description": "Returns the count of members in a sorted set that have scores within a range.",
    "htmlContent": "<p>Returns the number of elements in the sorted set at <code>key</code> with a score between\n<code>min</code> and <code>max</code>.</p>\n<p>The <code>min</code> and <code>max</code> arguments have the same semantic as described for\n<code>ZRANGEBYSCORE</code>.</p>\n<p>Note: the command has a complexity of just O(log(N)) because it uses elements ranks (see <code>ZRANK</code>) to get an idea of the range. Because of this there is no need to do a work proportional to the size of the range.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZCOUNT myzset -inf +inf\n(integer) 3\n127.0.0.1:6379&gt; ZCOUNT myzset (1 3\n(integer) 2\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zdiff",
    "command": "ZDIFF",
    "description": "Returns the difference between multiple sorted sets.",
    "htmlContent": "<p>This command is similar to <code>ZDIFFSTORE</code>, but instead of storing the resulting\nsorted set, it is returned to the client.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZDIFF 2 zset1 zset2\n1) &quot;three&quot;\n127.0.0.1:6379&gt; ZDIFF 2 zset1 zset2 WITHSCORES\n1) &quot;three&quot;\n2) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zdiffstore",
    "command": "ZDIFFSTORE",
    "description": "Stores the difference of multiple sorted sets in a key.",
    "htmlContent": "<p>Computes the difference between the first and all successive input sorted sets\nand stores the result in <code>destination</code>. The total number of input keys is\nspecified by <code>numkeys</code>.</p>\n<p>Keys that do not exist are considered to be empty sets.</p>\n<p>If <code>destination</code> already exists, it is overwritten.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZDIFFSTORE out 2 zset1 zset2\n(integer) 1\n127.0.0.1:6379&gt; ZRANGE out 0 -1 WITHSCORES\n1) &quot;three&quot;\n2) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zincrby",
    "command": "ZINCRBY",
    "description": "Increments the score of a member in a sorted set.",
    "htmlContent": "<p>Increments the score of <code>member</code> in the sorted set stored at <code>key</code> by\n<code>increment</code>.\nIf <code>member</code> does not exist in the sorted set, it is added with <code>increment</code> as\nits score (as if its previous score was <code>0.0</code>).\nIf <code>key</code> does not exist, a new sorted set with the specified <code>member</code> as its\nsole member is created.</p>\n<p>An error is returned when <code>key</code> exists but does not hold a sorted set.</p>\n<p>The <code>score</code> value should be the string representation of a numeric value, and\naccepts double precision floating point numbers.\nIt is possible to provide a negative value to decrement the score.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZINCRBY myzset 2 &quot;one&quot;\n&quot;3&quot;\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n1) &quot;two&quot;\n2) &quot;2&quot;\n3) &quot;one&quot;\n4) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zinter",
    "command": "ZINTER",
    "description": "Returns the intersect of multiple sorted sets.",
    "htmlContent": "<p>This command is similar to <code>ZINTERSTORE</code>, but instead of storing the resulting\nsorted set, it is returned to the client.</p>\n<p>For a description of the <code>WEIGHTS</code> and <code>AGGREGATE</code> options, see <code>ZUNIONSTORE</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZINTER 2 zset1 zset2\n1) &quot;one&quot;\n2) &quot;two&quot;\n127.0.0.1:6379&gt; ZINTER 2 zset1 zset2 WITHSCORES\n1) &quot;one&quot;\n2) &quot;2&quot;\n3) &quot;two&quot;\n4) &quot;4&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zintercard",
    "command": "ZINTERCARD",
    "description": "Returns the number of members of the intersect of multiple sorted sets.",
    "htmlContent": "<p>This command is similar to <code>ZINTER</code>, but instead of returning the result set, it returns just the cardinality of the result.</p>\n<p>Keys that do not exist are considered to be empty sets.\nWith one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).</p>\n<p>By default, the command calculates the cardinality of the intersection of all given sets.\nWhen provided with the optional <code>LIMIT</code> argument (which defaults to 0 and means unlimited), if the intersection cardinality reaches limit partway through the computation, the algorithm will exit and yield limit as the cardinality.\nSuch implementation ensures a significant speedup for queries where the limit is lower than the actual intersection cardinality.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZINTER 2 zset1 zset2\n1) &quot;one&quot;\n2) &quot;two&quot;\n127.0.0.1:6379&gt; ZINTERCARD 2 zset1 zset2\n(integer) 2\n127.0.0.1:6379&gt; ZINTERCARD 2 zset1 zset2 LIMIT 1\n(integer) 1\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zinterstore",
    "command": "ZINTERSTORE",
    "description": "Stores the intersect of multiple sorted sets in a key.",
    "htmlContent": "<p>Computes the intersection of <code>numkeys</code> sorted sets given by the specified keys,\nand stores the result in <code>destination</code>.\nIt is mandatory to provide the number of input keys (<code>numkeys</code>) before passing\nthe input keys and the other (optional) arguments.</p>\n<p>By default, the resulting score of an element is the sum of its scores in the\nsorted sets where it exists.\nBecause intersection requires an element to be a member of every given sorted\nset, this results in the score of every element in the resulting sorted set to\nbe equal to the number of input sorted sets.</p>\n<p>For a description of the <code>WEIGHTS</code> and <code>AGGREGATE</code> options, see <code>ZUNIONSTORE</code>.</p>\n<p>If <code>destination</code> already exists, it is overwritten.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3\n(integer) 2\n127.0.0.1:6379&gt; ZRANGE out 0 -1 WITHSCORES\n1) &quot;one&quot;\n2) &quot;5&quot;\n3) &quot;two&quot;\n4) &quot;10&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zlexcount",
    "command": "ZLEXCOUNT",
    "description": "Returns the number of members in a sorted set within a lexicographical range.",
    "htmlContent": "<p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns the number of elements in the sorted set at <code>key</code> with a value between <code>min</code> and <code>max</code>.</p>\n<p>The <code>min</code> and <code>max</code> arguments have the same meaning as described for\n<code>ZRANGEBYLEX</code>.</p>\n<p>Note: the command has a complexity of just O(log(N)) because it uses elements ranks (see <code>ZRANK</code>) to get an idea of the range. Because of this there is no need to do a work proportional to the size of the range.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e\n(integer) 5\n127.0.0.1:6379&gt; ZADD myzset 0 f 0 g\n(integer) 2\n127.0.0.1:6379&gt; ZLEXCOUNT myzset - +\n(integer) 7\n127.0.0.1:6379&gt; ZLEXCOUNT myzset [b [f\n(integer) 5\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zmpop",
    "command": "ZMPOP",
    "description": "Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.",
    "htmlContent": "<p>Pops one or more elements, that are member-score pairs, from the first non-empty sorted set in the provided list of key names.</p>\n<p><code>ZMPOP</code> and <code>BZMPOP</code> are similar to the following, more limited, commands:</p>\n<ul>\n<li><code>ZPOPMIN</code> or <code>ZPOPMAX</code> which take only one key, and can return multiple elements.</li>\n<li><code>BZPOPMIN</code> or <code>BZPOPMAX</code> which take multiple keys, but return only one element from just one key.</li>\n</ul>\n<p>See <code>BZMPOP</code> for the blocking variant of this command.</p>\n<p>When the <code>MIN</code> modifier is used, the elements popped are those with the lowest scores from the first non-empty sorted set. The <code>MAX</code> modifier causes elements with the highest scores to be popped.\nThe optional <code>COUNT</code> can be used to specify the number of elements to pop, and is set to 1 by default.</p>\n<p>The number of popped elements is the minimum from the sorted set&#39;s cardinality and <code>COUNT</code>&#39;s value.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZMPOP 1 notsuchkey MIN\n(nil)\n127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; ZMPOP 1 myzset MIN\n1) &quot;myzset&quot;\n2) 1) 1) &quot;one&quot;\n      2) &quot;1&quot;\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n1) &quot;two&quot;\n2) &quot;2&quot;\n3) &quot;three&quot;\n4) &quot;3&quot;\n127.0.0.1:6379&gt; ZMPOP 1 myzset MAX COUNT 10\n1) &quot;myzset&quot;\n2) 1) 1) &quot;three&quot;\n      2) &quot;3&quot;\n   2) 1) &quot;two&quot;\n      2) &quot;2&quot;\n127.0.0.1:6379&gt; ZADD myzset2 4 &quot;four&quot; 5 &quot;five&quot; 6 &quot;six&quot;\n(integer) 3\n127.0.0.1:6379&gt; ZMPOP 2 myzset myzset2 MIN COUNT 10\n1) &quot;myzset2&quot;\n2) 1) 1) &quot;four&quot;\n      2) &quot;4&quot;\n   2) 1) &quot;five&quot;\n      2) &quot;5&quot;\n   3) 1) &quot;six&quot;\n      2) &quot;6&quot;\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n(empty array)\n127.0.0.1:6379&gt; ZMPOP 2 myzset myzset2 MAX COUNT 10\n(nil)\n127.0.0.1:6379&gt; ZRANGE myzset2 0 -1 WITHSCORES\n(empty array)\n127.0.0.1:6379&gt; EXISTS myzset myzset2\n(integer) 0\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zmscore",
    "command": "ZMSCORE",
    "description": "Returns the score of one or more members in a sorted set.",
    "htmlContent": "<p>Returns the scores associated with the specified <code>members</code> in the sorted set stored at <code>key</code>.</p>\n<p>For every <code>member</code> that does not exist in the sorted set, a <code>nil</code> value is returned.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZMSCORE myzset &quot;one&quot; &quot;two&quot; &quot;nofield&quot;\n1) &quot;1&quot;\n2) &quot;2&quot;\n3) (nil)\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zpopmax",
    "command": "ZPOPMAX",
    "description": "Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.",
    "htmlContent": "<p>Removes and returns up to <code>count</code> members with the highest scores in the sorted\nset stored at <code>key</code>.</p>\n<p>When left unspecified, the default value for <code>count</code> is 1. Specifying a <code>count</code>\nvalue that is higher than the sorted set&#39;s cardinality will not produce an\nerror. When returning multiple elements, the one with the highest score will\nbe the first, followed by the elements with lower scores.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZPOPMAX myzset\n1) &quot;three&quot;\n2) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zpopmin",
    "command": "ZPOPMIN",
    "description": "Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.",
    "htmlContent": "<p>Removes and returns up to <code>count</code> members with the lowest scores in the sorted\nset stored at <code>key</code>.</p>\n<p>When left unspecified, the default value for <code>count</code> is 1. Specifying a <code>count</code>\nvalue that is higher than the sorted set&#39;s cardinality will not produce an\nerror. When returning multiple elements, the one with the lowest score will\nbe the first, followed by the elements with greater scores.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZPOPMIN myzset\n1) &quot;one&quot;\n2) &quot;1&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrandmember",
    "command": "ZRANDMEMBER",
    "description": "Returns one or more random members from a sorted set.",
    "htmlContent": "<p>When called with just the <code>key</code> argument, return a random element from the sorted set value stored at <code>key</code>.</p>\n<p>If the provided <code>count</code> argument is positive, return an array of <strong>distinct elements</strong>.\nThe array&#39;s length is either <code>count</code> or the sorted set&#39;s cardinality (<code>ZCARD</code>), whichever is lower.</p>\n<p>If called with a negative <code>count</code>, the behavior changes and the command is allowed to return the <strong>same element multiple times</strong>.\nIn this case, the number of returned elements is the absolute value of the specified <code>count</code>.</p>\n<p>The optional <code>WITHSCORES</code> modifier changes the reply so it includes the respective scores of the randomly selected elements from the sorted set.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD dadi 1 uno 2 due 3 tre 4 quattro 5 cinque 6 sei\n(integer) 6\n127.0.0.1:6379&gt; ZRANDMEMBER dadi\n&quot;uno&quot;\n127.0.0.1:6379&gt; ZRANDMEMBER dadi\n&quot;uno&quot;\n127.0.0.1:6379&gt; ZRANDMEMBER dadi -5 WITHSCORES\n 1) &quot;cinque&quot;\n 2) &quot;5&quot;\n 3) &quot;sei&quot;\n 4) &quot;6&quot;\n 5) &quot;quattro&quot;\n 6) &quot;4&quot;\n 7) &quot;quattro&quot;\n 8) &quot;4&quot;\n 9) &quot;sei&quot;\n10) &quot;6&quot;\n</code></pre>\n<h2>Specification of the behavior when count is passed</h2>\n<p>When the <code>count</code> argument is a positive value this command behaves as follows:</p>\n<ul>\n<li>No repeated elements are returned.</li>\n<li>If <code>count</code> is bigger than the cardinality of the sorted set, the command will only return the whole sorted set without additional elements.</li>\n<li>The order of elements in the reply is not truly random, so it is up to the client to shuffle them if needed.</li>\n</ul>\n<p>When the <code>count</code> is a negative value, the behavior changes as follows:</p>\n<ul>\n<li>Repeating elements are possible.</li>\n<li>Exactly <code>count</code> elements, or an empty array if the sorted set is empty (non-existing key), are always returned.</li>\n<li>The order of elements in the reply is truly random.</li>\n</ul>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrange",
    "command": "ZRANGE",
    "description": "Returns members in a sorted set within a range of indexes.",
    "htmlContent": "<p>Returns the specified range of elements in the sorted set stored at <code>&lt;key&gt;</code>.</p>\n<p><code>ZRANGE</code> can perform different types of range queries: by index (rank), by the score, or by lexicographical order.</p>\n<p>This command can replace the following commands: <code>ZREVRANGE</code>, <code>ZRANGEBYSCORE</code>, <code>ZREVRANGEBYSCORE</code>, <code>ZRANGEBYLEX</code> and <code>ZREVRANGEBYLEX</code>.</p>\n<h2>Common behavior and options</h2>\n<p>The order of elements is from the lowest to the highest score. Elements with the same score are ordered lexicographically.</p>\n<p>The optional <code>REV</code> argument reverses the ordering, so elements are ordered from highest to lowest score, and score ties are resolved by reverse lexicographical ordering.</p>\n<p>The optional <code>LIMIT</code> argument can be used to obtain a sub-range from the matching elements (similar to <em>SELECT LIMIT offset, count</em> in SQL).\nA negative <code>&lt;count&gt;</code> returns all elements from the <code>&lt;offset&gt;</code>. Keep in mind that if <code>&lt;offset&gt;</code> is large, the sorted set needs to be traversed for <code>&lt;offset&gt;</code> elements before getting to the elements to return, which can add up to O(N) time complexity.</p>\n<p>The optional <code>WITHSCORES</code> argument supplements the command&#39;s reply with the scores of elements returned. The returned list contains <code>value1,score1,...,valueN,scoreN</code> instead of <code>value1,...,valueN</code>. Client libraries are free to return a more appropriate data type (suggestion: an array with (value, score) arrays/tuples).</p>\n<h2>Index ranges</h2>\n<p>By default, the command performs an index range query. The <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> arguments represent zero-based indexes, where <code>0</code> is the first element, <code>1</code> is the next element, and so on. These arguments specify an <strong>inclusive range</strong>, so for example, <code>ZRANGE myzset 0 1</code> will return both the first and the second element of the sorted set.</p>\n<p>The indexes can also be negative numbers indicating offsets from the end of the sorted set, with <code>-1</code> being the last element of the sorted set, <code>-2</code> the penultimate element, and so on.</p>\n<p>Out of range indexes do not produce an error.</p>\n<p>If <code>&lt;start&gt;</code> is greater than either the end index of the sorted set or <code>&lt;stop&gt;</code>, an empty list is returned.</p>\n<p>If <code>&lt;stop&gt;</code> is greater than the end index of the sorted set, Valkey will use the last element of the sorted set.</p>\n<h2>Score ranges</h2>\n<p>When the <code>BYSCORE</code> option is provided, the command behaves like <code>ZRANGEBYSCORE</code> and returns the range of elements from the sorted set having scores equal or between <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code>.</p>\n<p><code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> can be <code>-inf</code> and <code>+inf</code>, denoting the negative and positive infinities, respectively. This means that you are not required to know the highest or lowest score in the sorted set to get all elements from or up to a certain score.</p>\n<p>By default, the score intervals specified by <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> are closed (inclusive).\nIt is possible to specify an open interval (exclusive) by prefixing the score\nwith the character <code>(</code>.</p>\n<p>For example:</p>\n<pre><code>ZRANGE zset (1 5 BYSCORE\n</code></pre>\n<p>Will return all elements with <code>1 &lt; score &lt;= 5</code> while:</p>\n<pre><code>ZRANGE zset (5 (10 BYSCORE\n</code></pre>\n<p>Will return all the elements with <code>5 &lt; score &lt; 10</code> (5 and 10 excluded).</p>\n<h2>Reverse ranges</h2>\n<p>Using the <code>REV</code> option reverses the sorted set, with index 0 as the element with the highest score.</p>\n<p>By default, <code>&lt;start&gt;</code> must be less than or equal to <code>&lt;stop&gt;</code> to return anything.\nHowever, if the <code>BYSCORE</code>, or <code>BYLEX</code> options are selected, the <code>&lt;start&gt;</code> is the highest score to consider, and <code>&lt;stop&gt;</code> is the lowest score to consider, therefore <code>&lt;start&gt;</code> must be greater than or equal to <code>&lt;stop&gt;</code> in order to return anything.</p>\n<p>For example:</p>\n<pre><code>ZRANGE zset 5 10 REV\n</code></pre>\n<p>Will return the elements between index 5 and 10 in the reversed index.</p>\n<pre><code>ZRANGE zset 10 5 REV BYSCORE\n</code></pre>\n<p>Will return all elements with scores less than 10 and greater than 5.</p>\n<h2>Lexicographical ranges</h2>\n<p>When the <code>BYLEX</code> option is used, the command behaves like <code>ZRANGEBYLEX</code> and returns the range of elements from the sorted set between the <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> lexicographical closed range intervals.</p>\n<p>Note that lexicographical ordering relies on all elements having the same score. The reply is unspecified when the elements have different scores.</p>\n<p>Valid <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> must start with <code>(</code> or <code>[</code>, in order to specify\nwhether the range interval is exclusive or inclusive, respectively.</p>\n<p>The special values of <code>+</code> or <code>-</code> for <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> mean positive and negative infinite strings, respectively, so for instance the command <code>ZRANGE myzset - + BYLEX</code> is guaranteed to return all the elements in the sorted set, providing that all the elements have the same score.</p>\n<p>The <code>REV</code> options reverses the order of the <code>&lt;start&gt;</code> and <code>&lt;stop&gt;</code> elements, where <code>&lt;start&gt;</code> must be lexicographically greater than <code>&lt;stop&gt;</code> to produce a non-empty result.</p>\n<h3>Lexicographical comparison of strings</h3>\n<p>Strings are compared as a binary array of bytes. Because of how the ASCII character set is specified, this means that usually this also have the effect of comparing normal ASCII characters in an obvious dictionary way. However, this is not true if non-plain ASCII strings are used (for example, utf8 strings).</p>\n<p>However, the user can apply a transformation to the encoded string so that the first part of the element inserted in the sorted set will compare as the user requires for the specific application. For example, if I want to\nadd strings that will be compared in a case-insensitive way, but I still\nwant to retrieve the real case when querying, I can add strings in the\nfollowing way:</p>\n<pre><code>ZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n</code></pre>\n<p>Because of the first <em>normalized</em> part in every element (before the colon character), we are forcing a given comparison. However, after the range is queried using <code>ZRANGE ... BYLEX</code>, the application can display to the user the second part of the string, after the colon.</p>\n<p>The binary nature of the comparison allows to use sorted sets as a general purpose index, for example, the first part of the element can be a 64-bit big-endian number. Since big-endian numbers have the most significant bytes in the initial positions, the binary comparison will match the numerical comparison of the numbers. This can be used in order to implement range queries on 64-bit values. As in the example below, after the first 8 bytes, we can store the value of the element we are indexing.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1\n1) &quot;one&quot;\n2) &quot;two&quot;\n3) &quot;three&quot;\n127.0.0.1:6379&gt; ZRANGE myzset 2 3\n1) &quot;three&quot;\n127.0.0.1:6379&gt; ZRANGE myzset -2 -1\n1) &quot;two&quot;\n2) &quot;three&quot;\n</code></pre>\n<p>The following example using <code>WITHSCORES</code> shows how the command returns always an array, but this time, populated with <em>element_1</em>, <em>score_1</em>, <em>element_2</em>, <em>score_2</em>, ..., <em>element_N</em>, <em>score_N</em>.</p>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; ZRANGE myzset 0 1 WITHSCORES\n1) &quot;one&quot;\n2) &quot;1&quot;\n3) &quot;two&quot;\n4) &quot;2&quot;\n</code></pre>\n<p>This example shows how to query the sorted set by score, excluding the value <code>1</code> and up to infinity, returning only the second element of the result:</p>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;\n(integer) 3\n127.0.0.1:6379&gt; ZRANGE myzset (1 +inf BYSCORE LIMIT 1 1\n1) &quot;three&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrangebylex",
    "command": "ZRANGEBYLEX",
    "description": "Returns members in a sorted set within a lexicographical range.",
    "htmlContent": "<p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at <code>key</code> with a value between <code>min</code> and <code>max</code>.</p>\n<p>If the elements in the sorted set have different scores, the returned elements are unspecified.</p>\n<p>The elements are considered to be ordered from lower to higher strings as compared byte-by-byte using the <code>memcmp()</code> C function. Longer strings are considered greater than shorter strings if the common part is identical.</p>\n<p>The optional <code>LIMIT</code> argument can be used to only get a range of the matching\nelements (similar to <em>SELECT LIMIT offset, count</em> in SQL). A negative <code>count</code>\nreturns all elements from the <code>offset</code>.\nKeep in mind that if <code>offset</code> is large, the sorted set needs to be traversed for\n<code>offset</code> elements before getting to the elements to return, which can add up to\nO(N) time complexity.</p>\n<h2>How to specify intervals</h2>\n<p>Valid <em>start</em> and <em>stop</em> must start with <code>(</code> or <code>[</code>, in order to specify\nif the range item is respectively exclusive or inclusive.\nThe special values of <code>+</code> or <code>-</code> for <em>start</em> and <em>stop</em> have the special\nmeaning or positively infinite and negatively infinite strings, so for\ninstance the command <strong>ZRANGEBYLEX myzset - +</strong> is guaranteed to return\nall the elements in the sorted set, if all the elements have the same\nscore.</p>\n<h2>Details on strings comparison</h2>\n<p>Strings are compared as binary array of bytes. Because of how the ASCII character\nset is specified, this means that usually this also have the effect of comparing\nnormal ASCII characters in an obvious dictionary way. However this is not true\nif non plain ASCII strings are used (for example utf8 strings).</p>\n<p>However the user can apply a transformation to the encoded string so that\nthe first part of the element inserted in the sorted set will compare as the\nuser requires for the specific application. For example if I want to\nadd strings that will be compared in a case-insensitive way, but I still\nwant to retrieve the real case when querying, I can add strings in the\nfollowing way:</p>\n<pre><code>ZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n</code></pre>\n<p>Because of the first <em>normalized</em> part in every element (before the colon character), we are forcing a given comparison, however after the range is queries using <code>ZRANGEBYLEX</code> the application can display to the user the second part of the string, after the colon.</p>\n<p>The binary nature of the comparison allows to use sorted sets as a general\npurpose index, for example the first part of the element can be a 64 bit\nbig endian number: since big endian numbers have the most significant bytes\nin the initial positions, the binary comparison will match the numerical\ncomparison of the numbers. This can be used in order to implement range\nqueries on 64 bit values. As in the example below, after the first 8 bytes\nwe can store the value of the element we are actually indexing.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\n(integer) 7\n127.0.0.1:6379&gt; ZRANGEBYLEX myzset - [c\n1) &quot;a&quot;\n2) &quot;b&quot;\n3) &quot;c&quot;\n127.0.0.1:6379&gt; ZRANGEBYLEX myzset - (c\n1) &quot;a&quot;\n2) &quot;b&quot;\n127.0.0.1:6379&gt; ZRANGEBYLEX myzset [aaa (g\n1) &quot;b&quot;\n2) &quot;c&quot;\n3) &quot;d&quot;\n4) &quot;e&quot;\n5) &quot;f&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrangebyscore",
    "command": "ZRANGEBYSCORE",
    "description": "Returns members in a sorted set within a range of scores.",
    "htmlContent": "<p>Returns all the elements in the sorted set at <code>key</code> with a score between <code>min</code>\nand <code>max</code> (including elements with score equal to <code>min</code> or <code>max</code>).\nThe elements are considered to be ordered from low to high scores.</p>\n<p>The elements having the same score are returned in lexicographical order (this\nfollows from a property of the sorted set implementation in Valkey and does not\ninvolve further computation).</p>\n<p>The optional <code>LIMIT</code> argument can be used to only get a range of the matching\nelements (similar to <em>SELECT LIMIT offset, count</em> in SQL). A negative <code>count</code>\nreturns all elements from the <code>offset</code>.\nKeep in mind that if <code>offset</code> is large, the sorted set needs to be traversed for\n<code>offset</code> elements before getting to the elements to return, which can add up to\nO(N) time complexity.</p>\n<p>The optional <code>WITHSCORES</code> argument makes the command return both the element and\nits score, instead of the element alone.</p>\n<h2>Exclusive intervals and infinity</h2>\n<p><code>min</code> and <code>max</code> can be <code>-inf</code> and <code>+inf</code>, so that you are not required to know\nthe highest or lowest score in the sorted set to get all elements from or up to\na certain score.</p>\n<p>By default, the interval specified by <code>min</code> and <code>max</code> is closed (inclusive).\nIt is possible to specify an open interval (exclusive) by prefixing the score\nwith the character <code>(</code>.\nFor example:</p>\n<pre><code>ZRANGEBYSCORE zset (1 5\n</code></pre>\n<p>Will return all elements with <code>1 &lt; score &lt;= 5</code> while:</p>\n<pre><code>ZRANGEBYSCORE zset (5 (10\n</code></pre>\n<p>Will return all the elements with <code>5 &lt; score &lt; 10</code> (5 and 10 excluded).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZRANGEBYSCORE myzset -inf +inf\n1) &quot;one&quot;\n2) &quot;two&quot;\n3) &quot;three&quot;\n127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 2\n1) &quot;one&quot;\n2) &quot;two&quot;\n127.0.0.1:6379&gt; ZRANGEBYSCORE myzset (1 2\n1) &quot;two&quot;\n127.0.0.1:6379&gt; ZRANGEBYSCORE myzset (1 (2\n(empty array)\n</code></pre>\n<h2>Pattern: weighted random selection of an element</h2>\n<p>Normally <code>ZRANGEBYSCORE</code> is simply used in order to get range of items\nwhere the score is the indexed integer key, however it is possible to do less\nobvious things with the command.</p>\n<p>For example a common problem when implementing Markov chains and other algorithms\nis to select an element at random from a set, but different elements may have\ndifferent weights that change how likely it is they are picked.</p>\n<p>This is how we use this command in order to mount such an algorithm:</p>\n<p>Imagine you have elements A, B and C with weights 1, 2 and 3.\nYou compute the sum of the weights, which is 1+2+3 = 6</p>\n<p>At this point you add all the elements into a sorted set using this algorithm:</p>\n<pre><code>SUM = ELEMENTS.TOTAL_WEIGHT // 6 in this case.\nSCORE = 0\nFOREACH ELE in ELEMENTS\n    SCORE += ELE.weight / SUM\n    ZADD KEY SCORE ELE\nEND\n</code></pre>\n<p>This means that you set:</p>\n<pre><code>A to score 0.16\nB to score .5\nC to score 1\n</code></pre>\n<p>Since this involves approximations, in order to avoid C is set to,\nlike, 0.998 instead of 1, we just modify the above algorithm to make sure\nthe last score is 1 (left as an exercise for the reader...).</p>\n<p>At this point, each time you want to get a weighted random element,\njust compute a random number between 0 and 1 (which is like calling\n<code>rand()</code> in most languages), so you can just do:</p>\n<pre><code>RANDOM_ELE = ZRANGEBYSCORE key RAND() +inf LIMIT 0 1\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrangestore",
    "command": "ZRANGESTORE",
    "description": "Stores a range of members from sorted set in a key.",
    "htmlContent": "<p>This command is like <code>ZRANGE</code>, but stores the result in the <code>&lt;dst&gt;</code> destination key.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD srczset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot; 4 &quot;four&quot;\n(integer) 4\n127.0.0.1:6379&gt; ZRANGESTORE dstzset srczset 2 -1\n(integer) 2\n127.0.0.1:6379&gt; ZRANGE dstzset 0 -1\n1) &quot;three&quot;\n2) &quot;four&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrank",
    "command": "ZRANK",
    "description": "Returns the index of a member in a sorted set ordered by ascending scores.",
    "htmlContent": "<p>Returns the rank of <code>member</code> in the sorted set stored at <code>key</code>, with the scores\nordered from low to high.\nThe rank (or index) is 0-based, which means that the member with the lowest\nscore has rank <code>0</code>.</p>\n<p>The optional <code>WITHSCORE</code> argument supplements the command&#39;s reply with the score of the element returned.</p>\n<p>Use <code>ZREVRANK</code> to get the rank of an element with the scores ordered from high\nto low.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZRANK myzset &quot;three&quot;\n(integer) 2\n127.0.0.1:6379&gt; ZRANK myzset &quot;four&quot;\n(nil)\n127.0.0.1:6379&gt; ZRANK myzset &quot;three&quot; WITHSCORE\n1) (integer) 2\n2) &quot;3&quot;\n127.0.0.1:6379&gt; ZRANK myzset &quot;four&quot; WITHSCORE\n(nil)\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrem",
    "command": "ZREM",
    "description": "Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.",
    "htmlContent": "<p>Removes the specified members from the sorted set stored at <code>key</code>.\nNon existing members are ignored.</p>\n<p>An error is returned when <code>key</code> exists and does not hold a sorted set.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZREM myzset &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n1) &quot;one&quot;\n2) &quot;1&quot;\n3) &quot;three&quot;\n4) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zremrangebylex",
    "command": "ZREMRANGEBYLEX",
    "description": "Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.",
    "htmlContent": "<p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command removes all elements in the sorted set stored at <code>key</code> between the lexicographical range specified by <code>min</code> and <code>max</code>.</p>\n<p>The meaning of <code>min</code> and <code>max</code> are the same of the <code>ZRANGEBYLEX</code> command. Similarly, this command actually removes the same elements that <code>ZRANGEBYLEX</code> would return if called with the same <code>min</code> and <code>max</code> arguments.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e\n(integer) 5\n127.0.0.1:6379&gt; ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha\n(integer) 5\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1\n 1) &quot;ALPHA&quot;\n 2) &quot;aaaa&quot;\n 3) &quot;alpha&quot;\n 4) &quot;b&quot;\n 5) &quot;c&quot;\n 6) &quot;d&quot;\n 7) &quot;e&quot;\n 8) &quot;foo&quot;\n 9) &quot;zap&quot;\n10) &quot;zip&quot;\n127.0.0.1:6379&gt; ZREMRANGEBYLEX myzset [alpha [omega\n(integer) 6\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1\n1) &quot;ALPHA&quot;\n2) &quot;aaaa&quot;\n3) &quot;zap&quot;\n4) &quot;zip&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zremrangebyrank",
    "command": "ZREMRANGEBYRANK",
    "description": "Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.",
    "htmlContent": "<p>Removes all elements in the sorted set stored at <code>key</code> with rank between <code>start</code>\nand <code>stop</code>.\nBoth <code>start</code> and <code>stop</code> are <code>0</code> -based indexes with <code>0</code> being the element with\nthe lowest score.\nThese indexes can be negative numbers, where they indicate offsets starting at\nthe element with the highest score.\nFor example: <code>-1</code> is the element with the highest score, <code>-2</code> the element with\nthe second highest score and so forth.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZREMRANGEBYRANK myzset 0 1\n(integer) 2\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n1) &quot;three&quot;\n2) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zremrangebyscore",
    "command": "ZREMRANGEBYSCORE",
    "description": "Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.",
    "htmlContent": "<p>Removes all elements in the sorted set stored at <code>key</code> with a score between\n<code>min</code> and <code>max</code> (inclusive).</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset -inf (2\n(integer) 1\n127.0.0.1:6379&gt; ZRANGE myzset 0 -1 WITHSCORES\n1) &quot;two&quot;\n2) &quot;2&quot;\n3) &quot;three&quot;\n4) &quot;3&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrevrange",
    "command": "ZREVRANGE",
    "description": "Returns members in a sorted set within a range of indexes in reverse order.",
    "htmlContent": "<p>Returns the specified range of elements in the sorted set stored at <code>key</code>.\nThe elements are considered to be ordered from the highest to the lowest score.\nDescending lexicographical order is used for elements with equal score.</p>\n<p>Apart from the reversed ordering, <code>ZREVRANGE</code> is similar to <code>ZRANGE</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZREVRANGE myzset 0 -1\n1) &quot;three&quot;\n2) &quot;two&quot;\n3) &quot;one&quot;\n127.0.0.1:6379&gt; ZREVRANGE myzset 2 3\n1) &quot;one&quot;\n127.0.0.1:6379&gt; ZREVRANGE myzset -2 -1\n1) &quot;two&quot;\n2) &quot;one&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrevrangebylex",
    "command": "ZREVRANGEBYLEX",
    "description": "Returns members in a sorted set within a lexicographical range in reverse order.",
    "htmlContent": "<p>When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at <code>key</code> with a value between <code>max</code> and <code>min</code>.</p>\n<p>Apart from the reversed ordering, <code>ZREVRANGEBYLEX</code> is similar to <code>ZRANGEBYLEX</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\n(integer) 7\n127.0.0.1:6379&gt; ZREVRANGEBYLEX myzset [c -\n1) &quot;c&quot;\n2) &quot;b&quot;\n3) &quot;a&quot;\n127.0.0.1:6379&gt; ZREVRANGEBYLEX myzset (c -\n1) &quot;b&quot;\n2) &quot;a&quot;\n127.0.0.1:6379&gt; ZREVRANGEBYLEX myzset (g [aaa\n1) &quot;f&quot;\n2) &quot;e&quot;\n3) &quot;d&quot;\n4) &quot;c&quot;\n5) &quot;b&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrevrangebyscore",
    "command": "ZREVRANGEBYSCORE",
    "description": "Returns members in a sorted set within a range of scores in reverse order.",
    "htmlContent": "<p>Returns all the elements in the sorted set at <code>key</code> with a score between <code>max</code>\nand <code>min</code> (including elements with score equal to <code>max</code> or <code>min</code>).\nIn contrary to the default ordering of sorted sets, for this command the\nelements are considered to be ordered from high to low scores.</p>\n<p>The elements having the same score are returned in reverse lexicographical\norder.</p>\n<p>Apart from the reversed ordering, <code>ZREVRANGEBYSCORE</code> is similar to\n<code>ZRANGEBYSCORE</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset +inf -inf\n1) &quot;three&quot;\n2) &quot;two&quot;\n3) &quot;one&quot;\n127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 2 1\n1) &quot;two&quot;\n2) &quot;one&quot;\n127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 2 (1\n1) &quot;two&quot;\n127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset (2 (1\n(empty array)\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zrevrank",
    "command": "ZREVRANK",
    "description": "Returns the index of a member in a sorted set ordered by descending scores.",
    "htmlContent": "<p>Returns the rank of <code>member</code> in the sorted set stored at <code>key</code>, with the scores\nordered from high to low.\nThe rank (or index) is 0-based, which means that the member with the highest\nscore has rank <code>0</code>.</p>\n<p>The optional <code>WITHSCORE</code> argument supplements the command&#39;s reply with the score of the element returned.</p>\n<p>Use <code>ZRANK</code> to get the rank of an element with the scores ordered from low to\nhigh.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD myzset 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZREVRANK myzset &quot;one&quot;\n(integer) 2\n127.0.0.1:6379&gt; ZREVRANK myzset &quot;four&quot;\n(nil)\n127.0.0.1:6379&gt; ZREVRANK myzset &quot;three&quot; WITHSCORE\n1) (integer) 0\n2) &quot;3&quot;\n127.0.0.1:6379&gt; ZREVRANK myzset &quot;four&quot; WITHSCORE\n(nil)\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zscan",
    "command": "ZSCAN",
    "description": "Iterates over members and scores of a sorted set.",
    "htmlContent": "<p>See <code>SCAN</code> for <code>ZSCAN</code> documentation.</p>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zscore",
    "command": "ZSCORE",
    "description": "Returns the score of a member in a sorted set.",
    "htmlContent": "<p>Returns the score of <code>member</code> in the sorted set at <code>key</code>.</p>\n<p>If <code>member</code> does not exist in the sorted set, or <code>key</code> does not exist, <code>nil</code> is\nreturned.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD myzset 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZSCORE myzset &quot;one&quot;\n&quot;1&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zunion",
    "command": "ZUNION",
    "description": "Returns the union of multiple sorted sets.",
    "htmlContent": "<p>This command is similar to <code>ZUNIONSTORE</code>, but instead of storing the resulting\nsorted set, it is returned to the client.</p>\n<p>For a description of the <code>WEIGHTS</code> and <code>AGGREGATE</code> options, see <code>ZUNIONSTORE</code>.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZUNION 2 zset1 zset2\n1) &quot;one&quot;\n2) &quot;three&quot;\n3) &quot;two&quot;\n127.0.0.1:6379&gt; ZUNION 2 zset1 zset2 WITHSCORES\n1) &quot;one&quot;\n2) &quot;2&quot;\n3) &quot;three&quot;\n4) &quot;3&quot;\n5) &quot;two&quot;\n6) &quot;4&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  },
  {
    "unid": "cmd-zunionstore",
    "command": "ZUNIONSTORE",
    "description": "Stores the union of multiple sorted sets in a key.",
    "htmlContent": "<p>Computes the union of <code>numkeys</code> sorted sets given by the specified keys, and\nstores the result in <code>destination</code>.\nIt is mandatory to provide the number of input keys (<code>numkeys</code>) before passing\nthe input keys and the other (optional) arguments.</p>\n<p>By default, the resulting score of an element is the sum of its scores in the\nsorted sets where it exists.</p>\n<p>Using the <code>WEIGHTS</code> option, it is possible to specify a multiplication factor\nfor each input sorted set.\nThis means that the score of every element in every input sorted set is\nmultiplied by this factor before being passed to the aggregation function.\nWhen <code>WEIGHTS</code> is not given, the multiplication factors default to <code>1</code>.</p>\n<p>With the <code>AGGREGATE</code> option, it is possible to specify how the results of the\nunion are aggregated.\nThis option defaults to <code>SUM</code>, where the score of an element is summed across\nthe inputs where it exists.\nWhen this option is set to either <code>MIN</code> or <code>MAX</code>, the resulting set will contain\nthe minimum or maximum score of an element across the inputs where it exists.</p>\n<p>If <code>destination</code> already exists, it is overwritten.</p>\n<h2>Notes</h2>\n<p>If an option <code>WEIGHTS</code> or <code>AGGREGATE</code> is given multiple times, it is undefined\nwhich option takes precedence.</p>\n<h2>Examples</h2>\n<pre><code>127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset1 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 2 &quot;two&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZADD zset2 3 &quot;three&quot;\n(integer) 1\n127.0.0.1:6379&gt; ZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3\n(integer) 3\n127.0.0.1:6379&gt; ZRANGE out 0 -1 WITHSCORES\n1) &quot;one&quot;\n2) &quot;5&quot;\n3) &quot;three&quot;\n4) &quot;9&quot;\n5) &quot;two&quot;\n6) &quot;10&quot;\n</code></pre>\n",
    "categories": [
      "sorted-set"
    ]
  }
];
